"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _typeof3=require("@babel/runtime/helpers/typeof");Object.defineProperty(exports,"__esModule",{value:true});exports.ZarrPixelSource=exports.XRLayer=exports.XR3DLayer=exports.VolumeViewer=exports.VolumeView=exports.VolumeLayer=exports.VivViewer=exports.VivView=exports.TiffPixelSource=exports.SideBySideViewer=exports.SideBySideView=exports.ScaleBarLayer=exports.RENDERING_MODES=exports.PictureInPictureViewer=exports.OverviewView=exports.OverviewLayer=exports.OVERVIEW_VIEW_ID=exports.MultiscaleImageLayer=exports.MAX_CHANNELS=exports.LensExtension=exports.ImageLayer=exports.DetailView=exports.DTYPE_VALUES=exports.DETAIL_VIEW_ID=exports.ColorPaletteExtension=exports.ColorPalette3DExtensions=exports.COLORMAPS=exports.BitmapLayer=exports.AdditiveColormapExtension=exports.AdditiveColormap3DExtensions=void 0;exports.getChannelStats=getChannelStats;exports.getDefaultInitialViewState=getDefaultInitialViewState;exports.loadBioformatsZarr=loadBioformatsZarr;exports.loadOmeTiff=loadOmeTiff;exports.loadOmeZarr=loadOmeZarr;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _typeof2=_interopRequireDefault(require("@babel/runtime/helpers/typeof"));var _assertThisInitialized2=_interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _get2=_interopRequireDefault(require("@babel/runtime/helpers/get"));var _inherits2=_interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _possibleConstructorReturn2=_interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2=_interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _core=require("@deck.gl/core");var _math=require("math.gl");var _constants=_interopRequireDefault(require("@luma.gl/constants"));var _geoLayers=require("@deck.gl/geo-layers");var _core2=require("@luma.gl/core");var _engine=require("@luma.gl/engine");var _webgl=require("@luma.gl/webgl");var _layers=require("@deck.gl/layers");var _quickselect=_interopRequireDefault(require("quickselect"));var _culling=require("@math.gl/culling");var _react=_interopRequireWildcard(require("react"));var _react2=_interopRequireDefault(require("@deck.gl/react"));var _fastDeepEqual=_interopRequireDefault(require("fast-deep-equal"));var _geotiff=require("geotiff");var _lzwTiffDecoder=require("lzw-tiff-decoder");var _fastXmlParser=_interopRequireDefault(require("fast-xml-parser"));var _zarr=require("zarr");var _RENDERING_MODES_BLEN,_RENDERING_MODES_COLO,_globalThis$navigator,_globalThis$navigator2;var _excluded=["props","oldProps","changeFlags"],_excluded2=["props","oldProps","changeFlags"],_excluded3=["props","oldProps","changeFlags"],_excluded4=["target","useFixedAxis"];function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||_typeof3(obj)!=="object"&&typeof obj!=="function"){return{"default":obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj["default"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e){throw _e;},f:F};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e2){didErr=true;err=_e2;},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2["default"])(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2["default"])(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2["default"])(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}var fs$7="#define SHADER_NAME xr-layer-fragment-shader\nprecision highp float;precision highp int;precision highp SAMPLER_TYPE;\n#define GLSLIFY 1\nuniform SAMPLER_TYPE channel0;uniform SAMPLER_TYPE channel1;uniform SAMPLER_TYPE channel2;uniform SAMPLER_TYPE channel3;uniform SAMPLER_TYPE channel4;uniform SAMPLER_TYPE channel5;in vec2 vTexCoord;uniform vec2 contrastLimits[6];uniform float minAlphaIntensity;void main(){float intensity0=float(texture(channel0,vTexCoord).r);DECKGL_PROCESS_INTENSITY(intensity0,contrastLimits[0],minAlphaIntensity,0);float intensity1=float(texture(channel1,vTexCoord).r);DECKGL_PROCESS_INTENSITY(intensity1,contrastLimits[1],minAlphaIntensity,1);float intensity2=float(texture(channel2,vTexCoord).r);DECKGL_PROCESS_INTENSITY(intensity2,contrastLimits[2],minAlphaIntensity,2);float intensity3=float(texture(channel3,vTexCoord).r);DECKGL_PROCESS_INTENSITY(intensity3,contrastLimits[3],minAlphaIntensity,3);float intensity4=float(texture(channel4,vTexCoord).r);DECKGL_PROCESS_INTENSITY(intensity4,contrastLimits[4],minAlphaIntensity,4);float intensity5=float(texture(channel5,vTexCoord).r);DECKGL_PROCESS_INTENSITY(intensity5,contrastLimits[5],minAlphaIntensity,5);DECKGL_MUTATE_COLOR(gl_FragColor,intensity0,intensity1,intensity2,intensity3,intensity4,intensity5,vTexCoord);geometry.uv=vTexCoord;DECKGL_FILTER_COLOR(gl_FragColor,geometry);}";// eslint-disable-line
var vs$1="#define GLSLIFY 1\n#define SHADER_NAME xr-layer-vertex-shader\nattribute vec2 texCoords;attribute vec3 positions;attribute vec3 positions64Low;attribute vec3 instancePickingColors;varying vec2 vTexCoord;void main(void){geometry.worldPosition=positions;geometry.uv=texCoords;geometry.pickingColor=instancePickingColors;gl_Position=project_position_to_clipspace(positions,positions64Low,vec3(0.),geometry.position);DECKGL_FILTER_GL_POSITION(gl_Position,geometry);vTexCoord=texCoords;vec4 color=vec4(0.);DECKGL_FILTER_COLOR(color,geometry);}";// eslint-disable-line
var fs$6="#define GLSLIFY 1\nfloat apply_contrast_limits(float intensity,vec2 contrastLimits,float minAlphaIntensity){float intensityMultiplier=0.;if(intensity>=minAlphaIntensity){intensityMultiplier=1.;}return max(0.,(intensityMultiplier*intensity-contrastLimits[0])/max(0.0005,(contrastLimits[1]-contrastLimits[0])));}";// eslint-disable-line
var channels$1={name:'channel-intensity-module',defines:{SAMPLER_TYPE:'usampler2D',COLORMAP_FUNCTION:''},fs:fs$6};var MAX_COLOR_INTENSITY=255;var DEFAULT_COLOR_OFF=[0,0,0];var MAX_CHANNELS=6;exports.MAX_CHANNELS=MAX_CHANNELS;var DEFAULT_FONT_FAMILY="-apple-system, 'Helvetica Neue', Arial, sans-serif";var DTYPE_VALUES={Uint8:{format:_constants["default"].R8UI,dataFormat:_constants["default"].RED_INTEGER,type:_constants["default"].UNSIGNED_BYTE,max:Math.pow(2,8)-1,sampler:"usampler2D"},Uint16:{format:_constants["default"].R16UI,dataFormat:_constants["default"].RED_INTEGER,type:_constants["default"].UNSIGNED_SHORT,max:Math.pow(2,16)-1,sampler:"usampler2D"},Uint32:{format:_constants["default"].R32UI,dataFormat:_constants["default"].RED_INTEGER,type:_constants["default"].UNSIGNED_INT,max:Math.pow(2,32)-1,sampler:"usampler2D"},Float32:{format:_constants["default"].R32F,dataFormat:_constants["default"].RED,type:_constants["default"].FLOAT,max:3.4*Math.pow(10,38),sampler:"sampler2D"},Int8:{format:_constants["default"].R8I,dataFormat:_constants["default"].RED_INTEGER,type:_constants["default"].BYTE,max:Math.pow(2,8-1)-1,sampler:"isampler2D"},Int16:{format:_constants["default"].R16I,dataFormat:_constants["default"].RED_INTEGER,type:_constants["default"].SHORT,max:Math.pow(2,16-1)-1,sampler:"isampler2D"},Int32:{format:_constants["default"].R32I,dataFormat:_constants["default"].RED_INTEGER,type:_constants["default"].INT,max:Math.pow(2,32-1)-1,sampler:"isampler2D"},Float64:{format:_constants["default"].R32F,dataFormat:_constants["default"].RED,type:_constants["default"].FLOAT,max:3.4*Math.pow(10,38),sampler:"sampler2D",cast:function cast(data){return new Float32Array(data);}}};exports.DTYPE_VALUES=DTYPE_VALUES;var COLORMAPS=["jet","hsv","hot","cool","spring","summer","autumn","winter","bone","copper","greys","yignbu","greens","yiorrd","bluered","rdbu","picnic","rainbow","portland","blackbody","earth","electric","alpha","viridis","inferno","magma","plasma","warm","rainbow-soft","bathymetry","cdom","chlorophyll","density","freesurface-blue","freesurface-red","oxygen","par","phase","salinity","temperature","turbidity","velocity-blue","velocity-green","cubehelix"];exports.COLORMAPS=COLORMAPS;var RENDERING_MODES=/* @__PURE__ */function(RENDERING_MODES2){RENDERING_MODES2["MAX_INTENSITY_PROJECTION"]="Maximum Intensity Projection";RENDERING_MODES2["MIN_INTENSITY_PROJECTION"]="Minimum Intensity Projection";RENDERING_MODES2["ADDITIVE"]="Additive";return RENDERING_MODES2;}(RENDERING_MODES||{});exports.RENDERING_MODES=RENDERING_MODES;function range(len){return(0,_toConsumableArray2["default"])(Array(len).keys());}function padWithDefault(arr,defaultValue,padWidth){for(var i=0;i<padWidth;i+=1){arr.push(defaultValue);}return arr;}/**
 * (Safely) get GL values for associated dtype.
 * @param {keyof typeof import('../constants').DTYPE_VALUES} dtype
 */function getDtypeValues(dtype){var values=DTYPE_VALUES[dtype];if(!values){var valid=Object.keys(DTYPE_VALUES);throw Error("Dtype not supported, got ".concat(dtype,". Must be one of ").concat(valid,"."));}return values;}function padContrastLimits(_ref){var _ref$contrastLimits=_ref.contrastLimits,contrastLimits=_ref$contrastLimits===void 0?[]:_ref$contrastLimits,channelsVisible=_ref.channelsVisible,domain=_ref.domain,dtype=_ref.dtype;var maxSliderValue=domain&&domain[1]||getDtypeValues(dtype).max;var newContrastLimits=contrastLimits.map(function(slider,i){return channelsVisible[i]?slider:[maxSliderValue,maxSliderValue];});// Need to pad contrastLimits and colors with default values (required by shader)
var padSize=MAX_CHANNELS-newContrastLimits.length;if(padSize<0){throw Error("".concat(newContrastLimits.lengths," channels passed in, but only 6 are allowed."));}var paddedContrastLimits=padWithDefault(newContrastLimits,[maxSliderValue,maxSliderValue],padSize).reduce(function(acc,val){return acc.concat(val);},[]);return paddedContrastLimits;}/**
 * Get physical size scaling Matrix4
 * @param {Object} loader PixelSource
 */function getPhysicalSizeScalingMatrix(loader){var _loader$meta$physical,_loader$meta;var _ref2=(_loader$meta$physical=loader===null||loader===void 0?void 0:(_loader$meta=loader.meta)===null||_loader$meta===void 0?void 0:_loader$meta.physicalSizes)!==null&&_loader$meta$physical!==void 0?_loader$meta$physical:{},x=_ref2.x,y=_ref2.y,z=_ref2.z;if(x!==null&&x!==void 0&&x.size&&y!==null&&y!==void 0&&y.size&&z!==null&&z!==void 0&&z.size){var min=Math.min(z.size,x.size,y.size);var ratio=[x.size/min,y.size/min,z.size/min];return new _math.Matrix4().scale(ratio);}return new _math.Matrix4().identity();}/* eslint-disable prefer-destructuring */var coreShaderModule={fs:fs$7,vs:vs$1};function validateWebGL2Filter(gl,interpolation){var canShowFloat=(0,_webgl.hasFeature)(gl,_webgl.FEATURES.TEXTURE_FLOAT);var canShowLinear=(0,_webgl.hasFeature)(gl,_webgl.FEATURES.TEXTURE_FILTER_LINEAR_FLOAT);if(!canShowFloat){throw new Error('WebGL1 context does not support floating point textures.  Unable to display raster data.');}if(!canShowLinear&&interpolation===_constants["default"].LINEAR){console.warn('LINEAR filtering not supported in WebGL1 context.  Falling back to NEAREST.');return _constants["default"].NEAREST;}return interpolation;}function getRenderingAttrs$1(dtype,gl,interpolation){if(!(0,_core2.isWebGL2)(gl)){return{format:_constants["default"].LUMINANCE,dataFormat:_constants["default"].LUMINANCE,type:_constants["default"].FLOAT,sampler:'sampler2D',shaderModule:coreShaderModule,filter:validateWebGL2Filter(gl,interpolation),cast:function cast(data){return new Float32Array(data);}};}// Linear filtering only works when the data type is cast to Float32.
var isLinear=interpolation===_constants["default"].LINEAR;// Need to add es version tag so that shaders work in WebGL2 since the tag is needed for using usampler2d with WebGL2.
// Very cursed!
var upgradedShaderModule=_objectSpread({},coreShaderModule);var version300str='#version 300 es\n';upgradedShaderModule.fs=version300str.concat(upgradedShaderModule.fs);upgradedShaderModule.vs=version300str.concat(upgradedShaderModule.vs);var values=getDtypeValues(isLinear?'Float32':dtype);// Check if a cast function is present in the returned data for the dtype
var identity=function identity(x){return x;};var cast=typeof values.cast==='function'?values.cast:identity;return _objectSpread(_objectSpread({},values),{},{shaderModule:upgradedShaderModule,filter:interpolation,cast:isLinear?function(data){return new Float32Array(data);}:cast});}var defaultProps$d={pickable:{type:'boolean',value:true,compare:true},coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,channelData:{type:'object',value:{},compare:true},bounds:{type:'array',value:[0,0,1,1],compare:true},contrastLimits:{type:'array',value:[],compare:true},channelsVisible:{type:'array',value:[],compare:true},dtype:{type:'string',value:'Uint16',compare:true},interpolation:{type:'number',value:_constants["default"].NEAREST,compare:true}};/**
 * @typedef LayerProps
 * @type {object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {string} dtype Dtype for the layer.
 * @property {Array.<number>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {String=} id Unique identifier for this layer.
 * @property {function=} onHover Hook function from deck.gl to handle hover objects.
 * @property {function=} onClick Hook function from deck.gl to handle clicked-on objects.
 * @property {Object=} modelMatrix Math.gl Matrix4 object containing an affine transformation to be applied to the image.
 * Thus setting this to a truthy value (with a colormap set) indicates that the shader should make that color transparent.
 * @property {number=} interpolation The TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER for WebGL rendering (see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter) - default is GL.NEAREST
 */ /**
 * @type {{ new (...props: import('../../types').Viv<LayerProps>[]) }}
 * @ignore
 */var XRLayer=/*#__PURE__*/function(_Layer){(0,_inherits2["default"])(XRLayer,_Layer);var _super=_createSuper(XRLayer);function XRLayer(){(0,_classCallCheck2["default"])(this,XRLayer);return _super.apply(this,arguments);}(0,_createClass2["default"])(XRLayer,[{key:"getShaders",value:/**
   * This function replaces `usampler` with `sampler` if the data is not an unsigned integer
   * and adds a standard ramp function default for DECKGL_PROCESS_INTENSITY.
   */function getShaders(){var _this$props=this.props,dtype=_this$props.dtype,interpolation=_this$props.interpolation;var _getRenderingAttrs$=getRenderingAttrs$1(dtype,this.context.gl,interpolation),shaderModule=_getRenderingAttrs$.shaderModule,sampler=_getRenderingAttrs$.sampler;var extensionDefinesDeckglProcessIntensity=this._isHookDefinedByExtensions('fs:DECKGL_PROCESS_INTENSITY');var newChannelsModule=_objectSpread(_objectSpread({},channels$1),{},{inject:{}});if(!extensionDefinesDeckglProcessIntensity){newChannelsModule.inject['fs:DECKGL_PROCESS_INTENSITY']="\n        intensity = apply_contrast_limits(intensity, contrastLimits, minAlphaIntensity);\n      ";}return(0,_get2["default"])((0,_getPrototypeOf2["default"])(XRLayer.prototype),"getShaders",this).call(this,_objectSpread(_objectSpread({},shaderModule),{},{defines:{SAMPLER_TYPE:sampler},modules:[_core.project32,_core.picking,newChannelsModule]}));}},{key:"_isHookDefinedByExtensions",value:function _isHookDefinedByExtensions(hookName){var extensions=this.props.extensions;return extensions===null||extensions===void 0?void 0:extensions.some(function(e){var shaders=e.getShaders();var _shaders$inject=shaders.inject,inject=_shaders$inject===void 0?{}:_shaders$inject,_shaders$modules=shaders.modules,modules=_shaders$modules===void 0?[]:_shaders$modules;var definesInjection=inject[hookName];var moduleDefinesInjection=modules.some(function(m){return m===null||m===void 0?void 0:m.inject[hookName];});return definesInjection||moduleDefinesInjection;});}/**
   * This function initializes the internal state.
   */},{key:"initializeState",value:function initializeState(){var gl=this.context.gl;// This tells WebGL how to read row data from the texture.  For example, the default here is 4 (i.e for RGBA, one byte per channel) so
// each row of data is expected to be a multiple of 4.  This setting (i.e 1) allows us to have non-multiple-of-4 row sizes.  For example, for 2 byte (16 bit data),
// we could use 2 as the value and it would still work, but 1 also works fine (and is more flexible for 8 bit - 1 byte - textures as well).
// https://stackoverflow.com/questions/42789896/webgl-error-arraybuffer-not-big-enough-for-request-in-case-of-gl-luminance
gl.pixelStorei(_constants["default"].UNPACK_ALIGNMENT,1);gl.pixelStorei(_constants["default"].PACK_ALIGNMENT,1);var attributeManager=this.getAttributeManager();attributeManager.add({positions:{size:3,type:_constants["default"].DOUBLE,fp64:this.use64bitPositions(),update:this.calculatePositions,noAlloc:true}});this.setState({numInstances:1,positions:new Float64Array(12)});var programManager=_engine.ProgramManager.getDefaultProgramManager(gl);var mutateStr='fs:DECKGL_MUTATE_COLOR(inout vec4 rgba, float intensity0, float intensity1, float intensity2, float intensity3, float intensity4, float intensity5, vec2 vTexCoord)';var processStr="fs:DECKGL_PROCESS_INTENSITY(inout float intensity, vec2 contrastLimits, float minAlphaIntensity, int channelIndex)";// Only initialize shader hook functions _once globally_
// Since the program manager is shared across all layers, but many layers
// might be created, this solves the performance issue of always adding new
// hook functions.
// See https://github.com/kylebarron/deck.gl-raster/blob/2eb91626f0836558f0be4cd201ea18980d7f7f2d/src/deckgl/raster-layer/raster-layer.js#L21-L40
if(!programManager._hookFunctions.includes(mutateStr)){programManager.addShaderHook(mutateStr);}if(!programManager._hookFunctions.includes(processStr)){programManager.addShaderHook(processStr);}}/**
   * This function finalizes state by clearing all textures from the WebGL context
   */},{key:"finalizeState",value:function finalizeState(){(0,_get2["default"])((0,_getPrototypeOf2["default"])(XRLayer.prototype),"finalizeState",this).call(this);if(this.state.textures){Object.values(this.state.textures).forEach(function(tex){return tex&&tex["delete"]();});}}/**
   * This function updates state by retriggering model creation (shader compilation and attribute binding)
   * and loading any textures that need be loading.
   */},{key:"updateState",value:function updateState(_ref3){var _props$channelData,_oldProps$channelData;var props=_ref3.props,oldProps=_ref3.oldProps,changeFlags=_ref3.changeFlags,rest=(0,_objectWithoutProperties2["default"])(_ref3,_excluded);(0,_get2["default"])((0,_getPrototypeOf2["default"])(XRLayer.prototype),"updateState",this).call(this,_objectSpread({props:props,oldProps:oldProps,changeFlags:changeFlags},rest));// setup model first
if(changeFlags.extensionsChanged||props.interpolation!==oldProps.interpolation){var gl=this.context.gl;if(this.state.model){this.state.model["delete"]();}this.setState({model:this._getModel(gl)});this.getAttributeManager().invalidateAll();}if(props.channelData!==oldProps.channelData&&((_props$channelData=props.channelData)===null||_props$channelData===void 0?void 0:_props$channelData.data)!==((_oldProps$channelData=oldProps.channelData)===null||_oldProps$channelData===void 0?void 0:_oldProps$channelData.data)||props.interpolation!==oldProps.interpolation){this.loadChannelTextures(props.channelData);}var attributeManager=this.getAttributeManager();if(props.bounds!==oldProps.bounds){attributeManager.invalidate('positions');}}/**
   * This function creates the luma.gl model.
   */},{key:"_getModel",value:function _getModel(gl){if(!gl){return null;}/*
       0,0 --- 1,0
        |       |
       0,1 --- 1,1
     */return new _core2.Model(gl,_objectSpread(_objectSpread({},this.getShaders()),{},{id:this.props.id,geometry:new _core2.Geometry({drawMode:_constants["default"].TRIANGLE_FAN,vertexCount:4,attributes:{texCoords:new Float32Array([0,1,0,0,1,0,1,1])}}),isInstanced:false}));}/**
   * This function generates view positions for use as a vec3 in the shader
   */},{key:"calculatePositions",value:function calculatePositions(attributes){var positions=this.state.positions;var bounds=this.props.bounds;// bounds as [minX, minY, maxX, maxY]
/*
      (minX0, maxY3) ---- (maxX2, maxY3)
             |                  |
             |                  |
             |                  |
      (minX0, minY1) ---- (maxX2, minY1)
   */positions[0]=bounds[0];positions[1]=bounds[1];positions[2]=0;positions[3]=bounds[0];positions[4]=bounds[3];positions[5]=0;positions[6]=bounds[2];positions[7]=bounds[3];positions[8]=0;positions[9]=bounds[2];positions[10]=bounds[1];positions[11]=0;// eslint-disable-next-line  no-param-reassign
attributes.value=positions;}/**
   * This function runs the shaders and draws to the canvas
   */},{key:"draw",value:function draw(_ref4){var uniforms=_ref4.uniforms;var _this$state=this.state,textures=_this$state.textures,model=_this$state.model;if(textures&&model){var _this$props2=this.props,contrastLimits=_this$props2.contrastLimits,minAlphaIntensity=_this$props2.minAlphaIntensity,domain=_this$props2.domain,dtype=_this$props2.dtype,channelsVisible=_this$props2.channelsVisible;// Check number of textures not null.
var numTextures=Object.values(textures).filter(function(t){return t;}).length;// Slider values and color values can come in before textures since their data is async.
// Thus we pad based on the number of textures bound.
var paddedContrastLimits=padContrastLimits({contrastLimits:contrastLimits.slice(0,numTextures),channelsVisible:channelsVisible.slice(0,numTextures),domain:domain,dtype:dtype});model.setUniforms(_objectSpread(_objectSpread({},uniforms),{},{contrastLimits:paddedContrastLimits,minAlphaIntensity:minAlphaIntensity||0.},textures)).draw();}}/**
   * This function loads all channel textures from incoming resolved promises/data from the loaders by calling `dataToTexture`
   */},{key:"loadChannelTextures",value:function loadChannelTextures(channelData){var _this=this;var textures={channel0:null,channel1:null,channel2:null,channel3:null,channel4:null,channel5:null};if(this.state.textures){Object.values(this.state.textures).forEach(function(tex){return tex&&tex["delete"]();});}if(channelData&&Object.keys(channelData).length>0&&channelData.data){channelData.data.forEach(function(d,i){textures["channel".concat(i)]=_this.dataToTexture(d,channelData.width,channelData.height);},this);this.setState({textures:textures});}}/**
   * This function creates textures from the data
   */},{key:"dataToTexture",value:function dataToTexture(data,width,height){var _attrs$cast,_attrs$cast2,_parameters;var interpolation=this.props.interpolation;var attrs=getRenderingAttrs$1(this.props.dtype,this.context.gl,interpolation);return new _core2.Texture2D(this.context.gl,{width:width,height:height,data:(_attrs$cast=(_attrs$cast2=attrs.cast)===null||_attrs$cast2===void 0?void 0:_attrs$cast2.call(attrs,data))!==null&&_attrs$cast!==void 0?_attrs$cast:data,// we don't want or need mimaps
mipmaps:false,parameters:(_parameters={},(0,_defineProperty2["default"])(_parameters,_constants["default"].TEXTURE_MIN_FILTER,attrs.filter),(0,_defineProperty2["default"])(_parameters,_constants["default"].TEXTURE_MAG_FILTER,attrs.filter),(0,_defineProperty2["default"])(_parameters,_constants["default"].TEXTURE_WRAP_S,_constants["default"].CLAMP_TO_EDGE),(0,_defineProperty2["default"])(_parameters,_constants["default"].TEXTURE_WRAP_T,_constants["default"].CLAMP_TO_EDGE),_parameters),format:attrs.format,dataFormat:attrs.dataFormat,type:attrs.type});}}]);return XRLayer;}(_core.Layer);exports.XRLayer=XRLayer;XRLayer.layerName='XRLayer';XRLayer.defaultProps=defaultProps$d;// eslint-disable-next-line max-classes-per-file
var PHOTOMETRIC_INTERPRETATIONS={WhiteIsZero:0,BlackIsZero:1,RGB:2,Palette:3,TransparencyMask:4,CMYK:5,YCbCr:6,CIELab:8,ICCLab:9};var defaultProps$c=_objectSpread(_objectSpread({},_layers.BitmapLayer.defaultProps),{},{pickable:{type:'boolean',value:true,compare:true},coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN});var getPhotometricInterpretationShader=function getPhotometricInterpretationShader(photometricInterpretation,transparentColorInHook){var useTransparentColor=transparentColorInHook?'true':'false';var transparentColorVector="vec3(".concat((transparentColorInHook||[0,0,0]).map(function(i){return String(i/255);}).join(','),")");switch(photometricInterpretation){case PHOTOMETRIC_INTERPRETATIONS.RGB:return"color[3] = (".concat(useTransparentColor," && (color.rgb == ").concat(transparentColorVector,")) ? 0.0 : color.a;");case PHOTOMETRIC_INTERPRETATIONS.WhiteIsZero:return"          float value = 1.0 - (color.r / 256.0);\n          color = vec4(value, value, value, (".concat(useTransparentColor," && vec3(value, value, value) == ").concat(transparentColorVector,") ? 0.0 : color.a);\n        ");case PHOTOMETRIC_INTERPRETATIONS.BlackIsZero:return"          float value = (color.r / 256.0);\n          color = vec4(value, value, value, (".concat(useTransparentColor," && vec3(value, value, value) == ").concat(transparentColorVector,") ? 0.0 : color.a);\n        ");case PHOTOMETRIC_INTERPRETATIONS.YCbCr:// We need to use an epsilon because the conversion to RGB is not perfect.
return"          float y = color[0];\n          float cb = color[1];\n          float cr = color[2];\n          color[0] = (y + (1.40200 * (cr - .5)));\n          color[1] = (y - (0.34414 * (cb - .5)) - (0.71414 * (cr - .5)));\n          color[2] = (y + (1.77200 * (cb - .5)));\n          color[3] = (".concat(useTransparentColor," && distance(color.rgb, ").concat(transparentColorVector,") < 0.01) ? 0.0 : color.a;\n        ");default:console.error('Unsupported photometric interpretation or none provided.  No transformation will be done to image data');return'';}};var getTransparentColor=function getTransparentColor(photometricInterpretation){switch(photometricInterpretation){case PHOTOMETRIC_INTERPRETATIONS.RGB:return[0,0,0,0];case PHOTOMETRIC_INTERPRETATIONS.WhiteIsZero:return[255,255,255,0];case PHOTOMETRIC_INTERPRETATIONS.BlackIsZero:return[0,0,0,0];case PHOTOMETRIC_INTERPRETATIONS.YCbCr:return[16,128,128,0];default:console.error('Unsupported photometric interpretation or none provided.  No transformation will be done to image data');return[0,0,0,0];}};var BitmapLayerWrapper=/*#__PURE__*/function(_BitmapLayer$){(0,_inherits2["default"])(BitmapLayerWrapper,_BitmapLayer$);var _super2=_createSuper(BitmapLayerWrapper);function BitmapLayerWrapper(){(0,_classCallCheck2["default"])(this,BitmapLayerWrapper);return _super2.apply(this,arguments);}(0,_createClass2["default"])(BitmapLayerWrapper,[{key:"_getModel",value:function _getModel(gl){var _this$props3=this.props,photometricInterpretation=_this$props3.photometricInterpretation,transparentColorInHook=_this$props3.transparentColorInHook;// This is a port to the GPU of a subset of https://github.com/geotiffjs/geotiff.js/blob/master/src/rgb.js
// Safari was too slow doing this off of the GPU and it is noticably faster on other browsers as well.
var photometricInterpretationShader=getPhotometricInterpretationShader(photometricInterpretation,transparentColorInHook);if(!gl){return null;}/*
      0,0 --- 1,0
       |       |
      0,1 --- 1,1
    */return new _core2.Model(gl,_objectSpread(_objectSpread({},this.getShaders()),{},{id:this.props.id,geometry:new _core2.Geometry({drawMode:_constants["default"].TRIANGLES,vertexCount:6}),isInstanced:false,inject:{'fs:DECKGL_FILTER_COLOR':photometricInterpretationShader}}));}}]);return BitmapLayerWrapper;}(_layers.BitmapLayer);/**
 * @typedef LayerProps
 * @type {object}
 * @property {number=} opacity Opacity of the layer.
 * @property {function=} onClick Hook function from deck.gl to handle clicked-on objects.
 * @property {Object=} modelMatrix Math.gl Matrix4 object containing an affine transformation to be applied to the image.
 * @property {number=} photometricInterpretation One of WhiteIsZero BlackIsZero YCbCr or RGB (default)
 * @property {Array.<number>=} transparentColor An RGB (0-255 range) color to be considered "transparent" if provided.
 * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
 * This parameter only needs to be a truthy value when using colormaps because each colormap has its own transparent color that is calculated on the shader.
 * Thus setting this to a truthy value (with a colormap set) indicates that the shader should make that color transparent.
 * @property {String=} id Unique identifier for this layer.
 */ /**
 * @type {{ new (...props: import('../types').Viv<LayerProps>[]) }}
 * @ignore
 */var BitmapLayer=/*#__PURE__*/function(_CompositeLayer){(0,_inherits2["default"])(BitmapLayer,_CompositeLayer);var _super3=_createSuper(BitmapLayer);function BitmapLayer(){(0,_classCallCheck2["default"])(this,BitmapLayer);return _super3.apply(this,arguments);}(0,_createClass2["default"])(BitmapLayer,[{key:"initializeState",value:function initializeState(args){var gl=this.context.gl;// This tells WebGL how to read row data from the texture.  For example, the default here is 4 (i.e for RGBA, one byte per channel) so
// each row of data is expected to be a multiple of 4.  This setting (i.e 1) allows us to have non-multiple-of-4 row sizes.  For example, for 2 byte (16 bit data),
// we could use 2 as the value and it would still work, but 1 also works fine (and is more flexible for 8 bit - 1 byte - textures as well).
// https://stackoverflow.com/questions/42789896/webgl-error-arraybuffer-not-big-enough-for-request-in-case-of-gl-luminance
// This needs to be called here and not in the BitmapLayerWrapper because the `image` prop is converted to a texture outside of the layer, as controlled by the `image` type.
// See: https://github.com/visgl/deck.gl/pull/5197
gl.pixelStorei(_constants["default"].UNPACK_ALIGNMENT,1);gl.pixelStorei(_constants["default"].PACK_ALIGNMENT,1);(0,_get2["default"])((0,_getPrototypeOf2["default"])(BitmapLayer.prototype),"initializeState",this).call(this,args);}},{key:"renderLayers",value:function renderLayers(){var _this$props4=this.props,photometricInterpretation=_this$props4.photometricInterpretation,transparentColorInHook=_this$props4.transparentColor;var transparentColor=getTransparentColor(photometricInterpretation);return new BitmapLayerWrapper(this.props,{// transparentColor is a prop applied to the original image data by deck.gl's
// BitmapLayer and needs to be in the original colorspace.  It is used to determine
// what color is "transparent" in the original color space (i.e what shows when opacity is 0).
transparentColor:transparentColor,// This is our transparentColor props which needs to be applied in the hook that converts to the RGB space.
transparentColorInHook:transparentColorInHook,id:"".concat(this.props.id,"-wrapped")});}}]);return BitmapLayer;}(_core.CompositeLayer);exports.BitmapLayer=BitmapLayer;BitmapLayer.layerName='BitmapLayer';// From https://github.com/geotiffjs/geotiff.js/blob/8ef472f41b51d18074aece2300b6a8ad91a21ae1/src/globals.js#L202-L213
BitmapLayer.PHOTOMETRIC_INTERPRETATIONS=PHOTOMETRIC_INTERPRETATIONS;BitmapLayer.defaultProps=_objectSpread(_objectSpread({},defaultProps$c),{},{// We don't want this layer to bind the texture so the type should not be `image`.
image:{type:'object',value:{},compare:true},transparentColor:{type:'array',value:[0,0,0],compare:true},photometricInterpretation:{type:'number',value:2,compare:true}});BitmapLayerWrapper.defaultProps=defaultProps$c;BitmapLayerWrapper.layerName='BitmapLayerWrapper';function getChannelStats(arr){var len=arr.length;var min=Infinity;var max=-Infinity;var total=0;while(len--){if(arr[len]<min){min=arr[len];}if(arr[len]>max){max=arr[len];}total+=arr[len];}var mean=total/arr.length;len=arr.length;var sumSquared=0;while(len--){sumSquared+=Math.pow(arr[len]-mean,2);}var sd=Math.pow(sumSquared/arr.length,0.5);var mid=Math.floor(arr.length/2);var firstQuartileLocation=Math.floor(arr.length/4);var thirdQuartileLocation=3*Math.floor(arr.length/4);(0,_quickselect["default"])(arr,mid);var median=arr[mid];(0,_quickselect["default"])(arr,firstQuartileLocation,0,mid);var q1=arr[firstQuartileLocation];(0,_quickselect["default"])(arr,thirdQuartileLocation,mid,arr.length-1);var q3=arr[thirdQuartileLocation];var cutoffArr=arr.filter(function(i){return i>0;});var cutoffPercentile=5e-4;var topCutoffLocation=Math.floor(cutoffArr.length*(1-cutoffPercentile));var bottomCutoffLocation=Math.floor(cutoffArr.length*cutoffPercentile);(0,_quickselect["default"])(cutoffArr,topCutoffLocation);(0,_quickselect["default"])(cutoffArr,bottomCutoffLocation,0,topCutoffLocation);var contrastLimits=[cutoffArr[bottomCutoffLocation]||0,cutoffArr[topCutoffLocation]||0];return{mean:mean,sd:sd,q1:q1,q3:q3,median:median,domain:[min,max],contrastLimits:contrastLimits};}function ensureArray(x){return Array.isArray(x)?x:[x];}function intToRgba(_int){if(!Number.isInteger(_int)){throw Error("Not an integer.");}var buffer=new ArrayBuffer(4);var view=new DataView(buffer);view.setInt32(0,_int,false);var bytes=new Uint8Array(buffer);return Array.from(bytes);}function isInterleaved(shape){var lastDimSize=shape[shape.length-1];return lastDimSize===3||lastDimSize===4;}function getLabels(dimOrder){return dimOrder.toLowerCase().split("").reverse();}function getDims(labels){var lookup=new Map(labels.map(function(name,i){return[name,i];}));if(lookup.size!==labels.length){throw Error("Labels must be unique, found duplicated label.");}return function(name){var index=lookup.get(name);if(index===void 0){throw Error("Invalid dimension.");}return index;};}function getImageSize(source){var interleaved=isInterleaved(source.shape);var _source$shape$slice=source.shape.slice(interleaved?-3:-2),_source$shape$slice2=(0,_slicedToArray2["default"])(_source$shape$slice,2),height=_source$shape$slice2[0],width=_source$shape$slice2[1];return{height:height,width:width};}function prevPowerOf2(x){return Math.pow(2,Math.floor(Math.log2(x)));}var SIGNAL_ABORTED="__vivSignalAborted";function renderSubLayers(props){var _props$tile=props.tile,_props$tile$bbox=_props$tile.bbox,left=_props$tile$bbox.left,top=_props$tile$bbox.top,right=_props$tile$bbox.right,bottom=_props$tile$bbox.bottom,x=_props$tile.x,y=_props$tile.y,z=_props$tile.z;var data=props.data,id=props.id,loader=props.loader,maxZoom=props.maxZoom;// Only render in positive coorinate system
if([left,bottom,right,top].some(function(v){return v<0;})||!data){return null;}var base=loader[0];var _getImageSize=getImageSize(base),height=_getImageSize.height,width=_getImageSize.width;// Tiles are exactly fitted to have height and width such that their bounds match that of the actual image (not some padded version).
// Thus the right/bottom given by deck.gl are incorrect since they assume tiles are of uniform sizes, which is not the case for us.
var bounds=[left,data.height<base.tileSize?height:bottom,data.width<base.tileSize?width:right,top];if(isInterleaved(base.shape)){var _base$meta$photometri=base.meta.photometricInterpretation,photometricInterpretation=_base$meta$photometri===void 0?2:_base$meta$photometri;return new BitmapLayer(props,{image:data,photometricInterpretation:photometricInterpretation,// Shared props with XRLayer:
bounds:bounds,id:"tile-sub-layer-".concat(bounds,"-").concat(id),tileId:{x:x,y:y,z:z},extensions:[]});}return new XRLayer(props,{channelData:data,// Uncomment to help debugging - shades the tile being hovered over.
// autoHighlight: true,
// highlightColor: [80, 80, 80, 50],
// Shared props with BitmapLayer:
bounds:bounds,id:"tile-sub-layer-".concat(bounds,"-").concat(id),tileId:{x:x,y:y,z:z},// The auto setting is NEAREST at the highest resolution but LINEAR otherwise.
interpolation:z===maxZoom?_constants["default"].NEAREST:_constants["default"].LINEAR});}var defaultProps$b={pickable:{type:'boolean',value:true,compare:true},coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,contrastLimits:{type:'array',value:[],compare:true},channelsVisible:{type:'array',value:[],compare:true},renderSubLayers:{type:'function',value:renderSubLayers,compare:false},dtype:{type:'string',value:'Uint16',compare:true},domain:{type:'array',value:[],compare:true},viewportId:{type:'string',value:'',compare:true},interpolation:{type:'number',value:null,compare:true}};/**
 * This layer serves as a proxy of sorts to the rendering done in renderSubLayers, reacting to viewport changes in a custom manner.
 */var MultiscaleImageLayerBase=/*#__PURE__*/function(_TileLayer){(0,_inherits2["default"])(MultiscaleImageLayerBase,_TileLayer);var _super4=_createSuper(MultiscaleImageLayerBase);function MultiscaleImageLayerBase(){(0,_classCallCheck2["default"])(this,MultiscaleImageLayerBase);return _super4.apply(this,arguments);}(0,_createClass2["default"])(MultiscaleImageLayerBase,[{key:"_updateTileset",value:/**
   * This function allows us to controls which viewport gets to update the Tileset2D.
   * This is a uniquely TileLayer issue since it updates based on viewport updates thanks
   * to its ability to handle zoom-pan loading.  Essentially, with a picture-in-picture,
   * this prevents it from detecting the update of some other viewport that is unwanted.
   */function _updateTileset(){if(!this.props.viewportId){(0,_get2["default"])((0,_getPrototypeOf2["default"])(MultiscaleImageLayerBase.prototype),"_updateTileset",this).call(this);}if(this.props.viewportId&&this.context.viewport.id===this.props.viewportId||// I don't know why, but DeckGL doesn't recognize multiple views on the first pass
// so we force update on the first pass by checking if there is a viewport in the tileset.
!this.state.tileset._viewport){(0,_get2["default"])((0,_getPrototypeOf2["default"])(MultiscaleImageLayerBase.prototype),"_updateTileset",this).call(this);}}}]);return MultiscaleImageLayerBase;}(_geoLayers.TileLayer);MultiscaleImageLayerBase.layerName='MultiscaleImageLayerBase';MultiscaleImageLayerBase.defaultProps=defaultProps$b;var fs$5="#define GLSLIFY 1\nuniform float majorLensAxis;uniform float minorLensAxis;uniform vec2 lensCenter;uniform bool lensEnabled;uniform int lensSelection;uniform vec3 lensBorderColor;uniform float lensBorderRadius;uniform vec3 colors[6];bool frag_in_lens_bounds(vec2 vTexCoord){return pow((lensCenter.x-vTexCoord.x)/majorLensAxis,2.)+pow((lensCenter.y-vTexCoord.y)/minorLensAxis,2.)<(1.-lensBorderRadius);}bool frag_on_lens_bounds(vec2 vTexCoord){float ellipseDistance=pow((lensCenter.x-vTexCoord.x)/majorLensAxis,2.)+pow((lensCenter.y-vTexCoord.y)/minorLensAxis,2.);return ellipseDistance<=1.&&ellipseDistance>=(1.-lensBorderRadius);}float get_use_color_float(vec2 vTexCoord,int channelIndex){bool isFragInLensBounds=frag_in_lens_bounds(vTexCoord);bool inLensAndUseLens=lensEnabled&&isFragInLensBounds;return float(int((inLensAndUseLens&&channelIndex==lensSelection)||(!inLensAndUseLens)));}void mutate_color(inout vec3 rgb,float intensity0,float intensity1,float intensity2,float intensity3,float intensity4,float intensity5,vec2 vTexCoord){float useColorValue=0.;useColorValue=get_use_color_float(vTexCoord,0);rgb+=max(0.,min(1.,intensity0))*max(vec3(colors[0]),(1.-useColorValue)*vec3(1.,1.,1.));useColorValue=get_use_color_float(vTexCoord,1);rgb+=max(0.,min(1.,intensity1))*max(vec3(colors[1]),(1.-useColorValue)*vec3(1.,1.,1.));useColorValue=get_use_color_float(vTexCoord,2);rgb+=max(0.,min(1.,intensity2))*max(vec3(colors[2]),(1.-useColorValue)*vec3(1.,1.,1.));useColorValue=get_use_color_float(vTexCoord,3);rgb+=max(0.,min(1.,intensity3))*max(vec3(colors[3]),(1.-useColorValue)*vec3(1.,1.,1.));useColorValue=get_use_color_float(vTexCoord,4);rgb+=max(0.,min(1.,intensity4))*max(vec3(colors[4]),(1.-useColorValue)*vec3(1.,1.,1.));useColorValue=get_use_color_float(vTexCoord,5);rgb+=max(0.,min(1.,intensity5))*max(vec3(colors[5]),(1.-useColorValue)*vec3(1.,1.,1.));}";// eslint-disable-line
var lens={name:'lens-module',fs:fs$5,inject:{'fs:DECKGL_MUTATE_COLOR':"\n   vec3 rgb = rgba.rgb;\n   mutate_color(rgb, intensity0, intensity1, intensity2, intensity3, intensity4, intensity5, vTexCoord);\n   rgba = vec4(rgb, 1.);\n  ",'fs:#main-end':"\n      bool isFragOnLensBounds = frag_on_lens_bounds(vTexCoord);\n     gl_FragColor = (lensEnabled && isFragOnLensBounds) ? vec4(lensBorderColor, 1.) : gl_FragColor;\n  "}};// prettier-ignore
var COLOR_PALETTE=[[0,0,255],// blue
[0,255,0],// green
[255,0,255],// magenta
[255,255,0],// yellow
[255,128,0],// orange
[0,255,255],// cyan
[255,255,255],// white
[255,0,0]// red
];function getDefaultPalette(n){if(n>COLOR_PALETTE.length){throw new Error('Too many colors');}return COLOR_PALETTE.slice(0,n);}function padColors(_ref5){var colors=_ref5.colors,channelsVisible=_ref5.channelsVisible;var newColors=colors.map(function(color,i){return channelsVisible[i]?color.map(function(c){return c/MAX_COLOR_INTENSITY;}):DEFAULT_COLOR_OFF;});var padSize=MAX_CHANNELS-newColors.length;var paddedColors=padWithDefault(newColors,DEFAULT_COLOR_OFF,padSize).reduce(function(acc,val){return acc.concat(val);},[]);return paddedColors;}var defaultProps$a={lensEnabled:{type:'boolean',value:false,compare:true},lensSelection:{type:'number',value:0,compare:true},lensRadius:{type:'number',value:100,compare:true},lensBorderColor:{type:'array',value:[255,255,255],compare:true},lensBorderRadius:{type:'number',value:0.02,compare:true},colors:{type:'array',value:null,compare:true}};/**
 * This deck.gl extension allows for a lens that selectively shows one channel in its chosen color and then the others in white.
 * @typedef LayerProps
 * @type {Object}
 * @property {boolean=} lensEnabled Whether or not to use the lens.
 * @property {number=} lensSelection Numeric index of the channel to be focused on by the lens.
 * @property {number=} lensRadius Pixel radius of the lens (default: 100).
 * @property {Array.<number>=} lensBorderColor RGB color of the border of the lens (default [255, 255, 255]).
 * @property {number=} lensBorderRadius Percentage of the radius of the lens for a border (default 0.02).
 * @property {Array<Array.<number>>=} colors Color palette to pseudo-color channels as.
 * */var LensExtension=/*#__PURE__*/function(_LayerExtension){(0,_inherits2["default"])(LensExtension,_LayerExtension);var _super5=_createSuper(LensExtension);function LensExtension(){(0,_classCallCheck2["default"])(this,LensExtension);return _super5.apply(this,arguments);}(0,_createClass2["default"])(LensExtension,[{key:"getShaders",value:function getShaders(){return _objectSpread(_objectSpread({},(0,_get2["default"])((0,_getPrototypeOf2["default"])(LensExtension.prototype),"getShaders",this).call(this)),{},{modules:[lens]});}},{key:"initializeState",value:function initializeState(){var _this2=this;var layer=this.getCurrentLayer();// No need to run this on layers that don't have a `draw` call.
if(layer.isComposite){return;}var onMouseMove=function onMouseMove(){var viewportId=layer.props.viewportId;var _this2$props$lensRadi=_this2.props.lensRadius,lensRadius=_this2$props$lensRadi===void 0?defaultProps$a.lensRadius.value:_this2$props$lensRadi;// If there is no viewportId, don't try to do anything.
if(!viewportId){layer.setState({unprojectLensBounds:[0,0,0,0]});return;}var mousePosition=layer.context.mousePosition;var layerView=layer.context.deck.viewManager.views.filter(function(view){return view.id===viewportId;})[0];var viewState=layer.context.deck.viewManager.viewState[viewportId];var viewport=layerView.makeViewport(_objectSpread(_objectSpread({},viewState),{},{viewState:viewState}));// If the mouse is in the viewport and the mousePosition exists, set
// the state with the bounding box of the circle that will render as a lens.
if(mousePosition&&viewport.containsPixel(mousePosition)){var offsetMousePosition={x:mousePosition.x-viewport.x,y:mousePosition.y-viewport.y};var mousePositionBounds=[// left
[offsetMousePosition.x-lensRadius,offsetMousePosition.y],// bottom
[offsetMousePosition.x,offsetMousePosition.y+lensRadius],// right
[offsetMousePosition.x+lensRadius,offsetMousePosition.y],// top
[offsetMousePosition.x,offsetMousePosition.y-lensRadius]];// Unproject from screen to world coordinates.
var unprojectLensBounds=mousePositionBounds.map(function(bounds,i){return viewport.unproject(bounds)[i%2];});layer.setState({unprojectLensBounds:unprojectLensBounds});}else{layer.setState({unprojectLensBounds:[0,0,0,0]});}};if(this.context.deck){this.context.deck.eventManager.on({pointermove:onMouseMove,pointerleave:onMouseMove,wheel:onMouseMove});}this.setState({onMouseMove:onMouseMove,unprojectLensBounds:[0,0,0,0]});}},{key:"draw",value:function draw(){var _this$state$model;var _this$state$unproject=this.state.unprojectLensBounds,unprojectLensBounds=_this$state$unproject===void 0?[0,0,0,0]:_this$state$unproject;var _this$props5=this.props,bounds=_this$props5.bounds,_this$props5$lensEnab=_this$props5.lensEnabled,lensEnabled=_this$props5$lensEnab===void 0?defaultProps$a.lensEnabled.value:_this$props5$lensEnab,_this$props5$lensSele=_this$props5.lensSelection,lensSelection=_this$props5$lensSele===void 0?defaultProps$a.lensSelection.value:_this$props5$lensSele,_this$props5$lensBord=_this$props5.lensBorderColor,lensBorderColor=_this$props5$lensBord===void 0?defaultProps$a.lensBorderColor.value:_this$props5$lensBord,_this$props5$lensBord2=_this$props5.lensBorderRadius,lensBorderRadius=_this$props5$lensBord2===void 0?defaultProps$a.lensBorderRadius.value:_this$props5$lensBord2,colors=_this$props5.colors,channelsVisible=_this$props5.channelsVisible;// Creating a unit-square scaled intersection box for rendering the lens.
// It is ok if these coordinates are outside the unit square since
// we check membership in or out of the lens on the fragment shader.
var _unprojectLensBounds=(0,_slicedToArray2["default"])(unprojectLensBounds,4),leftMouseBound=_unprojectLensBounds[0],bottomMouseBound=_unprojectLensBounds[1],rightMouseBound=_unprojectLensBounds[2],topMouseBound=_unprojectLensBounds[3];var _bounds=(0,_slicedToArray2["default"])(bounds,4),left=_bounds[0],bottom=_bounds[1],right=_bounds[2],top=_bounds[3];var leftMouseBoundScaled=(leftMouseBound-left)/(right-left);var bottomMouseBoundScaled=(bottomMouseBound-top)/(bottom-top);var rightMouseBoundScaled=(rightMouseBound-left)/(right-left);var topMouseBoundScaled=(topMouseBound-top)/(bottom-top);var paddedColors=padColors({channelsVisible:channelsVisible||this.selections.map(function(){return true;}),colors:colors||getDefaultPalette(this.props.selections.length)});var uniforms={majorLensAxis:(rightMouseBoundScaled-leftMouseBoundScaled)/2,minorLensAxis:(bottomMouseBoundScaled-topMouseBoundScaled)/2,lensCenter:[(rightMouseBoundScaled+leftMouseBoundScaled)/2,(bottomMouseBoundScaled+topMouseBoundScaled)/2],lensEnabled:lensEnabled,lensSelection:lensSelection,lensBorderColor:lensBorderColor,lensBorderRadius:lensBorderRadius,colors:paddedColors};// eslint-disable-next-line no-unused-expressions
(_this$state$model=this.state.model)===null||_this$state$model===void 0?void 0:_this$state$model.setUniforms(uniforms);}},{key:"finalizeState",value:function finalizeState(){// Remove event listeners
if(this.context.deck){var _this$state2,_this$state3,_this$state4;this.context.deck.eventManager.off({pointermove:(_this$state2=this.state)===null||_this$state2===void 0?void 0:_this$state2.onMouseMove,pointerleave:(_this$state3=this.state)===null||_this$state3===void 0?void 0:_this$state3.onMouseMove,wheel:(_this$state4=this.state)===null||_this$state4===void 0?void 0:_this$state4.onMouseMove});}}}]);return LensExtension;}(_core.LayerExtension);exports.LensExtension=LensExtension;LensExtension.extensionName='LensExtension';LensExtension.defaultProps=defaultProps$a;var fs$4="#define GLSLIFY 1\nvec4 apply_transparent_color_1540259130(vec3 color,vec3 transparentColor,bool useTransparentColor,float opacity){return vec4(color,(color==transparentColor&&useTransparentColor)? 0. : opacity);}uniform vec3 transparentColor;uniform bool useTransparentColor;uniform float opacity;uniform vec3 colors[6];void mutate_color(inout vec3 rgb,float intensity0,float intensity1,float intensity2,float intensity3,float intensity4,float intensity5){rgb+=max(0.0,min(1.0,intensity0))*vec3(colors[0]);rgb+=max(0.0,min(1.0,intensity1))*vec3(colors[1]);rgb+=max(0.0,min(1.0,intensity2))*vec3(colors[2]);rgb+=max(0.0,min(1.0,intensity3))*vec3(colors[3]);rgb+=max(0.0,min(1.0,intensity4))*vec3(colors[4]);rgb+=max(0.0,min(1.0,intensity5))*vec3(colors[5]);}vec4 apply_opacity(vec3 rgb){return vec4(apply_transparent_color_1540259130(rgb,transparentColor,useTransparentColor,opacity));}";// eslint-disable-line
var colorPalette={name:'color-palette-module',fs:fs$4,inject:{'fs:DECKGL_MUTATE_COLOR':"\n   vec3 rgb = rgba.rgb;\n   mutate_color(rgb, intensity0, intensity1, intensity2, intensity3, intensity4, intensity5);\n   rgba = apply_opacity(rgb);\n  "}};var defaultProps$9={colors:{type:'array',value:null,compare:true},opacity:{type:'number',value:1.0,compare:true},transparentColor:{type:'array',value:null,compare:true},useTransparentColor:{type:'boolean',value:false,compare:true}};/**
 * This deck.gl extension allows for a color palette to be used for pseudo-coloring channels.
 * @typedef LayerProps
 * @type {object}
 * @property {Array<Array<number>>=} colors Array of colors to map channels to (RGB).
 * @property {number=} opacity Opacity of the layer.
 * @property {Array.<number>=} transparentColor An RGB (0-255 range) color to be considered "transparent" if provided.
 * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
 * @property {Boolean=} useTransparentColor Whether or not to use the value provided to transparentColor.
 * */var ColorPaletteExtension=/*#__PURE__*/function(_LayerExtension2){(0,_inherits2["default"])(ColorPaletteExtension,_LayerExtension2);var _super6=_createSuper(ColorPaletteExtension);function ColorPaletteExtension(){(0,_classCallCheck2["default"])(this,ColorPaletteExtension);return _super6.apply(this,arguments);}(0,_createClass2["default"])(ColorPaletteExtension,[{key:"getShaders",value:function getShaders(){return _objectSpread(_objectSpread({},(0,_get2["default"])((0,_getPrototypeOf2["default"])(ColorPaletteExtension.prototype),"getShaders",this).call(this)),{},{modules:[colorPalette]});}},{key:"draw",value:function draw(){var _this$state$model2;var _this$props6=this.props,colors=_this$props6.colors,channelsVisible=_this$props6.channelsVisible,_this$props6$opacity=_this$props6.opacity,opacity=_this$props6$opacity===void 0?defaultProps$9.opacity.value:_this$props6$opacity,_this$props6$transpar=_this$props6.transparentColor,transparentColor=_this$props6$transpar===void 0?defaultProps$9.transparentColor.value:_this$props6$transpar,_this$props6$useTrans=_this$props6.useTransparentColor,useTransparentColor=_this$props6$useTrans===void 0?defaultProps$9.useTransparentColor.value:_this$props6$useTrans;var paddedColors=padColors({channelsVisible:channelsVisible||this.selections.map(function(){return true;}),colors:colors||getDefaultPalette(this.props.selections.length)});var uniforms={colors:paddedColors,opacity:opacity,transparentColor:(transparentColor||[0,0,0]).map(function(i){return i/255;}),useTransparentColor:Boolean(useTransparentColor)};// eslint-disable-next-line no-unused-expressions
(_this$state$model2=this.state.model)===null||_this$state$model2===void 0?void 0:_this$state$model2.setUniforms(uniforms);}}]);return ColorPaletteExtension;}(_core.LayerExtension);exports.ColorPaletteExtension=ColorPaletteExtension;ColorPaletteExtension.extensionName='ColorPaletteExtension';ColorPaletteExtension.defaultProps=defaultProps$9;var fs$3="#define GLSLIFY 1\nvec4 jet(float x_17){const float e0=0.0;const vec4 v0=vec4(0,0,0.5137254901960784,1);const float e1=0.125;const vec4 v1=vec4(0,0.23529411764705882,0.6666666666666666,1);const float e2=0.375;const vec4 v2=vec4(0.0196078431372549,1,1,1);const float e3=0.625;const vec4 v3=vec4(1,1,0,1);const float e4=0.875;const vec4 v4=vec4(0.9803921568627451,0,0,1);const float e5=1.0;const vec4 v5=vec4(0.5019607843137255,0,0,1);float a0=smoothstep(e0,e1,x_17);float a1=smoothstep(e1,e2,x_17);float a2=smoothstep(e2,e3,x_17);float a3=smoothstep(e3,e4,x_17);float a4=smoothstep(e4,e5,x_17);return max(mix(v0,v1,a0)*step(e0,x_17)*step(x_17,e1),max(mix(v1,v2,a1)*step(e1,x_17)*step(x_17,e2),max(mix(v2,v3,a2)*step(e2,x_17)*step(x_17,e3),max(mix(v3,v4,a3)*step(e3,x_17)*step(x_17,e4),mix(v4,v5,a4)*step(e4,x_17)*step(x_17,e5)))));}vec4 hsv(float x_18){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=0.169;const vec4 v1=vec4(0.9921568627450981,1,0.00784313725490196,1);const float e2=0.173;const vec4 v2=vec4(0.9686274509803922,1,0.00784313725490196,1);const float e3=0.337;const vec4 v3=vec4(0,0.9882352941176471,0.01568627450980392,1);const float e4=0.341;const vec4 v4=vec4(0,0.9882352941176471,0.0392156862745098,1);const float e5=0.506;const vec4 v5=vec4(0.00392156862745098,0.9764705882352941,1,1);const float e6=0.671;const vec4 v6=vec4(0.00784313725490196,0,0.9921568627450981,1);const float e7=0.675;const vec4 v7=vec4(0.03137254901960784,0,0.9921568627450981,1);const float e8=0.839;const vec4 v8=vec4(1,0,0.984313725490196,1);const float e9=0.843;const vec4 v9=vec4(1,0,0.9607843137254902,1);const float e10=1.0;const vec4 v10=vec4(1,0,0.023529411764705882,1);float a0=smoothstep(e0,e1,x_18);float a1=smoothstep(e1,e2,x_18);float a2=smoothstep(e2,e3,x_18);float a3=smoothstep(e3,e4,x_18);float a4=smoothstep(e4,e5,x_18);float a5=smoothstep(e5,e6,x_18);float a6=smoothstep(e6,e7,x_18);float a7=smoothstep(e7,e8,x_18);float a8=smoothstep(e8,e9,x_18);float a9=smoothstep(e9,e10,x_18);return max(mix(v0,v1,a0)*step(e0,x_18)*step(x_18,e1),max(mix(v1,v2,a1)*step(e1,x_18)*step(x_18,e2),max(mix(v2,v3,a2)*step(e2,x_18)*step(x_18,e3),max(mix(v3,v4,a3)*step(e3,x_18)*step(x_18,e4),max(mix(v4,v5,a4)*step(e4,x_18)*step(x_18,e5),max(mix(v5,v6,a5)*step(e5,x_18)*step(x_18,e6),max(mix(v6,v7,a6)*step(e6,x_18)*step(x_18,e7),max(mix(v7,v8,a7)*step(e7,x_18)*step(x_18,e8),max(mix(v8,v9,a8)*step(e8,x_18)*step(x_18,e9),mix(v9,v10,a9)*step(e9,x_18)*step(x_18,e10))))))))));}vec4 hot(float x_13){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.3;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.6;const vec4 v2=vec4(1,0.8235294117647058,0,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_13);float a1=smoothstep(e1,e2,x_13);float a2=smoothstep(e2,e3,x_13);return max(mix(v0,v1,a0)*step(e0,x_13)*step(x_13,e1),max(mix(v1,v2,a1)*step(e1,x_13)*step(x_13,e2),mix(v2,v3,a2)*step(e2,x_13)*step(x_13,e3)));}vec4 cool(float x_24){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.4549019607843137,0,0.8549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);const float e3=0.38;const vec4 v3=vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);const float e4=0.5;const vec4 v4=vec4(0,0.8,0.7725490196078432,1);const float e5=0.63;const vec4 v5=vec4(0,0.9686274509803922,0.5725490196078431,1);const float e6=0.75;const vec4 v6=vec4(0,1,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.1568627450980392,1,0.03137254901960784,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_24);float a1=smoothstep(e1,e2,x_24);float a2=smoothstep(e2,e3,x_24);float a3=smoothstep(e3,e4,x_24);float a4=smoothstep(e4,e5,x_24);float a5=smoothstep(e5,e6,x_24);float a6=smoothstep(e6,e7,x_24);float a7=smoothstep(e7,e8,x_24);return max(mix(v0,v1,a0)*step(e0,x_24)*step(x_24,e1),max(mix(v1,v2,a1)*step(e1,x_24)*step(x_24,e2),max(mix(v2,v3,a2)*step(e2,x_24)*step(x_24,e3),max(mix(v3,v4,a3)*step(e3,x_24)*step(x_24,e4),max(mix(v4,v5,a4)*step(e4,x_24)*step(x_24,e5),max(mix(v5,v6,a5)*step(e5,x_24)*step(x_24,e6),max(mix(v6,v7,a6)*step(e6,x_24)*step(x_24,e7),mix(v7,v8,a7)*step(e7,x_24)*step(x_24,e8))))))));}vec4 spring(float x_5){const float e0=0.0;const vec4 v0=vec4(1,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_5);return mix(v0,v1,a0)*step(e0,x_5)*step(x_5,e1);}vec4 summer(float x_12){const float e0=0.0;const vec4 v0=vec4(0,0.5019607843137255,0.4,1);const float e1=1.0;const vec4 v1=vec4(1,1,0.4,1);float a0=smoothstep(e0,e1,x_12);return mix(v0,v1,a0)*step(e0,x_12)*step(x_12,e1);}vec4 autumn(float x_25){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_25);return mix(v0,v1,a0)*step(e0,x_25)*step(x_25,e1);}vec4 winter(float x_16){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(0,1,0.5019607843137255,1);float a0=smoothstep(e0,e1,x_16);return mix(v0,v1,a0)*step(e0,x_16)*step(x_16,e1);}vec4 bone(float x_15){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.376;const vec4 v1=vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);const float e2=0.753;const vec4 v2=vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_15);float a1=smoothstep(e1,e2,x_15);float a2=smoothstep(e2,e3,x_15);return max(mix(v0,v1,a0)*step(e0,x_15)*step(x_15,e1),max(mix(v1,v2,a1)*step(e1,x_15)*step(x_15,e2),mix(v2,v3,a2)*step(e2,x_15)*step(x_15,e3)));}vec4 copper(float x_10){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.804;const vec4 v1=vec4(1,0.6274509803921569,0.4,1);const float e2=1.0;const vec4 v2=vec4(1,0.7803921568627451,0.4980392156862745,1);float a0=smoothstep(e0,e1,x_10);float a1=smoothstep(e1,e2,x_10);return max(mix(v0,v1,a0)*step(e0,x_10)*step(x_10,e1),mix(v1,v2,a1)*step(e1,x_10)*step(x_10,e2));}vec4 greys(float x_4){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_4);return mix(v0,v1,a0)*step(e0,x_4)*step(x_4,e1);}vec4 yignbu(float x_32){const float e0=0.0;const vec4 v0=vec4(0.03137254901960784,0.11372549019607843,0.34509803921568627,1);const float e1=0.125;const vec4 v1=vec4(0.1450980392156863,0.20392156862745098,0.5803921568627451,1);const float e2=0.25;const vec4 v2=vec4(0.13333333333333333,0.3686274509803922,0.6588235294117647,1);const float e3=0.375;const vec4 v3=vec4(0.11372549019607843,0.5686274509803921,0.7529411764705882,1);const float e4=0.5;const vec4 v4=vec4(0.2549019607843137,0.7137254901960784,0.7686274509803922,1);const float e5=0.625;const vec4 v5=vec4(0.4980392156862745,0.803921568627451,0.7333333333333333,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7058823529411765,1);const float e7=0.875;const vec4 v7=vec4(0.9294117647058824,0.9725490196078431,0.8509803921568627,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8509803921568627,1);float a0=smoothstep(e0,e1,x_32);float a1=smoothstep(e1,e2,x_32);float a2=smoothstep(e2,e3,x_32);float a3=smoothstep(e3,e4,x_32);float a4=smoothstep(e4,e5,x_32);float a5=smoothstep(e5,e6,x_32);float a6=smoothstep(e6,e7,x_32);float a7=smoothstep(e7,e8,x_32);return max(mix(v0,v1,a0)*step(e0,x_32)*step(x_32,e1),max(mix(v1,v2,a1)*step(e1,x_32)*step(x_32,e2),max(mix(v2,v3,a2)*step(e2,x_32)*step(x_32,e3),max(mix(v3,v4,a3)*step(e3,x_32)*step(x_32,e4),max(mix(v4,v5,a4)*step(e4,x_32)*step(x_32,e5),max(mix(v5,v6,a5)*step(e5,x_32)*step(x_32,e6),max(mix(v6,v7,a6)*step(e6,x_32)*step(x_32,e7),mix(v7,v8,a7)*step(e7,x_32)*step(x_32,e8))))))));}vec4 greens(float x_34){const float e0=0.0;const vec4 v0=vec4(0,0.26666666666666666,0.10588235294117647,1);const float e1=0.125;const vec4 v1=vec4(0,0.42745098039215684,0.17254901960784313,1);const float e2=0.25;const vec4 v2=vec4(0.13725490196078433,0.5450980392156862,0.27058823529411763,1);const float e3=0.375;const vec4 v3=vec4(0.2549019607843137,0.6705882352941176,0.36470588235294116,1);const float e4=0.5;const vec4 v4=vec4(0.4549019607843137,0.7686274509803922,0.4627450980392157,1);const float e5=0.625;const vec4 v5=vec4(0.6313725490196078,0.8509803921568627,0.6078431372549019,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7529411764705882,1);const float e7=0.875;const vec4 v7=vec4(0.8980392156862745,0.9607843137254902,0.8784313725490196,1);const float e8=1.0;const vec4 v8=vec4(0.9686274509803922,0.9882352941176471,0.9607843137254902,1);float a0=smoothstep(e0,e1,x_34);float a1=smoothstep(e1,e2,x_34);float a2=smoothstep(e2,e3,x_34);float a3=smoothstep(e3,e4,x_34);float a4=smoothstep(e4,e5,x_34);float a5=smoothstep(e5,e6,x_34);float a6=smoothstep(e6,e7,x_34);float a7=smoothstep(e7,e8,x_34);return max(mix(v0,v1,a0)*step(e0,x_34)*step(x_34,e1),max(mix(v1,v2,a1)*step(e1,x_34)*step(x_34,e2),max(mix(v2,v3,a2)*step(e2,x_34)*step(x_34,e3),max(mix(v3,v4,a3)*step(e3,x_34)*step(x_34,e4),max(mix(v4,v5,a4)*step(e4,x_34)*step(x_34,e5),max(mix(v5,v6,a5)*step(e5,x_34)*step(x_34,e6),max(mix(v6,v7,a6)*step(e6,x_34)*step(x_34,e7),mix(v7,v8,a7)*step(e7,x_34)*step(x_34,e8))))))));}vec4 yiorrd(float x_41){const float e0=0.0;const vec4 v0=vec4(0.5019607843137255,0,0.14901960784313725,1);const float e1=0.125;const vec4 v1=vec4(0.7411764705882353,0,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.8901960784313725,0.10196078431372549,0.10980392156862745,1);const float e3=0.375;const vec4 v3=vec4(0.9882352941176471,0.3058823529411765,0.16470588235294117,1);const float e4=0.5;const vec4 v4=vec4(0.9921568627450981,0.5529411764705883,0.23529411764705882,1);const float e5=0.625;const vec4 v5=vec4(0.996078431372549,0.6980392156862745,0.2980392156862745,1);const float e6=0.75;const vec4 v6=vec4(0.996078431372549,0.8509803921568627,0.4627450980392157,1);const float e7=0.875;const vec4 v7=vec4(1,0.9294117647058824,0.6274509803921569,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8,1);float a0=smoothstep(e0,e1,x_41);float a1=smoothstep(e1,e2,x_41);float a2=smoothstep(e2,e3,x_41);float a3=smoothstep(e3,e4,x_41);float a4=smoothstep(e4,e5,x_41);float a5=smoothstep(e5,e6,x_41);float a6=smoothstep(e6,e7,x_41);float a7=smoothstep(e7,e8,x_41);return max(mix(v0,v1,a0)*step(e0,x_41)*step(x_41,e1),max(mix(v1,v2,a1)*step(e1,x_41)*step(x_41,e2),max(mix(v2,v3,a2)*step(e2,x_41)*step(x_41,e3),max(mix(v3,v4,a3)*step(e3,x_41)*step(x_41,e4),max(mix(v4,v5,a4)*step(e4,x_41)*step(x_41,e5),max(mix(v5,v6,a5)*step(e5,x_41)*step(x_41,e6),max(mix(v6,v7,a6)*step(e6,x_41)*step(x_41,e7),mix(v7,v8,a7)*step(e7,x_41)*step(x_41,e8))))))));}vec4 bluered(float x_23){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_23);return mix(v0,v1,a0)*step(e0,x_23)*step(x_23,e1);}vec4 rdbu(float x_1){const float e0=0.0;const vec4 v0=vec4(0.0196078431372549,0.0392156862745098,0.6745098039215687,1);const float e1=0.35;const vec4 v1=vec4(0.41568627450980394,0.5372549019607843,0.9686274509803922,1);const float e2=0.5;const vec4 v2=vec4(0.7450980392156863,0.7450980392156863,0.7450980392156863,1);const float e3=0.6;const vec4 v3=vec4(0.8627450980392157,0.6666666666666666,0.5176470588235295,1);const float e4=0.7;const vec4 v4=vec4(0.9019607843137255,0.5686274509803921,0.35294117647058826,1);const float e5=1.0;const vec4 v5=vec4(0.6980392156862745,0.0392156862745098,0.10980392156862745,1);float a0=smoothstep(e0,e1,x_1);float a1=smoothstep(e1,e2,x_1);float a2=smoothstep(e2,e3,x_1);float a3=smoothstep(e3,e4,x_1);float a4=smoothstep(e4,e5,x_1);return max(mix(v0,v1,a0)*step(e0,x_1)*step(x_1,e1),max(mix(v1,v2,a1)*step(e1,x_1)*step(x_1,e2),max(mix(v2,v3,a2)*step(e2,x_1)*step(x_1,e3),max(mix(v3,v4,a3)*step(e3,x_1)*step(x_1,e4),mix(v4,v5,a4)*step(e4,x_1)*step(x_1,e5)))));}vec4 picnic(float x_42){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=0.1;const vec4 v1=vec4(0.2,0.6,1,1);const float e2=0.2;const vec4 v2=vec4(0.4,0.8,1,1);const float e3=0.3;const vec4 v3=vec4(0.6,0.8,1,1);const float e4=0.4;const vec4 v4=vec4(0.8,0.8,1,1);const float e5=0.5;const vec4 v5=vec4(1,1,1,1);const float e6=0.6;const vec4 v6=vec4(1,0.8,1,1);const float e7=0.7;const vec4 v7=vec4(1,0.6,1,1);const float e8=0.8;const vec4 v8=vec4(1,0.4,0.8,1);const float e9=0.9;const vec4 v9=vec4(1,0.4,0.4,1);const float e10=1.0;const vec4 v10=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_42);float a1=smoothstep(e1,e2,x_42);float a2=smoothstep(e2,e3,x_42);float a3=smoothstep(e3,e4,x_42);float a4=smoothstep(e4,e5,x_42);float a5=smoothstep(e5,e6,x_42);float a6=smoothstep(e6,e7,x_42);float a7=smoothstep(e7,e8,x_42);float a8=smoothstep(e8,e9,x_42);float a9=smoothstep(e9,e10,x_42);return max(mix(v0,v1,a0)*step(e0,x_42)*step(x_42,e1),max(mix(v1,v2,a1)*step(e1,x_42)*step(x_42,e2),max(mix(v2,v3,a2)*step(e2,x_42)*step(x_42,e3),max(mix(v3,v4,a3)*step(e3,x_42)*step(x_42,e4),max(mix(v4,v5,a4)*step(e4,x_42)*step(x_42,e5),max(mix(v5,v6,a5)*step(e5,x_42)*step(x_42,e6),max(mix(v6,v7,a6)*step(e6,x_42)*step(x_42,e7),max(mix(v7,v8,a7)*step(e7,x_42)*step(x_42,e8),max(mix(v8,v9,a8)*step(e8,x_42)*step(x_42,e9),mix(v9,v10,a9)*step(e9,x_42)*step(x_42,e10))))))))));}vec4 rainbow(float x_31){const float e0=0.0;const vec4 v0=vec4(0.5882352941176471,0,0.35294117647058826,1);const float e1=0.125;const vec4 v1=vec4(0,0,0.7843137254901961,1);const float e2=0.25;const vec4 v2=vec4(0,0.09803921568627451,1,1);const float e3=0.375;const vec4 v3=vec4(0,0.596078431372549,1,1);const float e4=0.5;const vec4 v4=vec4(0.17254901960784313,1,0.5882352941176471,1);const float e5=0.625;const vec4 v5=vec4(0.592156862745098,1,0,1);const float e6=0.75;const vec4 v6=vec4(1,0.9176470588235294,0,1);const float e7=0.875;const vec4 v7=vec4(1,0.43529411764705883,0,1);const float e8=1.0;const vec4 v8=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_31);float a1=smoothstep(e1,e2,x_31);float a2=smoothstep(e2,e3,x_31);float a3=smoothstep(e3,e4,x_31);float a4=smoothstep(e4,e5,x_31);float a5=smoothstep(e5,e6,x_31);float a6=smoothstep(e6,e7,x_31);float a7=smoothstep(e7,e8,x_31);return max(mix(v0,v1,a0)*step(e0,x_31)*step(x_31,e1),max(mix(v1,v2,a1)*step(e1,x_31)*step(x_31,e2),max(mix(v2,v3,a2)*step(e2,x_31)*step(x_31,e3),max(mix(v3,v4,a3)*step(e3,x_31)*step(x_31,e4),max(mix(v4,v5,a4)*step(e4,x_31)*step(x_31,e5),max(mix(v5,v6,a5)*step(e5,x_31)*step(x_31,e6),max(mix(v6,v7,a6)*step(e6,x_31)*step(x_31,e7),mix(v7,v8,a7)*step(e7,x_31)*step(x_31,e8))))))));}vec4 portland(float x_21){const float e0=0.0;const vec4 v0=vec4(0.047058823529411764,0.2,0.5137254901960784,1);const float e1=0.25;const vec4 v1=vec4(0.0392156862745098,0.5333333333333333,0.7294117647058823,1);const float e2=0.5;const vec4 v2=vec4(0.9490196078431372,0.8274509803921568,0.2196078431372549,1);const float e3=0.75;const vec4 v3=vec4(0.9490196078431372,0.5607843137254902,0.2196078431372549,1);const float e4=1.0;const vec4 v4=vec4(0.8509803921568627,0.11764705882352941,0.11764705882352941,1);float a0=smoothstep(e0,e1,x_21);float a1=smoothstep(e1,e2,x_21);float a2=smoothstep(e2,e3,x_21);float a3=smoothstep(e3,e4,x_21);return max(mix(v0,v1,a0)*step(e0,x_21)*step(x_21,e1),max(mix(v1,v2,a1)*step(e1,x_21)*step(x_21,e2),max(mix(v2,v3,a2)*step(e2,x_21)*step(x_21,e3),mix(v3,v4,a3)*step(e3,x_21)*step(x_21,e4))));}vec4 blackbody(float x_38){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.2;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.4;const vec4 v2=vec4(0.9019607843137255,0.8235294117647058,0,1);const float e3=0.7;const vec4 v3=vec4(1,1,1,1);const float e4=1.0;const vec4 v4=vec4(0.6274509803921569,0.7843137254901961,1,1);float a0=smoothstep(e0,e1,x_38);float a1=smoothstep(e1,e2,x_38);float a2=smoothstep(e2,e3,x_38);float a3=smoothstep(e3,e4,x_38);return max(mix(v0,v1,a0)*step(e0,x_38)*step(x_38,e1),max(mix(v1,v2,a1)*step(e1,x_38)*step(x_38,e2),max(mix(v2,v3,a2)*step(e2,x_38)*step(x_38,e3),mix(v3,v4,a3)*step(e3,x_38)*step(x_38,e4))));}vec4 earth(float x_29){const float e0=0.0;const vec4 v0=vec4(0,0,0.5098039215686274,1);const float e1=0.1;const vec4 v1=vec4(0,0.7058823529411765,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(0.1568627450980392,0.8235294117647058,0.1568627450980392,1);const float e3=0.4;const vec4 v3=vec4(0.9019607843137255,0.9019607843137255,0.19607843137254902,1);const float e4=0.6;const vec4 v4=vec4(0.47058823529411764,0.27450980392156865,0.0784313725490196,1);const float e5=1.0;const vec4 v5=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_29);float a1=smoothstep(e1,e2,x_29);float a2=smoothstep(e2,e3,x_29);float a3=smoothstep(e3,e4,x_29);float a4=smoothstep(e4,e5,x_29);return max(mix(v0,v1,a0)*step(e0,x_29)*step(x_29,e1),max(mix(v1,v2,a1)*step(e1,x_29)*step(x_29,e2),max(mix(v2,v3,a2)*step(e2,x_29)*step(x_29,e3),max(mix(v3,v4,a3)*step(e3,x_29)*step(x_29,e4),mix(v4,v5,a4)*step(e4,x_29)*step(x_29,e5)))));}vec4 electric(float x_9){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.15;const vec4 v1=vec4(0.11764705882352941,0,0.39215686274509803,1);const float e2=0.4;const vec4 v2=vec4(0.47058823529411764,0,0.39215686274509803,1);const float e3=0.6;const vec4 v3=vec4(0.6274509803921569,0.35294117647058826,0,1);const float e4=0.8;const vec4 v4=vec4(0.9019607843137255,0.7843137254901961,0,1);const float e5=1.0;const vec4 v5=vec4(1,0.9803921568627451,0.8627450980392157,1);float a0=smoothstep(e0,e1,x_9);float a1=smoothstep(e1,e2,x_9);float a2=smoothstep(e2,e3,x_9);float a3=smoothstep(e3,e4,x_9);float a4=smoothstep(e4,e5,x_9);return max(mix(v0,v1,a0)*step(e0,x_9)*step(x_9,e1),max(mix(v1,v2,a1)*step(e1,x_9)*step(x_9,e2),max(mix(v2,v3,a2)*step(e2,x_9)*step(x_9,e3),max(mix(v3,v4,a3)*step(e3,x_9)*step(x_9,e4),mix(v4,v5,a4)*step(e4,x_9)*step(x_9,e5)))));}vec4 alpha(float x_0){const float e0=0.0;const vec4 v0=vec4(1,1,1,0);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_0);return mix(v0,v1,a0)*step(e0,x_0)*step(x_0,e1);}vec4 viridis(float x_22){const float e0=0.0;const vec4 v0=vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);const float e1=0.13;const vec4 v1=vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);const float e4=0.5;const vec4 v4=vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);const float e5=0.63;const vec4 v5=vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);const float e6=0.75;const vec4 v6=vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);const float e7=0.88;const vec4 v7=vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);float a0=smoothstep(e0,e1,x_22);float a1=smoothstep(e1,e2,x_22);float a2=smoothstep(e2,e3,x_22);float a3=smoothstep(e3,e4,x_22);float a4=smoothstep(e4,e5,x_22);float a5=smoothstep(e5,e6,x_22);float a6=smoothstep(e6,e7,x_22);float a7=smoothstep(e7,e8,x_22);return max(mix(v0,v1,a0)*step(e0,x_22)*step(x_22,e1),max(mix(v1,v2,a1)*step(e1,x_22)*step(x_22,e2),max(mix(v2,v3,a2)*step(e2,x_22)*step(x_22,e3),max(mix(v3,v4,a3)*step(e3,x_22)*step(x_22,e4),max(mix(v4,v5,a4)*step(e4,x_22)*step(x_22,e5),max(mix(v5,v6,a5)*step(e5,x_22)*step(x_22,e6),max(mix(v6,v7,a6)*step(e6,x_22)*step(x_22,e7),mix(v7,v8,a7)*step(e7,x_22)*step(x_22,e8))))))));}vec4 inferno(float x_30){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);const float e3=0.38;const vec4 v3=vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);const float e4=0.5;const vec4 v4=vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);const float e5=0.63;const vec4 v5=vec4(0.8901960784313725,0.34901960784313724,0.2,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,1,0.6431372549019608,1);float a0=smoothstep(e0,e1,x_30);float a1=smoothstep(e1,e2,x_30);float a2=smoothstep(e2,e3,x_30);float a3=smoothstep(e3,e4,x_30);float a4=smoothstep(e4,e5,x_30);float a5=smoothstep(e5,e6,x_30);float a6=smoothstep(e6,e7,x_30);float a7=smoothstep(e7,e8,x_30);return max(mix(v0,v1,a0)*step(e0,x_30)*step(x_30,e1),max(mix(v1,v2,a1)*step(e1,x_30)*step(x_30,e2),max(mix(v2,v3,a2)*step(e2,x_30)*step(x_30,e3),max(mix(v3,v4,a3)*step(e3,x_30)*step(x_30,e4),max(mix(v4,v5,a4)*step(e4,x_30)*step(x_30,e5),max(mix(v5,v6,a5)*step(e5,x_30)*step(x_30,e6),max(mix(v6,v7,a6)*step(e6,x_30)*step(x_30,e7),mix(v7,v8,a7)*step(e7,x_30)*step(x_30,e8))))))));}vec4 magma(float x_33){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);const float e2=0.25;const vec4 v2=vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);const float e4=0.5;const vec4 v4=vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);const float e6=0.75;const vec4 v6=vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);float a0=smoothstep(e0,e1,x_33);float a1=smoothstep(e1,e2,x_33);float a2=smoothstep(e2,e3,x_33);float a3=smoothstep(e3,e4,x_33);float a4=smoothstep(e4,e5,x_33);float a5=smoothstep(e5,e6,x_33);float a6=smoothstep(e6,e7,x_33);float a7=smoothstep(e7,e8,x_33);return max(mix(v0,v1,a0)*step(e0,x_33)*step(x_33,e1),max(mix(v1,v2,a1)*step(e1,x_33)*step(x_33,e2),max(mix(v2,v3,a2)*step(e2,x_33)*step(x_33,e3),max(mix(v3,v4,a3)*step(e3,x_33)*step(x_33,e4),max(mix(v4,v5,a4)*step(e4,x_33)*step(x_33,e5),max(mix(v5,v6,a5)*step(e5,x_33)*step(x_33,e6),max(mix(v6,v7,a6)*step(e6,x_33)*step(x_33,e7),mix(v7,v8,a7)*step(e7,x_33)*step(x_33,e8))))))));}vec4 plasma(float x_3){const float e0=0.0;const vec4 v0=vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);const float e1=0.13;const vec4 v1=vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);const float e2=0.25;const vec4 v2=vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);const float e4=0.5;const vec4 v4=vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);const float e6=0.75;const vec4 v6=vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);const float e7=0.88;const vec4 v7=vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);float a0=smoothstep(e0,e1,x_3);float a1=smoothstep(e1,e2,x_3);float a2=smoothstep(e2,e3,x_3);float a3=smoothstep(e3,e4,x_3);float a4=smoothstep(e4,e5,x_3);float a5=smoothstep(e5,e6,x_3);float a6=smoothstep(e6,e7,x_3);float a7=smoothstep(e7,e8,x_3);return max(mix(v0,v1,a0)*step(e0,x_3)*step(x_3,e1),max(mix(v1,v2,a1)*step(e1,x_3)*step(x_3,e2),max(mix(v2,v3,a2)*step(e2,x_3)*step(x_3,e3),max(mix(v3,v4,a3)*step(e3,x_3)*step(x_3,e4),max(mix(v4,v5,a4)*step(e4,x_3)*step(x_3,e5),max(mix(v5,v6,a5)*step(e5,x_3)*step(x_3,e6),max(mix(v6,v7,a6)*step(e6,x_3)*step(x_3,e7),mix(v7,v8,a7)*step(e7,x_3)*step(x_3,e8))))))));}vec4 warm(float x_43){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.6745098039215687,0,0.7333333333333333,1);const float e2=0.25;const vec4 v2=vec4(0.8588235294117647,0,0.6666666666666666,1);const float e3=0.38;const vec4 v3=vec4(1,0,0.5098039215686274,1);const float e4=0.5;const vec4 v4=vec4(1,0.24705882352941178,0.2901960784313726,1);const float e5=0.63;const vec4 v5=vec4(1,0.4823529411764706,0,1);const float e6=0.75;const vec4 v6=vec4(0.9176470588235294,0.6901960784313725,0,1);const float e7=0.88;const vec4 v7=vec4(0.7450980392156863,0.8941176470588236,0,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_43);float a1=smoothstep(e1,e2,x_43);float a2=smoothstep(e2,e3,x_43);float a3=smoothstep(e3,e4,x_43);float a4=smoothstep(e4,e5,x_43);float a5=smoothstep(e5,e6,x_43);float a6=smoothstep(e6,e7,x_43);float a7=smoothstep(e7,e8,x_43);return max(mix(v0,v1,a0)*step(e0,x_43)*step(x_43,e1),max(mix(v1,v2,a1)*step(e1,x_43)*step(x_43,e2),max(mix(v2,v3,a2)*step(e2,x_43)*step(x_43,e3),max(mix(v3,v4,a3)*step(e3,x_43)*step(x_43,e4),max(mix(v4,v5,a4)*step(e4,x_43)*step(x_43,e5),max(mix(v5,v6,a5)*step(e5,x_43)*step(x_43,e6),max(mix(v6,v7,a6)*step(e6,x_43)*step(x_43,e7),mix(v7,v8,a7)*step(e7,x_43)*step(x_43,e8))))))));}vec4 rainbow_soft_1310269270(float x_14){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.1;const vec4 v1=vec4(0.7803921568627451,0,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(1,0,0.4745098039215686,1);const float e3=0.3;const vec4 v3=vec4(1,0.4235294117647059,0,1);const float e4=0.4;const vec4 v4=vec4(0.8705882352941177,0.7607843137254902,0,1);const float e5=0.5;const vec4 v5=vec4(0.5882352941176471,1,0,1);const float e6=0.6;const vec4 v6=vec4(0,1,0.21568627450980393,1);const float e7=0.7;const vec4 v7=vec4(0,0.9647058823529412,0.5882352941176471,1);const float e8=0.8;const vec4 v8=vec4(0.19607843137254902,0.6549019607843137,0.8705882352941177,1);const float e9=0.9;const vec4 v9=vec4(0.403921568627451,0.2,0.9215686274509803,1);const float e10=1.0;const vec4 v10=vec4(0.48627450980392156,0,0.7294117647058823,1);float a0=smoothstep(e0,e1,x_14);float a1=smoothstep(e1,e2,x_14);float a2=smoothstep(e2,e3,x_14);float a3=smoothstep(e3,e4,x_14);float a4=smoothstep(e4,e5,x_14);float a5=smoothstep(e5,e6,x_14);float a6=smoothstep(e6,e7,x_14);float a7=smoothstep(e7,e8,x_14);float a8=smoothstep(e8,e9,x_14);float a9=smoothstep(e9,e10,x_14);return max(mix(v0,v1,a0)*step(e0,x_14)*step(x_14,e1),max(mix(v1,v2,a1)*step(e1,x_14)*step(x_14,e2),max(mix(v2,v3,a2)*step(e2,x_14)*step(x_14,e3),max(mix(v3,v4,a3)*step(e3,x_14)*step(x_14,e4),max(mix(v4,v5,a4)*step(e4,x_14)*step(x_14,e5),max(mix(v5,v6,a5)*step(e5,x_14)*step(x_14,e6),max(mix(v6,v7,a6)*step(e6,x_14)*step(x_14,e7),max(mix(v7,v8,a7)*step(e7,x_14)*step(x_14,e8),max(mix(v8,v9,a8)*step(e8,x_14)*step(x_14,e9),mix(v9,v10,a9)*step(e9,x_14)*step(x_14,e10))))))))));}vec4 bathymetry(float x_36){const float e0=0.0;const vec4 v0=vec4(0.1568627450980392,0.10196078431372549,0.17254901960784313,1);const float e1=0.13;const vec4 v1=vec4(0.23137254901960785,0.19215686274509805,0.35294117647058826,1);const float e2=0.25;const vec4 v2=vec4(0.25098039215686274,0.2980392156862745,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.24705882352941178,0.43137254901960786,0.592156862745098,1);const float e4=0.5;const vec4 v4=vec4(0.2823529411764706,0.5568627450980392,0.6196078431372549,1);const float e5=0.63;const vec4 v5=vec4(0.3333333333333333,0.6823529411764706,0.6392156862745098,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.807843137254902,0.6392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.7333333333333333,0.9019607843137255,0.6745098039215687,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.996078431372549,0.8,1);float a0=smoothstep(e0,e1,x_36);float a1=smoothstep(e1,e2,x_36);float a2=smoothstep(e2,e3,x_36);float a3=smoothstep(e3,e4,x_36);float a4=smoothstep(e4,e5,x_36);float a5=smoothstep(e5,e6,x_36);float a6=smoothstep(e6,e7,x_36);float a7=smoothstep(e7,e8,x_36);return max(mix(v0,v1,a0)*step(e0,x_36)*step(x_36,e1),max(mix(v1,v2,a1)*step(e1,x_36)*step(x_36,e2),max(mix(v2,v3,a2)*step(e2,x_36)*step(x_36,e3),max(mix(v3,v4,a3)*step(e3,x_36)*step(x_36,e4),max(mix(v4,v5,a4)*step(e4,x_36)*step(x_36,e5),max(mix(v5,v6,a5)*step(e5,x_36)*step(x_36,e6),max(mix(v6,v7,a6)*step(e6,x_36)*step(x_36,e7),mix(v7,v8,a7)*step(e7,x_36)*step(x_36,e8))))))));}vec4 cdom(float x_7){const float e0=0.0;const vec4 v0=vec4(0.1843137254901961,0.058823529411764705,0.24313725490196078,1);const float e1=0.13;const vec4 v1=vec4(0.3411764705882353,0.09019607843137255,0.33725490196078434,1);const float e2=0.25;const vec4 v2=vec4(0.5098039215686274,0.10980392156862745,0.38823529411764707,1);const float e3=0.38;const vec4 v3=vec4(0.6705882352941176,0.1607843137254902,0.3764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.807843137254902,0.2627450980392157,0.33725490196078434,1);const float e5=0.63;const vec4 v5=vec4(0.9019607843137255,0.41568627450980394,0.32941176470588235,1);const float e6=0.75;const vec4 v6=vec4(0.9490196078431372,0.5843137254901961,0.403921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7568627450980392,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.9294117647058824,0.6901960784313725,1);float a0=smoothstep(e0,e1,x_7);float a1=smoothstep(e1,e2,x_7);float a2=smoothstep(e2,e3,x_7);float a3=smoothstep(e3,e4,x_7);float a4=smoothstep(e4,e5,x_7);float a5=smoothstep(e5,e6,x_7);float a6=smoothstep(e6,e7,x_7);float a7=smoothstep(e7,e8,x_7);return max(mix(v0,v1,a0)*step(e0,x_7)*step(x_7,e1),max(mix(v1,v2,a1)*step(e1,x_7)*step(x_7,e2),max(mix(v2,v3,a2)*step(e2,x_7)*step(x_7,e3),max(mix(v3,v4,a3)*step(e3,x_7)*step(x_7,e4),max(mix(v4,v5,a4)*step(e4,x_7)*step(x_7,e5),max(mix(v5,v6,a5)*step(e5,x_7)*step(x_7,e6),max(mix(v6,v7,a6)*step(e6,x_7)*step(x_7,e7),mix(v7,v8,a7)*step(e7,x_7)*step(x_7,e8))))))));}vec4 chlorophyll(float x_6){const float e0=0.0;const vec4 v0=vec4(0.07058823529411765,0.1411764705882353,0.0784313725490196,1);const float e1=0.13;const vec4 v1=vec4(0.09803921568627451,0.24705882352941178,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.09411764705882353,0.3568627450980392,0.23137254901960785,1);const float e3=0.38;const vec4 v3=vec4(0.050980392156862744,0.4666666666666667,0.2823529411764706,1);const float e4=0.5;const vec4 v4=vec4(0.07058823529411765,0.5803921568627451,0.3137254901960784,1);const float e5=0.63;const vec4 v5=vec4(0.3137254901960784,0.6784313725490196,0.34901960784313724,1);const float e6=0.75;const vec4 v6=vec4(0.5176470588235295,0.7686274509803922,0.47843137254901963,1);const float e7=0.88;const vec4 v7=vec4(0.6862745098039216,0.8666666666666667,0.6352941176470588,1);const float e8=1.0;const vec4 v8=vec4(0.8431372549019608,0.9764705882352941,0.8156862745098039,1);float a0=smoothstep(e0,e1,x_6);float a1=smoothstep(e1,e2,x_6);float a2=smoothstep(e2,e3,x_6);float a3=smoothstep(e3,e4,x_6);float a4=smoothstep(e4,e5,x_6);float a5=smoothstep(e5,e6,x_6);float a6=smoothstep(e6,e7,x_6);float a7=smoothstep(e7,e8,x_6);return max(mix(v0,v1,a0)*step(e0,x_6)*step(x_6,e1),max(mix(v1,v2,a1)*step(e1,x_6)*step(x_6,e2),max(mix(v2,v3,a2)*step(e2,x_6)*step(x_6,e3),max(mix(v3,v4,a3)*step(e3,x_6)*step(x_6,e4),max(mix(v4,v5,a4)*step(e4,x_6)*step(x_6,e5),max(mix(v5,v6,a5)*step(e5,x_6)*step(x_6,e6),max(mix(v6,v7,a6)*step(e6,x_6)*step(x_6,e7),mix(v7,v8,a7)*step(e7,x_6)*step(x_6,e8))))))));}vec4 density(float x_19){const float e0=0.0;const vec4 v0=vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);const float e2=0.25;const vec4 v2=vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);const float e3=0.38;const vec4 v3=vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);const float e4=0.5;const vec4 v4=vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);const float e5=0.63;const vec4 v5=vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);const float e6=0.75;const vec4 v6=vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);const float e7=0.88;const vec4 v7=vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);const float e8=1.0;const vec4 v8=vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);float a0=smoothstep(e0,e1,x_19);float a1=smoothstep(e1,e2,x_19);float a2=smoothstep(e2,e3,x_19);float a3=smoothstep(e3,e4,x_19);float a4=smoothstep(e4,e5,x_19);float a5=smoothstep(e5,e6,x_19);float a6=smoothstep(e6,e7,x_19);float a7=smoothstep(e7,e8,x_19);return max(mix(v0,v1,a0)*step(e0,x_19)*step(x_19,e1),max(mix(v1,v2,a1)*step(e1,x_19)*step(x_19,e2),max(mix(v2,v3,a2)*step(e2,x_19)*step(x_19,e3),max(mix(v3,v4,a3)*step(e3,x_19)*step(x_19,e4),max(mix(v4,v5,a4)*step(e4,x_19)*step(x_19,e5),max(mix(v5,v6,a5)*step(e5,x_19)*step(x_19,e6),max(mix(v6,v7,a6)*step(e6,x_19)*step(x_19,e7),mix(v7,v8,a7)*step(e7,x_19)*step(x_19,e8))))))));}vec4 freesurface_blue_3154355989(float x_35){const float e0=0.0;const vec4 v0=vec4(0.11764705882352941,0.01568627450980392,0.43137254901960786,1);const float e1=0.13;const vec4 v1=vec4(0.1843137254901961,0.054901960784313725,0.6901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.1607843137254902,0.17647058823529413,0.9254901960784314,1);const float e3=0.38;const vec4 v3=vec4(0.09803921568627451,0.38823529411764707,0.8313725490196079,1);const float e4=0.5;const vec4 v4=vec4(0.26666666666666666,0.5137254901960784,0.7843137254901961,1);const float e5=0.63;const vec4 v5=vec4(0.4470588235294118,0.611764705882353,0.7725490196078432,1);const float e6=0.75;const vec4 v6=vec4(0.615686274509804,0.7098039215686275,0.796078431372549,1);const float e7=0.88;const vec4 v7=vec4(0.7843137254901961,0.8156862745098039,0.8470588235294118,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_35);float a1=smoothstep(e1,e2,x_35);float a2=smoothstep(e2,e3,x_35);float a3=smoothstep(e3,e4,x_35);float a4=smoothstep(e4,e5,x_35);float a5=smoothstep(e5,e6,x_35);float a6=smoothstep(e6,e7,x_35);float a7=smoothstep(e7,e8,x_35);return max(mix(v0,v1,a0)*step(e0,x_35)*step(x_35,e1),max(mix(v1,v2,a1)*step(e1,x_35)*step(x_35,e2),max(mix(v2,v3,a2)*step(e2,x_35)*step(x_35,e3),max(mix(v3,v4,a3)*step(e3,x_35)*step(x_35,e4),max(mix(v4,v5,a4)*step(e4,x_35)*step(x_35,e5),max(mix(v5,v6,a5)*step(e5,x_35)*step(x_35,e6),max(mix(v6,v7,a6)*step(e6,x_35)*step(x_35,e7),mix(v7,v8,a7)*step(e7,x_35)*step(x_35,e8))))))));}vec4 freesurface_red_1679163293(float x_20){const float e0=0.0;const vec4 v0=vec4(0.23529411764705882,0.03529411764705882,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.39215686274509803,0.06666666666666667,0.10588235294117647,1);const float e2=0.25;const vec4 v2=vec4(0.5568627450980392,0.0784313725490196,0.11372549019607843,1);const float e3=0.38;const vec4 v3=vec4(0.6941176470588235,0.16862745098039217,0.10588235294117647,1);const float e4=0.5;const vec4 v4=vec4(0.7529411764705882,0.3411764705882353,0.24705882352941178,1);const float e5=0.63;const vec4 v5=vec4(0.803921568627451,0.49019607843137253,0.4117647058823529,1);const float e6=0.75;const vec4 v6=vec4(0.8470588235294118,0.6352941176470588,0.5803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.8901960784313725,0.7803921568627451,0.7568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_20);float a1=smoothstep(e1,e2,x_20);float a2=smoothstep(e2,e3,x_20);float a3=smoothstep(e3,e4,x_20);float a4=smoothstep(e4,e5,x_20);float a5=smoothstep(e5,e6,x_20);float a6=smoothstep(e6,e7,x_20);float a7=smoothstep(e7,e8,x_20);return max(mix(v0,v1,a0)*step(e0,x_20)*step(x_20,e1),max(mix(v1,v2,a1)*step(e1,x_20)*step(x_20,e2),max(mix(v2,v3,a2)*step(e2,x_20)*step(x_20,e3),max(mix(v3,v4,a3)*step(e3,x_20)*step(x_20,e4),max(mix(v4,v5,a4)*step(e4,x_20)*step(x_20,e5),max(mix(v5,v6,a5)*step(e5,x_20)*step(x_20,e6),max(mix(v6,v7,a6)*step(e6,x_20)*step(x_20,e7),mix(v7,v8,a7)*step(e7,x_20)*step(x_20,e8))))))));}vec4 oxygen(float x_11){const float e0=0.0;const vec4 v0=vec4(0.25098039215686274,0.0196078431372549,0.0196078431372549,1);const float e1=0.13;const vec4 v1=vec4(0.41568627450980394,0.023529411764705882,0.058823529411764705,1);const float e2=0.25;const vec4 v2=vec4(0.5647058823529412,0.10196078431372549,0.027450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.25098039215686274,0.011764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.7372549019607844,0.39215686274509803,0.01568627450980392,1);const float e5=0.63;const vec4 v5=vec4(0.807843137254902,0.5333333333333333,0.043137254901960784,1);const float e6=0.75;const vec4 v6=vec4(0.8627450980392157,0.6823529411764706,0.09803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9058823529411765,0.8431372549019608,0.17254901960784313,1);const float e8=1.0;const vec4 v8=vec4(0.9725490196078431,0.996078431372549,0.4117647058823529,1);float a0=smoothstep(e0,e1,x_11);float a1=smoothstep(e1,e2,x_11);float a2=smoothstep(e2,e3,x_11);float a3=smoothstep(e3,e4,x_11);float a4=smoothstep(e4,e5,x_11);float a5=smoothstep(e5,e6,x_11);float a6=smoothstep(e6,e7,x_11);float a7=smoothstep(e7,e8,x_11);return max(mix(v0,v1,a0)*step(e0,x_11)*step(x_11,e1),max(mix(v1,v2,a1)*step(e1,x_11)*step(x_11,e2),max(mix(v2,v3,a2)*step(e2,x_11)*step(x_11,e3),max(mix(v3,v4,a3)*step(e3,x_11)*step(x_11,e4),max(mix(v4,v5,a4)*step(e4,x_11)*step(x_11,e5),max(mix(v5,v6,a5)*step(e5,x_11)*step(x_11,e6),max(mix(v6,v7,a6)*step(e6,x_11)*step(x_11,e7),mix(v7,v8,a7)*step(e7,x_11)*step(x_11,e8))))))));}vec4 par(float x_28){const float e0=0.0;const vec4 v0=vec4(0.2,0.0784313725490196,0.09411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.35294117647058826,0.12549019607843137,0.13725490196078433,1);const float e2=0.25;const vec4 v2=vec4(0.5058823529411764,0.17254901960784313,0.13333333333333333,1);const float e3=0.38;const vec4 v3=vec4(0.6235294117647059,0.26666666666666666,0.09803921568627451,1);const float e4=0.5;const vec4 v4=vec4(0.7137254901960784,0.38823529411764707,0.07450980392156863,1);const float e5=0.63;const vec4 v5=vec4(0.7803921568627451,0.5254901960784314,0.08627450980392157,1);const float e6=0.75;const vec4 v6=vec4(0.8313725490196079,0.6705882352941176,0.13725490196078433,1);const float e7=0.88;const vec4 v7=vec4(0.8666666666666667,0.8235294117647058,0.21176470588235294,1);const float e8=1.0;const vec4 v8=vec4(0.8823529411764706,0.9921568627450981,0.29411764705882354,1);float a0=smoothstep(e0,e1,x_28);float a1=smoothstep(e1,e2,x_28);float a2=smoothstep(e2,e3,x_28);float a3=smoothstep(e3,e4,x_28);float a4=smoothstep(e4,e5,x_28);float a5=smoothstep(e5,e6,x_28);float a6=smoothstep(e6,e7,x_28);float a7=smoothstep(e7,e8,x_28);return max(mix(v0,v1,a0)*step(e0,x_28)*step(x_28,e1),max(mix(v1,v2,a1)*step(e1,x_28)*step(x_28,e2),max(mix(v2,v3,a2)*step(e2,x_28)*step(x_28,e3),max(mix(v3,v4,a3)*step(e3,x_28)*step(x_28,e4),max(mix(v4,v5,a4)*step(e4,x_28)*step(x_28,e5),max(mix(v5,v6,a5)*step(e5,x_28)*step(x_28,e6),max(mix(v6,v7,a6)*step(e6,x_28)*step(x_28,e7),mix(v7,v8,a7)*step(e7,x_28)*step(x_28,e8))))))));}vec4 phase(float x_39){const float e0=0.0;const vec4 v0=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.7215686274509804,0.2784313725490196,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.7294117647058823,0.22745098039215686,0.45098039215686275,1);const float e3=0.38;const vec4 v3=vec4(0.6274509803921569,0.2784313725490196,0.7254901960784313,1);const float e4=0.5;const vec4 v4=vec4(0.43137254901960786,0.3803921568627451,0.8549019607843137,1);const float e5=0.63;const vec4 v5=vec4(0.19607843137254902,0.4823529411764706,0.6431372549019608,1);const float e6=0.75;const vec4 v6=vec4(0.12156862745098039,0.5137254901960784,0.43137254901960786,1);const float e7=0.88;const vec4 v7=vec4(0.30196078431372547,0.5058823529411764,0.13333333333333333,1);const float e8=1.0;const vec4 v8=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);float a0=smoothstep(e0,e1,x_39);float a1=smoothstep(e1,e2,x_39);float a2=smoothstep(e2,e3,x_39);float a3=smoothstep(e3,e4,x_39);float a4=smoothstep(e4,e5,x_39);float a5=smoothstep(e5,e6,x_39);float a6=smoothstep(e6,e7,x_39);float a7=smoothstep(e7,e8,x_39);return max(mix(v0,v1,a0)*step(e0,x_39)*step(x_39,e1),max(mix(v1,v2,a1)*step(e1,x_39)*step(x_39,e2),max(mix(v2,v3,a2)*step(e2,x_39)*step(x_39,e3),max(mix(v3,v4,a3)*step(e3,x_39)*step(x_39,e4),max(mix(v4,v5,a4)*step(e4,x_39)*step(x_39,e5),max(mix(v5,v6,a5)*step(e5,x_39)*step(x_39,e6),max(mix(v6,v7,a6)*step(e6,x_39)*step(x_39,e7),mix(v7,v8,a7)*step(e7,x_39)*step(x_39,e8))))))));}vec4 salinity(float x_26){const float e0=0.0;const vec4 v0=vec4(0.16470588235294117,0.09411764705882353,0.4235294117647059,1);const float e1=0.13;const vec4 v1=vec4(0.12941176470588237,0.19607843137254902,0.6352941176470588,1);const float e2=0.25;const vec4 v2=vec4(0.058823529411764705,0.35294117647058826,0.5686274509803921,1);const float e3=0.38;const vec4 v3=vec4(0.1568627450980392,0.4627450980392157,0.5372549019607843,1);const float e4=0.5;const vec4 v4=vec4(0.23137254901960785,0.5725490196078431,0.5294117647058824,1);const float e5=0.63;const vec4 v5=vec4(0.30980392156862746,0.6862745098039216,0.49411764705882355,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.796078431372549,0.40784313725490196,1);const float e7=0.88;const vec4 v7=vec4(0.7568627450980392,0.8666666666666667,0.39215686274509803,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9372549019607843,0.6039215686274509,1);float a0=smoothstep(e0,e1,x_26);float a1=smoothstep(e1,e2,x_26);float a2=smoothstep(e2,e3,x_26);float a3=smoothstep(e3,e4,x_26);float a4=smoothstep(e4,e5,x_26);float a5=smoothstep(e5,e6,x_26);float a6=smoothstep(e6,e7,x_26);float a7=smoothstep(e7,e8,x_26);return max(mix(v0,v1,a0)*step(e0,x_26)*step(x_26,e1),max(mix(v1,v2,a1)*step(e1,x_26)*step(x_26,e2),max(mix(v2,v3,a2)*step(e2,x_26)*step(x_26,e3),max(mix(v3,v4,a3)*step(e3,x_26)*step(x_26,e4),max(mix(v4,v5,a4)*step(e4,x_26)*step(x_26,e5),max(mix(v5,v6,a5)*step(e5,x_26)*step(x_26,e6),max(mix(v6,v7,a6)*step(e6,x_26)*step(x_26,e7),mix(v7,v8,a7)*step(e7,x_26)*step(x_26,e8))))))));}vec4 temperature(float x_8){const float e0=0.0;const vec4 v0=vec4(0.01568627450980392,0.13725490196078433,0.2,1);const float e1=0.13;const vec4 v1=vec4(0.09019607843137255,0.2,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.23137254901960785,0.615686274509804,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.30980392156862746,0.5607843137254902,1);const float e4=0.5;const vec4 v4=vec4(0.6862745098039216,0.37254901960784315,0.5098039215686274,1);const float e5=0.63;const vec4 v5=vec4(0.8705882352941177,0.4392156862745098,0.396078431372549,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5725490196078431,0.25882352941176473,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7686274509803922,0.2549019607843137,1);const float e8=1.0;const vec4 v8=vec4(0.9098039215686274,0.9803921568627451,0.3568627450980392,1);float a0=smoothstep(e0,e1,x_8);float a1=smoothstep(e1,e2,x_8);float a2=smoothstep(e2,e3,x_8);float a3=smoothstep(e3,e4,x_8);float a4=smoothstep(e4,e5,x_8);float a5=smoothstep(e5,e6,x_8);float a6=smoothstep(e6,e7,x_8);float a7=smoothstep(e7,e8,x_8);return max(mix(v0,v1,a0)*step(e0,x_8)*step(x_8,e1),max(mix(v1,v2,a1)*step(e1,x_8)*step(x_8,e2),max(mix(v2,v3,a2)*step(e2,x_8)*step(x_8,e3),max(mix(v3,v4,a3)*step(e3,x_8)*step(x_8,e4),max(mix(v4,v5,a4)*step(e4,x_8)*step(x_8,e5),max(mix(v5,v6,a5)*step(e5,x_8)*step(x_8,e6),max(mix(v6,v7,a6)*step(e6,x_8)*step(x_8,e7),mix(v7,v8,a7)*step(e7,x_8)*step(x_8,e8))))))));}vec4 turbidity(float x_40){const float e0=0.0;const vec4 v0=vec4(0.13333333333333333,0.12156862745098039,0.10588235294117647,1);const float e1=0.13;const vec4 v1=vec4(0.2549019607843137,0.19607843137254902,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.27058823529411763,0.20392156862745098,1);const float e3=0.38;const vec4 v3=vec4(0.5137254901960784,0.34901960784313724,0.2235294117647059,1);const float e4=0.5;const vec4 v4=vec4(0.6313725490196078,0.4392156862745098,0.23137254901960785,1);const float e5=0.63;const vec4 v5=vec4(0.7254901960784313,0.5490196078431373,0.25882352941176473,1);const float e6=0.75;const vec4 v6=vec4(0.792156862745098,0.6823529411764706,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.8470588235294118,0.8196078431372549,0.49411764705882355,1);const float e8=1.0;const vec4 v8=vec4(0.9137254901960784,0.9647058823529412,0.6705882352941176,1);float a0=smoothstep(e0,e1,x_40);float a1=smoothstep(e1,e2,x_40);float a2=smoothstep(e2,e3,x_40);float a3=smoothstep(e3,e4,x_40);float a4=smoothstep(e4,e5,x_40);float a5=smoothstep(e5,e6,x_40);float a6=smoothstep(e6,e7,x_40);float a7=smoothstep(e7,e8,x_40);return max(mix(v0,v1,a0)*step(e0,x_40)*step(x_40,e1),max(mix(v1,v2,a1)*step(e1,x_40)*step(x_40,e2),max(mix(v2,v3,a2)*step(e2,x_40)*step(x_40,e3),max(mix(v3,v4,a3)*step(e3,x_40)*step(x_40,e4),max(mix(v4,v5,a4)*step(e4,x_40)*step(x_40,e5),max(mix(v5,v6,a5)*step(e5,x_40)*step(x_40,e6),max(mix(v6,v7,a6)*step(e6,x_40)*step(x_40,e7),mix(v7,v8,a7)*step(e7,x_40)*step(x_40,e8))))))));}vec4 velocity_blue_297387650(float x_2){const float e0=0.0;const vec4 v0=vec4(0.06666666666666667,0.12549019607843137,0.25098039215686274,1);const float e1=0.13;const vec4 v1=vec4(0.13725490196078433,0.20392156862745098,0.4549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.11372549019607843,0.3176470588235294,0.611764705882353,1);const float e3=0.38;const vec4 v3=vec4(0.12156862745098039,0.44313725490196076,0.6352941176470588,1);const float e4=0.5;const vec4 v4=vec4(0.19607843137254902,0.5647058823529412,0.6627450980392157,1);const float e5=0.63;const vec4 v5=vec4(0.3411764705882353,0.6784313725490196,0.6901960784313725,1);const float e6=0.75;const vec4 v6=vec4(0.5843137254901961,0.7686274509803922,0.7411764705882353,1);const float e7=0.88;const vec4 v7=vec4(0.796078431372549,0.8666666666666667,0.8274509803921568,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.984313725490196,0.9019607843137255,1);float a0=smoothstep(e0,e1,x_2);float a1=smoothstep(e1,e2,x_2);float a2=smoothstep(e2,e3,x_2);float a3=smoothstep(e3,e4,x_2);float a4=smoothstep(e4,e5,x_2);float a5=smoothstep(e5,e6,x_2);float a6=smoothstep(e6,e7,x_2);float a7=smoothstep(e7,e8,x_2);return max(mix(v0,v1,a0)*step(e0,x_2)*step(x_2,e1),max(mix(v1,v2,a1)*step(e1,x_2)*step(x_2,e2),max(mix(v2,v3,a2)*step(e2,x_2)*step(x_2,e3),max(mix(v3,v4,a3)*step(e3,x_2)*step(x_2,e4),max(mix(v4,v5,a4)*step(e4,x_2)*step(x_2,e5),max(mix(v5,v6,a5)*step(e5,x_2)*step(x_2,e6),max(mix(v6,v7,a6)*step(e6,x_2)*step(x_2,e7),mix(v7,v8,a7)*step(e7,x_2)*step(x_2,e8))))))));}vec4 velocity_green_2558432129(float x_27){const float e0=0.0;const vec4 v0=vec4(0.09019607843137255,0.13725490196078433,0.07450980392156863,1);const float e1=0.13;const vec4 v1=vec4(0.09411764705882353,0.25098039215686274,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.043137254901960784,0.37254901960784315,0.17647058823529413,1);const float e3=0.38;const vec4 v3=vec4(0.15294117647058825,0.4823529411764706,0.13725490196078433,1);const float e4=0.5;const vec4 v4=vec4(0.37254901960784315,0.5725490196078431,0.047058823529411764,1);const float e5=0.63;const vec4 v5=vec4(0.596078431372549,0.6470588235294118,0.07058823529411765,1);const float e6=0.75;const vec4 v6=vec4(0.788235294117647,0.7294117647058823,0.27058823529411763,1);const float e7=0.88;const vec4 v7=vec4(0.9137254901960784,0.8470588235294118,0.5372549019607843,1);const float e8=1.0;const vec4 v8=vec4(1,0.9921568627450981,0.803921568627451,1);float a0=smoothstep(e0,e1,x_27);float a1=smoothstep(e1,e2,x_27);float a2=smoothstep(e2,e3,x_27);float a3=smoothstep(e3,e4,x_27);float a4=smoothstep(e4,e5,x_27);float a5=smoothstep(e5,e6,x_27);float a6=smoothstep(e6,e7,x_27);float a7=smoothstep(e7,e8,x_27);return max(mix(v0,v1,a0)*step(e0,x_27)*step(x_27,e1),max(mix(v1,v2,a1)*step(e1,x_27)*step(x_27,e2),max(mix(v2,v3,a2)*step(e2,x_27)*step(x_27,e3),max(mix(v3,v4,a3)*step(e3,x_27)*step(x_27,e4),max(mix(v4,v5,a4)*step(e4,x_27)*step(x_27,e5),max(mix(v5,v6,a5)*step(e5,x_27)*step(x_27,e6),max(mix(v6,v7,a6)*step(e6,x_27)*step(x_27,e7),mix(v7,v8,a7)*step(e7,x_27)*step(x_27,e8))))))));}vec4 cubehelix(float x_37){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.07;const vec4 v1=vec4(0.08627450980392157,0.0196078431372549,0.23137254901960785,1);const float e2=0.13;const vec4 v2=vec4(0.23529411764705882,0.01568627450980392,0.4117647058823529,1);const float e3=0.2;const vec4 v3=vec4(0.42745098039215684,0.00392156862745098,0.5294117647058824,1);const float e4=0.27;const vec4 v4=vec4(0.6313725490196078,0,0.5764705882352941,1);const float e5=0.33;const vec4 v5=vec4(0.8235294117647058,0.00784313725490196,0.5568627450980392,1);const float e6=0.4;const vec4 v6=vec4(0.984313725490196,0.043137254901960784,0.4823529411764706,1);const float e7=0.47;const vec4 v7=vec4(1,0.11372549019607843,0.3803921568627451,1);const float e8=0.53;const vec4 v8=vec4(1,0.21176470588235294,0.27058823529411763,1);const float e9=0.6;const vec4 v9=vec4(1,0.3333333333333333,0.1803921568627451,1);const float e10=0.67;const vec4 v10=vec4(1,0.47058823529411764,0.13333333333333333,1);const float e11=0.73;const vec4 v11=vec4(1,0.615686274509804,0.1450980392156863,1);const float e12=0.8;const vec4 v12=vec4(0.9450980392156862,0.7490196078431373,0.2235294117647059,1);const float e13=0.87;const vec4 v13=vec4(0.8784313725490196,0.8627450980392157,0.36470588235294116,1);const float e14=0.93;const vec4 v14=vec4(0.8549019607843137,0.9450980392156862,0.5568627450980392,1);const float e15=1.0;const vec4 v15=vec4(0.8901960784313725,0.9921568627450981,0.7764705882352941,1);float a0=smoothstep(e0,e1,x_37);float a1=smoothstep(e1,e2,x_37);float a2=smoothstep(e2,e3,x_37);float a3=smoothstep(e3,e4,x_37);float a4=smoothstep(e4,e5,x_37);float a5=smoothstep(e5,e6,x_37);float a6=smoothstep(e6,e7,x_37);float a7=smoothstep(e7,e8,x_37);float a8=smoothstep(e8,e9,x_37);float a9=smoothstep(e9,e10,x_37);float a10=smoothstep(e10,e11,x_37);float a11=smoothstep(e11,e12,x_37);float a12=smoothstep(e12,e13,x_37);float a13=smoothstep(e13,e14,x_37);float a14=smoothstep(e14,e15,x_37);return max(mix(v0,v1,a0)*step(e0,x_37)*step(x_37,e1),max(mix(v1,v2,a1)*step(e1,x_37)*step(x_37,e2),max(mix(v2,v3,a2)*step(e2,x_37)*step(x_37,e3),max(mix(v3,v4,a3)*step(e3,x_37)*step(x_37,e4),max(mix(v4,v5,a4)*step(e4,x_37)*step(x_37,e5),max(mix(v5,v6,a5)*step(e5,x_37)*step(x_37,e6),max(mix(v6,v7,a6)*step(e6,x_37)*step(x_37,e7),max(mix(v7,v8,a7)*step(e7,x_37)*step(x_37,e8),max(mix(v8,v9,a8)*step(e8,x_37)*step(x_37,e9),max(mix(v9,v10,a9)*step(e9,x_37)*step(x_37,e10),max(mix(v10,v11,a10)*step(e10,x_37)*step(x_37,e11),max(mix(v11,v12,a11)*step(e11,x_37)*step(x_37,e12),max(mix(v12,v13,a12)*step(e12,x_37)*step(x_37,e13),max(mix(v13,v14,a13)*step(e13,x_37)*step(x_37,e14),mix(v14,v15,a14)*step(e14,x_37)*step(x_37,e15)))))))))))))));}vec4 apply_transparent_color_452471729(vec3 color,vec3 transparentColor,bool useTransparentColor,float opacity){return vec4(color,(color==transparentColor&&useTransparentColor)? 0. : opacity);}uniform float opacity;uniform bool useTransparentColor;vec4 colormap(float intensity){return vec4(apply_transparent_color_452471729(COLORMAP_FUNCTION(min(1.,intensity)).xyz,COLORMAP_FUNCTION(0.).xyz,useTransparentColor,opacity));}";// eslint-disable-line
var additiveColormap$1={name:'additive-colormap',fs:fs$3,inject:{'fs:DECKGL_MUTATE_COLOR':"\n  float intensityCombo = 0.;\n  intensityCombo += max(0.,intensity0);\n  intensityCombo += max(0.,intensity1);\n  intensityCombo += max(0.,intensity2);\n  intensityCombo += max(0.,intensity3);\n  intensityCombo += max(0.,intensity4);\n  intensityCombo += max(0.,intensity5);\n  rgba = colormap(intensityCombo);\n"}};var defaultProps$8={colormap:{type:'string',value:'viridis',compare:true},opacity:{type:'number',value:1.0,compare:true},useTransparentColor:{type:'boolean',value:false,compare:true}};/**
 * This deck.gl extension allows for an additive colormap like viridis or jet to be used for pseudo-coloring channels.
 * @typedef LayerProps
 * @type {object}
 * @property {number=} opacity Opacity of the layer.
 * @property {string=} colormap String indicating a colormap (default: 'viridis').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
 * @property {boolean=} useTransparentColor Indicates whether the shader should make the output of colormap_function(0) color transparent
 * */var AdditiveColormapExtension=/*#__PURE__*/function(_LayerExtension3){(0,_inherits2["default"])(AdditiveColormapExtension,_LayerExtension3);var _super7=_createSuper(AdditiveColormapExtension);function AdditiveColormapExtension(){(0,_classCallCheck2["default"])(this,AdditiveColormapExtension);return _super7.apply(this,arguments);}(0,_createClass2["default"])(AdditiveColormapExtension,[{key:"getShaders",value:function getShaders(){var _this$props7;return{defines:{COLORMAP_FUNCTION:(this===null||this===void 0?void 0:(_this$props7=this.props)===null||_this$props7===void 0?void 0:_this$props7.colormap)||defaultProps$8.colormap.value},modules:[additiveColormap$1]};}},{key:"updateState",value:function updateState(_ref6){var props=_ref6.props,oldProps=_ref6.oldProps,changeFlags=_ref6.changeFlags,rest=(0,_objectWithoutProperties2["default"])(_ref6,_excluded2);(0,_get2["default"])((0,_getPrototypeOf2["default"])(AdditiveColormapExtension.prototype),"updateState",this).call(this,_objectSpread({props:props,oldProps:oldProps,changeFlags:changeFlags},rest));if(props.colormap!==oldProps.colormap){var gl=this.context.gl;if(this.state.model){this.state.model["delete"]();this.setState({model:this._getModel(gl)});}}}},{key:"draw",value:function draw(){var _this$state$model3;var _this$props8=this.props,_this$props8$useTrans=_this$props8.useTransparentColor,useTransparentColor=_this$props8$useTrans===void 0?defaultProps$8.useTransparentColor.value:_this$props8$useTrans,_this$props8$opacity=_this$props8.opacity,opacity=_this$props8$opacity===void 0?defaultProps$8.opacity.value:_this$props8$opacity;var uniforms={opacity:opacity,useTransparentColor:useTransparentColor};// eslint-disable-next-line no-unused-expressions
(_this$state$model3=this.state.model)===null||_this$state$model3===void 0?void 0:_this$state$model3.setUniforms(uniforms);}}]);return AdditiveColormapExtension;}(_core.LayerExtension);exports.AdditiveColormapExtension=AdditiveColormapExtension;AdditiveColormapExtension.extensionName='AdditiveColormapExtension';AdditiveColormapExtension.defaultProps=defaultProps$8;var defaultProps$7={colors:{type:'array',value:null,compare:true}};/**
 * This deck.gl extension allows for a color palette to be used for rendering in 3D.
 * @typedef LayerProps
 * @type {object}
 * @property {Array<Array<number>>=} colors Array of colors to map channels to (RGB).
 * */var BaseExtension$1=/*#__PURE__*/function(_LayerExtension4){(0,_inherits2["default"])(BaseExtension$1,_LayerExtension4);var _super8=_createSuper(BaseExtension$1);function BaseExtension$1(){(0,_classCallCheck2["default"])(this,BaseExtension$1);return _super8.apply(this,arguments);}(0,_createClass2["default"])(BaseExtension$1,[{key:"draw",value:function draw(){var _this$state$model4;var _this$props9=this.props,colors=_this$props9.colors,channelsVisible=_this$props9.channelsVisible;var paddedColors=padColors({channelsVisible:channelsVisible||this.selections.map(function(){return true;}),colors:colors||getDefaultPalette(this.props.selections.length)});var uniforms={colors:paddedColors};// eslint-disable-next-line no-unused-expressions
(_this$state$model4=this.state.model)===null||_this$state$model4===void 0?void 0:_this$state$model4.setUniforms(uniforms);}}]);return BaseExtension$1;}(_core.LayerExtension);BaseExtension$1.extensionName='BaseExtension';BaseExtension$1.defaultProps=defaultProps$7;var RENDERING_MODES_BLEND=(_RENDERING_MODES_BLEN={},(0,_defineProperty2["default"])(_RENDERING_MODES_BLEN,RENDERING_MODES.MAX_INTENSITY_PROJECTION,{_BEFORE_RENDER:"      float maxVals[6] = float[6](-1.0, -1.0, -1.0, -1.0, -1.0, -1.0);\n    ",_RENDER:"    \n      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);\n\n      for(int i = 0; i < 6; i++) {\n        if(intensityArray[i] > maxVals[i]) {\n          maxVals[i] = intensityArray[i];\n        }\n      }\n    ",_AFTER_RENDER:"      vec3 rgbCombo = vec3(0.0);\n      for(int i = 0; i < 6; i++) {\n        rgbCombo += max(0.0, min(1.0, maxVals[i])) * vec3(colors[i]);\n      }\n      color = vec4(rgbCombo, 1.0);\n    "}),(0,_defineProperty2["default"])(_RENDERING_MODES_BLEN,RENDERING_MODES.MIN_INTENSITY_PROJECTION,{_BEFORE_RENDER:"      float minVals[6] = float[6](1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0.);\n    ",_RENDER:"    \n      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);\n\n      for(int i = 0; i < 6; i++) {\n        if(intensityArray[i] < minVals[i]) {\n          minVals[i] = intensityArray[i];\n        }\n      }\n    ",_AFTER_RENDER:"      vec3 rgbCombo = vec3(0.0);\n      for(int i = 0; i < 6; i++) {\n        rgbCombo += max(0.0, min(1.0, minVals[i])) * vec3(colors[i]);\n      }\n      color = vec4(rgbCombo, 1.0);\n    "}),(0,_defineProperty2["default"])(_RENDERING_MODES_BLEN,RENDERING_MODES.ADDITIVE,{_BEFORE_RENDER:"",_RENDER:"      vec3 rgbCombo = vec3(0.0);\n      vec3 hsvCombo = vec3(0.0);\n      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);\n      float total = 0.0;\n      for(int i = 0; i < 6; i++) {\n        float intensityValue = intensityArray[i];\n        rgbCombo += max(0.0, min(1.0, intensityValue)) * colors[i];\n        total += intensityValue;\n      }\n      // Do not go past 1 in opacity.\n      total = min(total, 1.0);\n      vec4 val_color = vec4(rgbCombo, total);\n      // Opacity correction\n      val_color.a = 1.0 - pow(1.0 - val_color.a, 1.0);\n      color.rgb += (1.0 - color.a) * val_color.a * val_color.rgb;\n      color.a += (1.0 - color.a) * val_color.a;\n      if (color.a >= 0.95) {\n        break;\n      }\n    ",_AFTER_RENDER:""}),_RENDERING_MODES_BLEN);/**
 * This deck.gl extension allows for a color palette to be used for rendering in 3D with additive blending.
 * */var AdditiveBlendExtension$1=/*#__PURE__*/function(_BaseExtension$){(0,_inherits2["default"])(AdditiveBlendExtension$1,_BaseExtension$);var _super9=_createSuper(AdditiveBlendExtension$1);function AdditiveBlendExtension$1(args){var _this3;(0,_classCallCheck2["default"])(this,AdditiveBlendExtension$1);_this3=_super9.call(this,args);_this3.opts.rendering=RENDERING_MODES_BLEND[RENDERING_MODES.ADDITIVE];return _this3;}return(0,_createClass2["default"])(AdditiveBlendExtension$1);}(BaseExtension$1);AdditiveBlendExtension$1.extensionName='AdditiveBlendExtension';/**
 * This deck.gl extension allows for a color palette to be used for rendering in 3D with Maximum Intensity Projection.
 * */var MaximumIntensityProjectionExtension$1=/*#__PURE__*/function(_BaseExtension$2){(0,_inherits2["default"])(MaximumIntensityProjectionExtension$1,_BaseExtension$2);var _super10=_createSuper(MaximumIntensityProjectionExtension$1);function MaximumIntensityProjectionExtension$1(args){var _this4;(0,_classCallCheck2["default"])(this,MaximumIntensityProjectionExtension$1);_this4=_super10.call(this,args);_this4.opts.rendering=RENDERING_MODES_BLEND[RENDERING_MODES.MAX_INTENSITY_PROJECTION];return _this4;}return(0,_createClass2["default"])(MaximumIntensityProjectionExtension$1);}(BaseExtension$1);MaximumIntensityProjectionExtension$1.extensionName='MaximumIntensityProjectionExtension';/**
 * This deck.gl extension allows for a color palette to be used for rendering in 3D with Minimum Intensity Projection.
 * */var MinimumIntensityProjectionExtension$1=/*#__PURE__*/function(_BaseExtension$3){(0,_inherits2["default"])(MinimumIntensityProjectionExtension$1,_BaseExtension$3);var _super11=_createSuper(MinimumIntensityProjectionExtension$1);function MinimumIntensityProjectionExtension$1(args){var _this5;(0,_classCallCheck2["default"])(this,MinimumIntensityProjectionExtension$1);_this5=_super11.call(this,args);_this5.opts.rendering=RENDERING_MODES_BLEND[RENDERING_MODES.MIN_INTENSITY_PROJECTION];return _this5;}return(0,_createClass2["default"])(MinimumIntensityProjectionExtension$1);}(BaseExtension$1);MinimumIntensityProjectionExtension$1.extensionName='MinimumIntensityProjectionExtension';/**
 * This object contains the BaseExtension, which can be extended for other color palette-style rendering, as well
 * implementations of three ray casting algorithms as extensions.
 * @typedef Extension3D
 * @type {object}
 * @property {object} BaseExtension
 * @property {object} AdditiveBlendExtension
 * @property {object} MaximumIntensityProjectionExtension
 * @property {object} MinimumIntensityProjectionExtension
 */var ColorPalette3DExtensions={BaseExtension:BaseExtension$1,AdditiveBlendExtension:AdditiveBlendExtension$1,MaximumIntensityProjectionExtension:MaximumIntensityProjectionExtension$1,MinimumIntensityProjectionExtension:MinimumIntensityProjectionExtension$1};exports.ColorPalette3DExtensions=ColorPalette3DExtensions;var fs$2="#define GLSLIFY 1\nvec4 jet(float x_17){const float e0=0.0;const vec4 v0=vec4(0,0,0.5137254901960784,1);const float e1=0.125;const vec4 v1=vec4(0,0.23529411764705882,0.6666666666666666,1);const float e2=0.375;const vec4 v2=vec4(0.0196078431372549,1,1,1);const float e3=0.625;const vec4 v3=vec4(1,1,0,1);const float e4=0.875;const vec4 v4=vec4(0.9803921568627451,0,0,1);const float e5=1.0;const vec4 v5=vec4(0.5019607843137255,0,0,1);float a0=smoothstep(e0,e1,x_17);float a1=smoothstep(e1,e2,x_17);float a2=smoothstep(e2,e3,x_17);float a3=smoothstep(e3,e4,x_17);float a4=smoothstep(e4,e5,x_17);return max(mix(v0,v1,a0)*step(e0,x_17)*step(x_17,e1),max(mix(v1,v2,a1)*step(e1,x_17)*step(x_17,e2),max(mix(v2,v3,a2)*step(e2,x_17)*step(x_17,e3),max(mix(v3,v4,a3)*step(e3,x_17)*step(x_17,e4),mix(v4,v5,a4)*step(e4,x_17)*step(x_17,e5)))));}vec4 hsv(float x_18){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=0.169;const vec4 v1=vec4(0.9921568627450981,1,0.00784313725490196,1);const float e2=0.173;const vec4 v2=vec4(0.9686274509803922,1,0.00784313725490196,1);const float e3=0.337;const vec4 v3=vec4(0,0.9882352941176471,0.01568627450980392,1);const float e4=0.341;const vec4 v4=vec4(0,0.9882352941176471,0.0392156862745098,1);const float e5=0.506;const vec4 v5=vec4(0.00392156862745098,0.9764705882352941,1,1);const float e6=0.671;const vec4 v6=vec4(0.00784313725490196,0,0.9921568627450981,1);const float e7=0.675;const vec4 v7=vec4(0.03137254901960784,0,0.9921568627450981,1);const float e8=0.839;const vec4 v8=vec4(1,0,0.984313725490196,1);const float e9=0.843;const vec4 v9=vec4(1,0,0.9607843137254902,1);const float e10=1.0;const vec4 v10=vec4(1,0,0.023529411764705882,1);float a0=smoothstep(e0,e1,x_18);float a1=smoothstep(e1,e2,x_18);float a2=smoothstep(e2,e3,x_18);float a3=smoothstep(e3,e4,x_18);float a4=smoothstep(e4,e5,x_18);float a5=smoothstep(e5,e6,x_18);float a6=smoothstep(e6,e7,x_18);float a7=smoothstep(e7,e8,x_18);float a8=smoothstep(e8,e9,x_18);float a9=smoothstep(e9,e10,x_18);return max(mix(v0,v1,a0)*step(e0,x_18)*step(x_18,e1),max(mix(v1,v2,a1)*step(e1,x_18)*step(x_18,e2),max(mix(v2,v3,a2)*step(e2,x_18)*step(x_18,e3),max(mix(v3,v4,a3)*step(e3,x_18)*step(x_18,e4),max(mix(v4,v5,a4)*step(e4,x_18)*step(x_18,e5),max(mix(v5,v6,a5)*step(e5,x_18)*step(x_18,e6),max(mix(v6,v7,a6)*step(e6,x_18)*step(x_18,e7),max(mix(v7,v8,a7)*step(e7,x_18)*step(x_18,e8),max(mix(v8,v9,a8)*step(e8,x_18)*step(x_18,e9),mix(v9,v10,a9)*step(e9,x_18)*step(x_18,e10))))))))));}vec4 hot(float x_13){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.3;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.6;const vec4 v2=vec4(1,0.8235294117647058,0,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_13);float a1=smoothstep(e1,e2,x_13);float a2=smoothstep(e2,e3,x_13);return max(mix(v0,v1,a0)*step(e0,x_13)*step(x_13,e1),max(mix(v1,v2,a1)*step(e1,x_13)*step(x_13,e2),mix(v2,v3,a2)*step(e2,x_13)*step(x_13,e3)));}vec4 cool(float x_24){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.4549019607843137,0,0.8549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);const float e3=0.38;const vec4 v3=vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);const float e4=0.5;const vec4 v4=vec4(0,0.8,0.7725490196078432,1);const float e5=0.63;const vec4 v5=vec4(0,0.9686274509803922,0.5725490196078431,1);const float e6=0.75;const vec4 v6=vec4(0,1,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.1568627450980392,1,0.03137254901960784,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_24);float a1=smoothstep(e1,e2,x_24);float a2=smoothstep(e2,e3,x_24);float a3=smoothstep(e3,e4,x_24);float a4=smoothstep(e4,e5,x_24);float a5=smoothstep(e5,e6,x_24);float a6=smoothstep(e6,e7,x_24);float a7=smoothstep(e7,e8,x_24);return max(mix(v0,v1,a0)*step(e0,x_24)*step(x_24,e1),max(mix(v1,v2,a1)*step(e1,x_24)*step(x_24,e2),max(mix(v2,v3,a2)*step(e2,x_24)*step(x_24,e3),max(mix(v3,v4,a3)*step(e3,x_24)*step(x_24,e4),max(mix(v4,v5,a4)*step(e4,x_24)*step(x_24,e5),max(mix(v5,v6,a5)*step(e5,x_24)*step(x_24,e6),max(mix(v6,v7,a6)*step(e6,x_24)*step(x_24,e7),mix(v7,v8,a7)*step(e7,x_24)*step(x_24,e8))))))));}vec4 spring(float x_5){const float e0=0.0;const vec4 v0=vec4(1,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_5);return mix(v0,v1,a0)*step(e0,x_5)*step(x_5,e1);}vec4 summer(float x_12){const float e0=0.0;const vec4 v0=vec4(0,0.5019607843137255,0.4,1);const float e1=1.0;const vec4 v1=vec4(1,1,0.4,1);float a0=smoothstep(e0,e1,x_12);return mix(v0,v1,a0)*step(e0,x_12)*step(x_12,e1);}vec4 autumn(float x_25){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_25);return mix(v0,v1,a0)*step(e0,x_25)*step(x_25,e1);}vec4 winter(float x_16){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(0,1,0.5019607843137255,1);float a0=smoothstep(e0,e1,x_16);return mix(v0,v1,a0)*step(e0,x_16)*step(x_16,e1);}vec4 bone(float x_15){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.376;const vec4 v1=vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);const float e2=0.753;const vec4 v2=vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_15);float a1=smoothstep(e1,e2,x_15);float a2=smoothstep(e2,e3,x_15);return max(mix(v0,v1,a0)*step(e0,x_15)*step(x_15,e1),max(mix(v1,v2,a1)*step(e1,x_15)*step(x_15,e2),mix(v2,v3,a2)*step(e2,x_15)*step(x_15,e3)));}vec4 copper(float x_10){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.804;const vec4 v1=vec4(1,0.6274509803921569,0.4,1);const float e2=1.0;const vec4 v2=vec4(1,0.7803921568627451,0.4980392156862745,1);float a0=smoothstep(e0,e1,x_10);float a1=smoothstep(e1,e2,x_10);return max(mix(v0,v1,a0)*step(e0,x_10)*step(x_10,e1),mix(v1,v2,a1)*step(e1,x_10)*step(x_10,e2));}vec4 greys(float x_4){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_4);return mix(v0,v1,a0)*step(e0,x_4)*step(x_4,e1);}vec4 yignbu(float x_32){const float e0=0.0;const vec4 v0=vec4(0.03137254901960784,0.11372549019607843,0.34509803921568627,1);const float e1=0.125;const vec4 v1=vec4(0.1450980392156863,0.20392156862745098,0.5803921568627451,1);const float e2=0.25;const vec4 v2=vec4(0.13333333333333333,0.3686274509803922,0.6588235294117647,1);const float e3=0.375;const vec4 v3=vec4(0.11372549019607843,0.5686274509803921,0.7529411764705882,1);const float e4=0.5;const vec4 v4=vec4(0.2549019607843137,0.7137254901960784,0.7686274509803922,1);const float e5=0.625;const vec4 v5=vec4(0.4980392156862745,0.803921568627451,0.7333333333333333,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7058823529411765,1);const float e7=0.875;const vec4 v7=vec4(0.9294117647058824,0.9725490196078431,0.8509803921568627,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8509803921568627,1);float a0=smoothstep(e0,e1,x_32);float a1=smoothstep(e1,e2,x_32);float a2=smoothstep(e2,e3,x_32);float a3=smoothstep(e3,e4,x_32);float a4=smoothstep(e4,e5,x_32);float a5=smoothstep(e5,e6,x_32);float a6=smoothstep(e6,e7,x_32);float a7=smoothstep(e7,e8,x_32);return max(mix(v0,v1,a0)*step(e0,x_32)*step(x_32,e1),max(mix(v1,v2,a1)*step(e1,x_32)*step(x_32,e2),max(mix(v2,v3,a2)*step(e2,x_32)*step(x_32,e3),max(mix(v3,v4,a3)*step(e3,x_32)*step(x_32,e4),max(mix(v4,v5,a4)*step(e4,x_32)*step(x_32,e5),max(mix(v5,v6,a5)*step(e5,x_32)*step(x_32,e6),max(mix(v6,v7,a6)*step(e6,x_32)*step(x_32,e7),mix(v7,v8,a7)*step(e7,x_32)*step(x_32,e8))))))));}vec4 greens(float x_34){const float e0=0.0;const vec4 v0=vec4(0,0.26666666666666666,0.10588235294117647,1);const float e1=0.125;const vec4 v1=vec4(0,0.42745098039215684,0.17254901960784313,1);const float e2=0.25;const vec4 v2=vec4(0.13725490196078433,0.5450980392156862,0.27058823529411763,1);const float e3=0.375;const vec4 v3=vec4(0.2549019607843137,0.6705882352941176,0.36470588235294116,1);const float e4=0.5;const vec4 v4=vec4(0.4549019607843137,0.7686274509803922,0.4627450980392157,1);const float e5=0.625;const vec4 v5=vec4(0.6313725490196078,0.8509803921568627,0.6078431372549019,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7529411764705882,1);const float e7=0.875;const vec4 v7=vec4(0.8980392156862745,0.9607843137254902,0.8784313725490196,1);const float e8=1.0;const vec4 v8=vec4(0.9686274509803922,0.9882352941176471,0.9607843137254902,1);float a0=smoothstep(e0,e1,x_34);float a1=smoothstep(e1,e2,x_34);float a2=smoothstep(e2,e3,x_34);float a3=smoothstep(e3,e4,x_34);float a4=smoothstep(e4,e5,x_34);float a5=smoothstep(e5,e6,x_34);float a6=smoothstep(e6,e7,x_34);float a7=smoothstep(e7,e8,x_34);return max(mix(v0,v1,a0)*step(e0,x_34)*step(x_34,e1),max(mix(v1,v2,a1)*step(e1,x_34)*step(x_34,e2),max(mix(v2,v3,a2)*step(e2,x_34)*step(x_34,e3),max(mix(v3,v4,a3)*step(e3,x_34)*step(x_34,e4),max(mix(v4,v5,a4)*step(e4,x_34)*step(x_34,e5),max(mix(v5,v6,a5)*step(e5,x_34)*step(x_34,e6),max(mix(v6,v7,a6)*step(e6,x_34)*step(x_34,e7),mix(v7,v8,a7)*step(e7,x_34)*step(x_34,e8))))))));}vec4 yiorrd(float x_41){const float e0=0.0;const vec4 v0=vec4(0.5019607843137255,0,0.14901960784313725,1);const float e1=0.125;const vec4 v1=vec4(0.7411764705882353,0,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.8901960784313725,0.10196078431372549,0.10980392156862745,1);const float e3=0.375;const vec4 v3=vec4(0.9882352941176471,0.3058823529411765,0.16470588235294117,1);const float e4=0.5;const vec4 v4=vec4(0.9921568627450981,0.5529411764705883,0.23529411764705882,1);const float e5=0.625;const vec4 v5=vec4(0.996078431372549,0.6980392156862745,0.2980392156862745,1);const float e6=0.75;const vec4 v6=vec4(0.996078431372549,0.8509803921568627,0.4627450980392157,1);const float e7=0.875;const vec4 v7=vec4(1,0.9294117647058824,0.6274509803921569,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8,1);float a0=smoothstep(e0,e1,x_41);float a1=smoothstep(e1,e2,x_41);float a2=smoothstep(e2,e3,x_41);float a3=smoothstep(e3,e4,x_41);float a4=smoothstep(e4,e5,x_41);float a5=smoothstep(e5,e6,x_41);float a6=smoothstep(e6,e7,x_41);float a7=smoothstep(e7,e8,x_41);return max(mix(v0,v1,a0)*step(e0,x_41)*step(x_41,e1),max(mix(v1,v2,a1)*step(e1,x_41)*step(x_41,e2),max(mix(v2,v3,a2)*step(e2,x_41)*step(x_41,e3),max(mix(v3,v4,a3)*step(e3,x_41)*step(x_41,e4),max(mix(v4,v5,a4)*step(e4,x_41)*step(x_41,e5),max(mix(v5,v6,a5)*step(e5,x_41)*step(x_41,e6),max(mix(v6,v7,a6)*step(e6,x_41)*step(x_41,e7),mix(v7,v8,a7)*step(e7,x_41)*step(x_41,e8))))))));}vec4 bluered(float x_23){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_23);return mix(v0,v1,a0)*step(e0,x_23)*step(x_23,e1);}vec4 rdbu(float x_1){const float e0=0.0;const vec4 v0=vec4(0.0196078431372549,0.0392156862745098,0.6745098039215687,1);const float e1=0.35;const vec4 v1=vec4(0.41568627450980394,0.5372549019607843,0.9686274509803922,1);const float e2=0.5;const vec4 v2=vec4(0.7450980392156863,0.7450980392156863,0.7450980392156863,1);const float e3=0.6;const vec4 v3=vec4(0.8627450980392157,0.6666666666666666,0.5176470588235295,1);const float e4=0.7;const vec4 v4=vec4(0.9019607843137255,0.5686274509803921,0.35294117647058826,1);const float e5=1.0;const vec4 v5=vec4(0.6980392156862745,0.0392156862745098,0.10980392156862745,1);float a0=smoothstep(e0,e1,x_1);float a1=smoothstep(e1,e2,x_1);float a2=smoothstep(e2,e3,x_1);float a3=smoothstep(e3,e4,x_1);float a4=smoothstep(e4,e5,x_1);return max(mix(v0,v1,a0)*step(e0,x_1)*step(x_1,e1),max(mix(v1,v2,a1)*step(e1,x_1)*step(x_1,e2),max(mix(v2,v3,a2)*step(e2,x_1)*step(x_1,e3),max(mix(v3,v4,a3)*step(e3,x_1)*step(x_1,e4),mix(v4,v5,a4)*step(e4,x_1)*step(x_1,e5)))));}vec4 picnic(float x_42){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=0.1;const vec4 v1=vec4(0.2,0.6,1,1);const float e2=0.2;const vec4 v2=vec4(0.4,0.8,1,1);const float e3=0.3;const vec4 v3=vec4(0.6,0.8,1,1);const float e4=0.4;const vec4 v4=vec4(0.8,0.8,1,1);const float e5=0.5;const vec4 v5=vec4(1,1,1,1);const float e6=0.6;const vec4 v6=vec4(1,0.8,1,1);const float e7=0.7;const vec4 v7=vec4(1,0.6,1,1);const float e8=0.8;const vec4 v8=vec4(1,0.4,0.8,1);const float e9=0.9;const vec4 v9=vec4(1,0.4,0.4,1);const float e10=1.0;const vec4 v10=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_42);float a1=smoothstep(e1,e2,x_42);float a2=smoothstep(e2,e3,x_42);float a3=smoothstep(e3,e4,x_42);float a4=smoothstep(e4,e5,x_42);float a5=smoothstep(e5,e6,x_42);float a6=smoothstep(e6,e7,x_42);float a7=smoothstep(e7,e8,x_42);float a8=smoothstep(e8,e9,x_42);float a9=smoothstep(e9,e10,x_42);return max(mix(v0,v1,a0)*step(e0,x_42)*step(x_42,e1),max(mix(v1,v2,a1)*step(e1,x_42)*step(x_42,e2),max(mix(v2,v3,a2)*step(e2,x_42)*step(x_42,e3),max(mix(v3,v4,a3)*step(e3,x_42)*step(x_42,e4),max(mix(v4,v5,a4)*step(e4,x_42)*step(x_42,e5),max(mix(v5,v6,a5)*step(e5,x_42)*step(x_42,e6),max(mix(v6,v7,a6)*step(e6,x_42)*step(x_42,e7),max(mix(v7,v8,a7)*step(e7,x_42)*step(x_42,e8),max(mix(v8,v9,a8)*step(e8,x_42)*step(x_42,e9),mix(v9,v10,a9)*step(e9,x_42)*step(x_42,e10))))))))));}vec4 rainbow(float x_31){const float e0=0.0;const vec4 v0=vec4(0.5882352941176471,0,0.35294117647058826,1);const float e1=0.125;const vec4 v1=vec4(0,0,0.7843137254901961,1);const float e2=0.25;const vec4 v2=vec4(0,0.09803921568627451,1,1);const float e3=0.375;const vec4 v3=vec4(0,0.596078431372549,1,1);const float e4=0.5;const vec4 v4=vec4(0.17254901960784313,1,0.5882352941176471,1);const float e5=0.625;const vec4 v5=vec4(0.592156862745098,1,0,1);const float e6=0.75;const vec4 v6=vec4(1,0.9176470588235294,0,1);const float e7=0.875;const vec4 v7=vec4(1,0.43529411764705883,0,1);const float e8=1.0;const vec4 v8=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_31);float a1=smoothstep(e1,e2,x_31);float a2=smoothstep(e2,e3,x_31);float a3=smoothstep(e3,e4,x_31);float a4=smoothstep(e4,e5,x_31);float a5=smoothstep(e5,e6,x_31);float a6=smoothstep(e6,e7,x_31);float a7=smoothstep(e7,e8,x_31);return max(mix(v0,v1,a0)*step(e0,x_31)*step(x_31,e1),max(mix(v1,v2,a1)*step(e1,x_31)*step(x_31,e2),max(mix(v2,v3,a2)*step(e2,x_31)*step(x_31,e3),max(mix(v3,v4,a3)*step(e3,x_31)*step(x_31,e4),max(mix(v4,v5,a4)*step(e4,x_31)*step(x_31,e5),max(mix(v5,v6,a5)*step(e5,x_31)*step(x_31,e6),max(mix(v6,v7,a6)*step(e6,x_31)*step(x_31,e7),mix(v7,v8,a7)*step(e7,x_31)*step(x_31,e8))))))));}vec4 portland(float x_21){const float e0=0.0;const vec4 v0=vec4(0.047058823529411764,0.2,0.5137254901960784,1);const float e1=0.25;const vec4 v1=vec4(0.0392156862745098,0.5333333333333333,0.7294117647058823,1);const float e2=0.5;const vec4 v2=vec4(0.9490196078431372,0.8274509803921568,0.2196078431372549,1);const float e3=0.75;const vec4 v3=vec4(0.9490196078431372,0.5607843137254902,0.2196078431372549,1);const float e4=1.0;const vec4 v4=vec4(0.8509803921568627,0.11764705882352941,0.11764705882352941,1);float a0=smoothstep(e0,e1,x_21);float a1=smoothstep(e1,e2,x_21);float a2=smoothstep(e2,e3,x_21);float a3=smoothstep(e3,e4,x_21);return max(mix(v0,v1,a0)*step(e0,x_21)*step(x_21,e1),max(mix(v1,v2,a1)*step(e1,x_21)*step(x_21,e2),max(mix(v2,v3,a2)*step(e2,x_21)*step(x_21,e3),mix(v3,v4,a3)*step(e3,x_21)*step(x_21,e4))));}vec4 blackbody(float x_38){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.2;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.4;const vec4 v2=vec4(0.9019607843137255,0.8235294117647058,0,1);const float e3=0.7;const vec4 v3=vec4(1,1,1,1);const float e4=1.0;const vec4 v4=vec4(0.6274509803921569,0.7843137254901961,1,1);float a0=smoothstep(e0,e1,x_38);float a1=smoothstep(e1,e2,x_38);float a2=smoothstep(e2,e3,x_38);float a3=smoothstep(e3,e4,x_38);return max(mix(v0,v1,a0)*step(e0,x_38)*step(x_38,e1),max(mix(v1,v2,a1)*step(e1,x_38)*step(x_38,e2),max(mix(v2,v3,a2)*step(e2,x_38)*step(x_38,e3),mix(v3,v4,a3)*step(e3,x_38)*step(x_38,e4))));}vec4 earth(float x_29){const float e0=0.0;const vec4 v0=vec4(0,0,0.5098039215686274,1);const float e1=0.1;const vec4 v1=vec4(0,0.7058823529411765,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(0.1568627450980392,0.8235294117647058,0.1568627450980392,1);const float e3=0.4;const vec4 v3=vec4(0.9019607843137255,0.9019607843137255,0.19607843137254902,1);const float e4=0.6;const vec4 v4=vec4(0.47058823529411764,0.27450980392156865,0.0784313725490196,1);const float e5=1.0;const vec4 v5=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_29);float a1=smoothstep(e1,e2,x_29);float a2=smoothstep(e2,e3,x_29);float a3=smoothstep(e3,e4,x_29);float a4=smoothstep(e4,e5,x_29);return max(mix(v0,v1,a0)*step(e0,x_29)*step(x_29,e1),max(mix(v1,v2,a1)*step(e1,x_29)*step(x_29,e2),max(mix(v2,v3,a2)*step(e2,x_29)*step(x_29,e3),max(mix(v3,v4,a3)*step(e3,x_29)*step(x_29,e4),mix(v4,v5,a4)*step(e4,x_29)*step(x_29,e5)))));}vec4 electric(float x_9){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.15;const vec4 v1=vec4(0.11764705882352941,0,0.39215686274509803,1);const float e2=0.4;const vec4 v2=vec4(0.47058823529411764,0,0.39215686274509803,1);const float e3=0.6;const vec4 v3=vec4(0.6274509803921569,0.35294117647058826,0,1);const float e4=0.8;const vec4 v4=vec4(0.9019607843137255,0.7843137254901961,0,1);const float e5=1.0;const vec4 v5=vec4(1,0.9803921568627451,0.8627450980392157,1);float a0=smoothstep(e0,e1,x_9);float a1=smoothstep(e1,e2,x_9);float a2=smoothstep(e2,e3,x_9);float a3=smoothstep(e3,e4,x_9);float a4=smoothstep(e4,e5,x_9);return max(mix(v0,v1,a0)*step(e0,x_9)*step(x_9,e1),max(mix(v1,v2,a1)*step(e1,x_9)*step(x_9,e2),max(mix(v2,v3,a2)*step(e2,x_9)*step(x_9,e3),max(mix(v3,v4,a3)*step(e3,x_9)*step(x_9,e4),mix(v4,v5,a4)*step(e4,x_9)*step(x_9,e5)))));}vec4 alpha(float x_0){const float e0=0.0;const vec4 v0=vec4(1,1,1,0);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_0);return mix(v0,v1,a0)*step(e0,x_0)*step(x_0,e1);}vec4 viridis(float x_22){const float e0=0.0;const vec4 v0=vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);const float e1=0.13;const vec4 v1=vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);const float e4=0.5;const vec4 v4=vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);const float e5=0.63;const vec4 v5=vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);const float e6=0.75;const vec4 v6=vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);const float e7=0.88;const vec4 v7=vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);float a0=smoothstep(e0,e1,x_22);float a1=smoothstep(e1,e2,x_22);float a2=smoothstep(e2,e3,x_22);float a3=smoothstep(e3,e4,x_22);float a4=smoothstep(e4,e5,x_22);float a5=smoothstep(e5,e6,x_22);float a6=smoothstep(e6,e7,x_22);float a7=smoothstep(e7,e8,x_22);return max(mix(v0,v1,a0)*step(e0,x_22)*step(x_22,e1),max(mix(v1,v2,a1)*step(e1,x_22)*step(x_22,e2),max(mix(v2,v3,a2)*step(e2,x_22)*step(x_22,e3),max(mix(v3,v4,a3)*step(e3,x_22)*step(x_22,e4),max(mix(v4,v5,a4)*step(e4,x_22)*step(x_22,e5),max(mix(v5,v6,a5)*step(e5,x_22)*step(x_22,e6),max(mix(v6,v7,a6)*step(e6,x_22)*step(x_22,e7),mix(v7,v8,a7)*step(e7,x_22)*step(x_22,e8))))))));}vec4 inferno(float x_30){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);const float e3=0.38;const vec4 v3=vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);const float e4=0.5;const vec4 v4=vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);const float e5=0.63;const vec4 v5=vec4(0.8901960784313725,0.34901960784313724,0.2,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,1,0.6431372549019608,1);float a0=smoothstep(e0,e1,x_30);float a1=smoothstep(e1,e2,x_30);float a2=smoothstep(e2,e3,x_30);float a3=smoothstep(e3,e4,x_30);float a4=smoothstep(e4,e5,x_30);float a5=smoothstep(e5,e6,x_30);float a6=smoothstep(e6,e7,x_30);float a7=smoothstep(e7,e8,x_30);return max(mix(v0,v1,a0)*step(e0,x_30)*step(x_30,e1),max(mix(v1,v2,a1)*step(e1,x_30)*step(x_30,e2),max(mix(v2,v3,a2)*step(e2,x_30)*step(x_30,e3),max(mix(v3,v4,a3)*step(e3,x_30)*step(x_30,e4),max(mix(v4,v5,a4)*step(e4,x_30)*step(x_30,e5),max(mix(v5,v6,a5)*step(e5,x_30)*step(x_30,e6),max(mix(v6,v7,a6)*step(e6,x_30)*step(x_30,e7),mix(v7,v8,a7)*step(e7,x_30)*step(x_30,e8))))))));}vec4 magma(float x_33){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);const float e2=0.25;const vec4 v2=vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);const float e4=0.5;const vec4 v4=vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);const float e6=0.75;const vec4 v6=vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);float a0=smoothstep(e0,e1,x_33);float a1=smoothstep(e1,e2,x_33);float a2=smoothstep(e2,e3,x_33);float a3=smoothstep(e3,e4,x_33);float a4=smoothstep(e4,e5,x_33);float a5=smoothstep(e5,e6,x_33);float a6=smoothstep(e6,e7,x_33);float a7=smoothstep(e7,e8,x_33);return max(mix(v0,v1,a0)*step(e0,x_33)*step(x_33,e1),max(mix(v1,v2,a1)*step(e1,x_33)*step(x_33,e2),max(mix(v2,v3,a2)*step(e2,x_33)*step(x_33,e3),max(mix(v3,v4,a3)*step(e3,x_33)*step(x_33,e4),max(mix(v4,v5,a4)*step(e4,x_33)*step(x_33,e5),max(mix(v5,v6,a5)*step(e5,x_33)*step(x_33,e6),max(mix(v6,v7,a6)*step(e6,x_33)*step(x_33,e7),mix(v7,v8,a7)*step(e7,x_33)*step(x_33,e8))))))));}vec4 plasma(float x_3){const float e0=0.0;const vec4 v0=vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);const float e1=0.13;const vec4 v1=vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);const float e2=0.25;const vec4 v2=vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);const float e4=0.5;const vec4 v4=vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);const float e6=0.75;const vec4 v6=vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);const float e7=0.88;const vec4 v7=vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);float a0=smoothstep(e0,e1,x_3);float a1=smoothstep(e1,e2,x_3);float a2=smoothstep(e2,e3,x_3);float a3=smoothstep(e3,e4,x_3);float a4=smoothstep(e4,e5,x_3);float a5=smoothstep(e5,e6,x_3);float a6=smoothstep(e6,e7,x_3);float a7=smoothstep(e7,e8,x_3);return max(mix(v0,v1,a0)*step(e0,x_3)*step(x_3,e1),max(mix(v1,v2,a1)*step(e1,x_3)*step(x_3,e2),max(mix(v2,v3,a2)*step(e2,x_3)*step(x_3,e3),max(mix(v3,v4,a3)*step(e3,x_3)*step(x_3,e4),max(mix(v4,v5,a4)*step(e4,x_3)*step(x_3,e5),max(mix(v5,v6,a5)*step(e5,x_3)*step(x_3,e6),max(mix(v6,v7,a6)*step(e6,x_3)*step(x_3,e7),mix(v7,v8,a7)*step(e7,x_3)*step(x_3,e8))))))));}vec4 warm(float x_43){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.6745098039215687,0,0.7333333333333333,1);const float e2=0.25;const vec4 v2=vec4(0.8588235294117647,0,0.6666666666666666,1);const float e3=0.38;const vec4 v3=vec4(1,0,0.5098039215686274,1);const float e4=0.5;const vec4 v4=vec4(1,0.24705882352941178,0.2901960784313726,1);const float e5=0.63;const vec4 v5=vec4(1,0.4823529411764706,0,1);const float e6=0.75;const vec4 v6=vec4(0.9176470588235294,0.6901960784313725,0,1);const float e7=0.88;const vec4 v7=vec4(0.7450980392156863,0.8941176470588236,0,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_43);float a1=smoothstep(e1,e2,x_43);float a2=smoothstep(e2,e3,x_43);float a3=smoothstep(e3,e4,x_43);float a4=smoothstep(e4,e5,x_43);float a5=smoothstep(e5,e6,x_43);float a6=smoothstep(e6,e7,x_43);float a7=smoothstep(e7,e8,x_43);return max(mix(v0,v1,a0)*step(e0,x_43)*step(x_43,e1),max(mix(v1,v2,a1)*step(e1,x_43)*step(x_43,e2),max(mix(v2,v3,a2)*step(e2,x_43)*step(x_43,e3),max(mix(v3,v4,a3)*step(e3,x_43)*step(x_43,e4),max(mix(v4,v5,a4)*step(e4,x_43)*step(x_43,e5),max(mix(v5,v6,a5)*step(e5,x_43)*step(x_43,e6),max(mix(v6,v7,a6)*step(e6,x_43)*step(x_43,e7),mix(v7,v8,a7)*step(e7,x_43)*step(x_43,e8))))))));}vec4 rainbow_soft_1310269270(float x_14){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.1;const vec4 v1=vec4(0.7803921568627451,0,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(1,0,0.4745098039215686,1);const float e3=0.3;const vec4 v3=vec4(1,0.4235294117647059,0,1);const float e4=0.4;const vec4 v4=vec4(0.8705882352941177,0.7607843137254902,0,1);const float e5=0.5;const vec4 v5=vec4(0.5882352941176471,1,0,1);const float e6=0.6;const vec4 v6=vec4(0,1,0.21568627450980393,1);const float e7=0.7;const vec4 v7=vec4(0,0.9647058823529412,0.5882352941176471,1);const float e8=0.8;const vec4 v8=vec4(0.19607843137254902,0.6549019607843137,0.8705882352941177,1);const float e9=0.9;const vec4 v9=vec4(0.403921568627451,0.2,0.9215686274509803,1);const float e10=1.0;const vec4 v10=vec4(0.48627450980392156,0,0.7294117647058823,1);float a0=smoothstep(e0,e1,x_14);float a1=smoothstep(e1,e2,x_14);float a2=smoothstep(e2,e3,x_14);float a3=smoothstep(e3,e4,x_14);float a4=smoothstep(e4,e5,x_14);float a5=smoothstep(e5,e6,x_14);float a6=smoothstep(e6,e7,x_14);float a7=smoothstep(e7,e8,x_14);float a8=smoothstep(e8,e9,x_14);float a9=smoothstep(e9,e10,x_14);return max(mix(v0,v1,a0)*step(e0,x_14)*step(x_14,e1),max(mix(v1,v2,a1)*step(e1,x_14)*step(x_14,e2),max(mix(v2,v3,a2)*step(e2,x_14)*step(x_14,e3),max(mix(v3,v4,a3)*step(e3,x_14)*step(x_14,e4),max(mix(v4,v5,a4)*step(e4,x_14)*step(x_14,e5),max(mix(v5,v6,a5)*step(e5,x_14)*step(x_14,e6),max(mix(v6,v7,a6)*step(e6,x_14)*step(x_14,e7),max(mix(v7,v8,a7)*step(e7,x_14)*step(x_14,e8),max(mix(v8,v9,a8)*step(e8,x_14)*step(x_14,e9),mix(v9,v10,a9)*step(e9,x_14)*step(x_14,e10))))))))));}vec4 bathymetry(float x_36){const float e0=0.0;const vec4 v0=vec4(0.1568627450980392,0.10196078431372549,0.17254901960784313,1);const float e1=0.13;const vec4 v1=vec4(0.23137254901960785,0.19215686274509805,0.35294117647058826,1);const float e2=0.25;const vec4 v2=vec4(0.25098039215686274,0.2980392156862745,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.24705882352941178,0.43137254901960786,0.592156862745098,1);const float e4=0.5;const vec4 v4=vec4(0.2823529411764706,0.5568627450980392,0.6196078431372549,1);const float e5=0.63;const vec4 v5=vec4(0.3333333333333333,0.6823529411764706,0.6392156862745098,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.807843137254902,0.6392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.7333333333333333,0.9019607843137255,0.6745098039215687,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.996078431372549,0.8,1);float a0=smoothstep(e0,e1,x_36);float a1=smoothstep(e1,e2,x_36);float a2=smoothstep(e2,e3,x_36);float a3=smoothstep(e3,e4,x_36);float a4=smoothstep(e4,e5,x_36);float a5=smoothstep(e5,e6,x_36);float a6=smoothstep(e6,e7,x_36);float a7=smoothstep(e7,e8,x_36);return max(mix(v0,v1,a0)*step(e0,x_36)*step(x_36,e1),max(mix(v1,v2,a1)*step(e1,x_36)*step(x_36,e2),max(mix(v2,v3,a2)*step(e2,x_36)*step(x_36,e3),max(mix(v3,v4,a3)*step(e3,x_36)*step(x_36,e4),max(mix(v4,v5,a4)*step(e4,x_36)*step(x_36,e5),max(mix(v5,v6,a5)*step(e5,x_36)*step(x_36,e6),max(mix(v6,v7,a6)*step(e6,x_36)*step(x_36,e7),mix(v7,v8,a7)*step(e7,x_36)*step(x_36,e8))))))));}vec4 cdom(float x_7){const float e0=0.0;const vec4 v0=vec4(0.1843137254901961,0.058823529411764705,0.24313725490196078,1);const float e1=0.13;const vec4 v1=vec4(0.3411764705882353,0.09019607843137255,0.33725490196078434,1);const float e2=0.25;const vec4 v2=vec4(0.5098039215686274,0.10980392156862745,0.38823529411764707,1);const float e3=0.38;const vec4 v3=vec4(0.6705882352941176,0.1607843137254902,0.3764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.807843137254902,0.2627450980392157,0.33725490196078434,1);const float e5=0.63;const vec4 v5=vec4(0.9019607843137255,0.41568627450980394,0.32941176470588235,1);const float e6=0.75;const vec4 v6=vec4(0.9490196078431372,0.5843137254901961,0.403921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7568627450980392,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.9294117647058824,0.6901960784313725,1);float a0=smoothstep(e0,e1,x_7);float a1=smoothstep(e1,e2,x_7);float a2=smoothstep(e2,e3,x_7);float a3=smoothstep(e3,e4,x_7);float a4=smoothstep(e4,e5,x_7);float a5=smoothstep(e5,e6,x_7);float a6=smoothstep(e6,e7,x_7);float a7=smoothstep(e7,e8,x_7);return max(mix(v0,v1,a0)*step(e0,x_7)*step(x_7,e1),max(mix(v1,v2,a1)*step(e1,x_7)*step(x_7,e2),max(mix(v2,v3,a2)*step(e2,x_7)*step(x_7,e3),max(mix(v3,v4,a3)*step(e3,x_7)*step(x_7,e4),max(mix(v4,v5,a4)*step(e4,x_7)*step(x_7,e5),max(mix(v5,v6,a5)*step(e5,x_7)*step(x_7,e6),max(mix(v6,v7,a6)*step(e6,x_7)*step(x_7,e7),mix(v7,v8,a7)*step(e7,x_7)*step(x_7,e8))))))));}vec4 chlorophyll(float x_6){const float e0=0.0;const vec4 v0=vec4(0.07058823529411765,0.1411764705882353,0.0784313725490196,1);const float e1=0.13;const vec4 v1=vec4(0.09803921568627451,0.24705882352941178,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.09411764705882353,0.3568627450980392,0.23137254901960785,1);const float e3=0.38;const vec4 v3=vec4(0.050980392156862744,0.4666666666666667,0.2823529411764706,1);const float e4=0.5;const vec4 v4=vec4(0.07058823529411765,0.5803921568627451,0.3137254901960784,1);const float e5=0.63;const vec4 v5=vec4(0.3137254901960784,0.6784313725490196,0.34901960784313724,1);const float e6=0.75;const vec4 v6=vec4(0.5176470588235295,0.7686274509803922,0.47843137254901963,1);const float e7=0.88;const vec4 v7=vec4(0.6862745098039216,0.8666666666666667,0.6352941176470588,1);const float e8=1.0;const vec4 v8=vec4(0.8431372549019608,0.9764705882352941,0.8156862745098039,1);float a0=smoothstep(e0,e1,x_6);float a1=smoothstep(e1,e2,x_6);float a2=smoothstep(e2,e3,x_6);float a3=smoothstep(e3,e4,x_6);float a4=smoothstep(e4,e5,x_6);float a5=smoothstep(e5,e6,x_6);float a6=smoothstep(e6,e7,x_6);float a7=smoothstep(e7,e8,x_6);return max(mix(v0,v1,a0)*step(e0,x_6)*step(x_6,e1),max(mix(v1,v2,a1)*step(e1,x_6)*step(x_6,e2),max(mix(v2,v3,a2)*step(e2,x_6)*step(x_6,e3),max(mix(v3,v4,a3)*step(e3,x_6)*step(x_6,e4),max(mix(v4,v5,a4)*step(e4,x_6)*step(x_6,e5),max(mix(v5,v6,a5)*step(e5,x_6)*step(x_6,e6),max(mix(v6,v7,a6)*step(e6,x_6)*step(x_6,e7),mix(v7,v8,a7)*step(e7,x_6)*step(x_6,e8))))))));}vec4 density(float x_19){const float e0=0.0;const vec4 v0=vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);const float e2=0.25;const vec4 v2=vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);const float e3=0.38;const vec4 v3=vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);const float e4=0.5;const vec4 v4=vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);const float e5=0.63;const vec4 v5=vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);const float e6=0.75;const vec4 v6=vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);const float e7=0.88;const vec4 v7=vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);const float e8=1.0;const vec4 v8=vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);float a0=smoothstep(e0,e1,x_19);float a1=smoothstep(e1,e2,x_19);float a2=smoothstep(e2,e3,x_19);float a3=smoothstep(e3,e4,x_19);float a4=smoothstep(e4,e5,x_19);float a5=smoothstep(e5,e6,x_19);float a6=smoothstep(e6,e7,x_19);float a7=smoothstep(e7,e8,x_19);return max(mix(v0,v1,a0)*step(e0,x_19)*step(x_19,e1),max(mix(v1,v2,a1)*step(e1,x_19)*step(x_19,e2),max(mix(v2,v3,a2)*step(e2,x_19)*step(x_19,e3),max(mix(v3,v4,a3)*step(e3,x_19)*step(x_19,e4),max(mix(v4,v5,a4)*step(e4,x_19)*step(x_19,e5),max(mix(v5,v6,a5)*step(e5,x_19)*step(x_19,e6),max(mix(v6,v7,a6)*step(e6,x_19)*step(x_19,e7),mix(v7,v8,a7)*step(e7,x_19)*step(x_19,e8))))))));}vec4 freesurface_blue_3154355989(float x_35){const float e0=0.0;const vec4 v0=vec4(0.11764705882352941,0.01568627450980392,0.43137254901960786,1);const float e1=0.13;const vec4 v1=vec4(0.1843137254901961,0.054901960784313725,0.6901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.1607843137254902,0.17647058823529413,0.9254901960784314,1);const float e3=0.38;const vec4 v3=vec4(0.09803921568627451,0.38823529411764707,0.8313725490196079,1);const float e4=0.5;const vec4 v4=vec4(0.26666666666666666,0.5137254901960784,0.7843137254901961,1);const float e5=0.63;const vec4 v5=vec4(0.4470588235294118,0.611764705882353,0.7725490196078432,1);const float e6=0.75;const vec4 v6=vec4(0.615686274509804,0.7098039215686275,0.796078431372549,1);const float e7=0.88;const vec4 v7=vec4(0.7843137254901961,0.8156862745098039,0.8470588235294118,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_35);float a1=smoothstep(e1,e2,x_35);float a2=smoothstep(e2,e3,x_35);float a3=smoothstep(e3,e4,x_35);float a4=smoothstep(e4,e5,x_35);float a5=smoothstep(e5,e6,x_35);float a6=smoothstep(e6,e7,x_35);float a7=smoothstep(e7,e8,x_35);return max(mix(v0,v1,a0)*step(e0,x_35)*step(x_35,e1),max(mix(v1,v2,a1)*step(e1,x_35)*step(x_35,e2),max(mix(v2,v3,a2)*step(e2,x_35)*step(x_35,e3),max(mix(v3,v4,a3)*step(e3,x_35)*step(x_35,e4),max(mix(v4,v5,a4)*step(e4,x_35)*step(x_35,e5),max(mix(v5,v6,a5)*step(e5,x_35)*step(x_35,e6),max(mix(v6,v7,a6)*step(e6,x_35)*step(x_35,e7),mix(v7,v8,a7)*step(e7,x_35)*step(x_35,e8))))))));}vec4 freesurface_red_1679163293(float x_20){const float e0=0.0;const vec4 v0=vec4(0.23529411764705882,0.03529411764705882,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.39215686274509803,0.06666666666666667,0.10588235294117647,1);const float e2=0.25;const vec4 v2=vec4(0.5568627450980392,0.0784313725490196,0.11372549019607843,1);const float e3=0.38;const vec4 v3=vec4(0.6941176470588235,0.16862745098039217,0.10588235294117647,1);const float e4=0.5;const vec4 v4=vec4(0.7529411764705882,0.3411764705882353,0.24705882352941178,1);const float e5=0.63;const vec4 v5=vec4(0.803921568627451,0.49019607843137253,0.4117647058823529,1);const float e6=0.75;const vec4 v6=vec4(0.8470588235294118,0.6352941176470588,0.5803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.8901960784313725,0.7803921568627451,0.7568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_20);float a1=smoothstep(e1,e2,x_20);float a2=smoothstep(e2,e3,x_20);float a3=smoothstep(e3,e4,x_20);float a4=smoothstep(e4,e5,x_20);float a5=smoothstep(e5,e6,x_20);float a6=smoothstep(e6,e7,x_20);float a7=smoothstep(e7,e8,x_20);return max(mix(v0,v1,a0)*step(e0,x_20)*step(x_20,e1),max(mix(v1,v2,a1)*step(e1,x_20)*step(x_20,e2),max(mix(v2,v3,a2)*step(e2,x_20)*step(x_20,e3),max(mix(v3,v4,a3)*step(e3,x_20)*step(x_20,e4),max(mix(v4,v5,a4)*step(e4,x_20)*step(x_20,e5),max(mix(v5,v6,a5)*step(e5,x_20)*step(x_20,e6),max(mix(v6,v7,a6)*step(e6,x_20)*step(x_20,e7),mix(v7,v8,a7)*step(e7,x_20)*step(x_20,e8))))))));}vec4 oxygen(float x_11){const float e0=0.0;const vec4 v0=vec4(0.25098039215686274,0.0196078431372549,0.0196078431372549,1);const float e1=0.13;const vec4 v1=vec4(0.41568627450980394,0.023529411764705882,0.058823529411764705,1);const float e2=0.25;const vec4 v2=vec4(0.5647058823529412,0.10196078431372549,0.027450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.25098039215686274,0.011764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.7372549019607844,0.39215686274509803,0.01568627450980392,1);const float e5=0.63;const vec4 v5=vec4(0.807843137254902,0.5333333333333333,0.043137254901960784,1);const float e6=0.75;const vec4 v6=vec4(0.8627450980392157,0.6823529411764706,0.09803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9058823529411765,0.8431372549019608,0.17254901960784313,1);const float e8=1.0;const vec4 v8=vec4(0.9725490196078431,0.996078431372549,0.4117647058823529,1);float a0=smoothstep(e0,e1,x_11);float a1=smoothstep(e1,e2,x_11);float a2=smoothstep(e2,e3,x_11);float a3=smoothstep(e3,e4,x_11);float a4=smoothstep(e4,e5,x_11);float a5=smoothstep(e5,e6,x_11);float a6=smoothstep(e6,e7,x_11);float a7=smoothstep(e7,e8,x_11);return max(mix(v0,v1,a0)*step(e0,x_11)*step(x_11,e1),max(mix(v1,v2,a1)*step(e1,x_11)*step(x_11,e2),max(mix(v2,v3,a2)*step(e2,x_11)*step(x_11,e3),max(mix(v3,v4,a3)*step(e3,x_11)*step(x_11,e4),max(mix(v4,v5,a4)*step(e4,x_11)*step(x_11,e5),max(mix(v5,v6,a5)*step(e5,x_11)*step(x_11,e6),max(mix(v6,v7,a6)*step(e6,x_11)*step(x_11,e7),mix(v7,v8,a7)*step(e7,x_11)*step(x_11,e8))))))));}vec4 par(float x_28){const float e0=0.0;const vec4 v0=vec4(0.2,0.0784313725490196,0.09411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.35294117647058826,0.12549019607843137,0.13725490196078433,1);const float e2=0.25;const vec4 v2=vec4(0.5058823529411764,0.17254901960784313,0.13333333333333333,1);const float e3=0.38;const vec4 v3=vec4(0.6235294117647059,0.26666666666666666,0.09803921568627451,1);const float e4=0.5;const vec4 v4=vec4(0.7137254901960784,0.38823529411764707,0.07450980392156863,1);const float e5=0.63;const vec4 v5=vec4(0.7803921568627451,0.5254901960784314,0.08627450980392157,1);const float e6=0.75;const vec4 v6=vec4(0.8313725490196079,0.6705882352941176,0.13725490196078433,1);const float e7=0.88;const vec4 v7=vec4(0.8666666666666667,0.8235294117647058,0.21176470588235294,1);const float e8=1.0;const vec4 v8=vec4(0.8823529411764706,0.9921568627450981,0.29411764705882354,1);float a0=smoothstep(e0,e1,x_28);float a1=smoothstep(e1,e2,x_28);float a2=smoothstep(e2,e3,x_28);float a3=smoothstep(e3,e4,x_28);float a4=smoothstep(e4,e5,x_28);float a5=smoothstep(e5,e6,x_28);float a6=smoothstep(e6,e7,x_28);float a7=smoothstep(e7,e8,x_28);return max(mix(v0,v1,a0)*step(e0,x_28)*step(x_28,e1),max(mix(v1,v2,a1)*step(e1,x_28)*step(x_28,e2),max(mix(v2,v3,a2)*step(e2,x_28)*step(x_28,e3),max(mix(v3,v4,a3)*step(e3,x_28)*step(x_28,e4),max(mix(v4,v5,a4)*step(e4,x_28)*step(x_28,e5),max(mix(v5,v6,a5)*step(e5,x_28)*step(x_28,e6),max(mix(v6,v7,a6)*step(e6,x_28)*step(x_28,e7),mix(v7,v8,a7)*step(e7,x_28)*step(x_28,e8))))))));}vec4 phase(float x_39){const float e0=0.0;const vec4 v0=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.7215686274509804,0.2784313725490196,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.7294117647058823,0.22745098039215686,0.45098039215686275,1);const float e3=0.38;const vec4 v3=vec4(0.6274509803921569,0.2784313725490196,0.7254901960784313,1);const float e4=0.5;const vec4 v4=vec4(0.43137254901960786,0.3803921568627451,0.8549019607843137,1);const float e5=0.63;const vec4 v5=vec4(0.19607843137254902,0.4823529411764706,0.6431372549019608,1);const float e6=0.75;const vec4 v6=vec4(0.12156862745098039,0.5137254901960784,0.43137254901960786,1);const float e7=0.88;const vec4 v7=vec4(0.30196078431372547,0.5058823529411764,0.13333333333333333,1);const float e8=1.0;const vec4 v8=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);float a0=smoothstep(e0,e1,x_39);float a1=smoothstep(e1,e2,x_39);float a2=smoothstep(e2,e3,x_39);float a3=smoothstep(e3,e4,x_39);float a4=smoothstep(e4,e5,x_39);float a5=smoothstep(e5,e6,x_39);float a6=smoothstep(e6,e7,x_39);float a7=smoothstep(e7,e8,x_39);return max(mix(v0,v1,a0)*step(e0,x_39)*step(x_39,e1),max(mix(v1,v2,a1)*step(e1,x_39)*step(x_39,e2),max(mix(v2,v3,a2)*step(e2,x_39)*step(x_39,e3),max(mix(v3,v4,a3)*step(e3,x_39)*step(x_39,e4),max(mix(v4,v5,a4)*step(e4,x_39)*step(x_39,e5),max(mix(v5,v6,a5)*step(e5,x_39)*step(x_39,e6),max(mix(v6,v7,a6)*step(e6,x_39)*step(x_39,e7),mix(v7,v8,a7)*step(e7,x_39)*step(x_39,e8))))))));}vec4 salinity(float x_26){const float e0=0.0;const vec4 v0=vec4(0.16470588235294117,0.09411764705882353,0.4235294117647059,1);const float e1=0.13;const vec4 v1=vec4(0.12941176470588237,0.19607843137254902,0.6352941176470588,1);const float e2=0.25;const vec4 v2=vec4(0.058823529411764705,0.35294117647058826,0.5686274509803921,1);const float e3=0.38;const vec4 v3=vec4(0.1568627450980392,0.4627450980392157,0.5372549019607843,1);const float e4=0.5;const vec4 v4=vec4(0.23137254901960785,0.5725490196078431,0.5294117647058824,1);const float e5=0.63;const vec4 v5=vec4(0.30980392156862746,0.6862745098039216,0.49411764705882355,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.796078431372549,0.40784313725490196,1);const float e7=0.88;const vec4 v7=vec4(0.7568627450980392,0.8666666666666667,0.39215686274509803,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9372549019607843,0.6039215686274509,1);float a0=smoothstep(e0,e1,x_26);float a1=smoothstep(e1,e2,x_26);float a2=smoothstep(e2,e3,x_26);float a3=smoothstep(e3,e4,x_26);float a4=smoothstep(e4,e5,x_26);float a5=smoothstep(e5,e6,x_26);float a6=smoothstep(e6,e7,x_26);float a7=smoothstep(e7,e8,x_26);return max(mix(v0,v1,a0)*step(e0,x_26)*step(x_26,e1),max(mix(v1,v2,a1)*step(e1,x_26)*step(x_26,e2),max(mix(v2,v3,a2)*step(e2,x_26)*step(x_26,e3),max(mix(v3,v4,a3)*step(e3,x_26)*step(x_26,e4),max(mix(v4,v5,a4)*step(e4,x_26)*step(x_26,e5),max(mix(v5,v6,a5)*step(e5,x_26)*step(x_26,e6),max(mix(v6,v7,a6)*step(e6,x_26)*step(x_26,e7),mix(v7,v8,a7)*step(e7,x_26)*step(x_26,e8))))))));}vec4 temperature(float x_8){const float e0=0.0;const vec4 v0=vec4(0.01568627450980392,0.13725490196078433,0.2,1);const float e1=0.13;const vec4 v1=vec4(0.09019607843137255,0.2,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.23137254901960785,0.615686274509804,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.30980392156862746,0.5607843137254902,1);const float e4=0.5;const vec4 v4=vec4(0.6862745098039216,0.37254901960784315,0.5098039215686274,1);const float e5=0.63;const vec4 v5=vec4(0.8705882352941177,0.4392156862745098,0.396078431372549,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5725490196078431,0.25882352941176473,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7686274509803922,0.2549019607843137,1);const float e8=1.0;const vec4 v8=vec4(0.9098039215686274,0.9803921568627451,0.3568627450980392,1);float a0=smoothstep(e0,e1,x_8);float a1=smoothstep(e1,e2,x_8);float a2=smoothstep(e2,e3,x_8);float a3=smoothstep(e3,e4,x_8);float a4=smoothstep(e4,e5,x_8);float a5=smoothstep(e5,e6,x_8);float a6=smoothstep(e6,e7,x_8);float a7=smoothstep(e7,e8,x_8);return max(mix(v0,v1,a0)*step(e0,x_8)*step(x_8,e1),max(mix(v1,v2,a1)*step(e1,x_8)*step(x_8,e2),max(mix(v2,v3,a2)*step(e2,x_8)*step(x_8,e3),max(mix(v3,v4,a3)*step(e3,x_8)*step(x_8,e4),max(mix(v4,v5,a4)*step(e4,x_8)*step(x_8,e5),max(mix(v5,v6,a5)*step(e5,x_8)*step(x_8,e6),max(mix(v6,v7,a6)*step(e6,x_8)*step(x_8,e7),mix(v7,v8,a7)*step(e7,x_8)*step(x_8,e8))))))));}vec4 turbidity(float x_40){const float e0=0.0;const vec4 v0=vec4(0.13333333333333333,0.12156862745098039,0.10588235294117647,1);const float e1=0.13;const vec4 v1=vec4(0.2549019607843137,0.19607843137254902,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.27058823529411763,0.20392156862745098,1);const float e3=0.38;const vec4 v3=vec4(0.5137254901960784,0.34901960784313724,0.2235294117647059,1);const float e4=0.5;const vec4 v4=vec4(0.6313725490196078,0.4392156862745098,0.23137254901960785,1);const float e5=0.63;const vec4 v5=vec4(0.7254901960784313,0.5490196078431373,0.25882352941176473,1);const float e6=0.75;const vec4 v6=vec4(0.792156862745098,0.6823529411764706,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.8470588235294118,0.8196078431372549,0.49411764705882355,1);const float e8=1.0;const vec4 v8=vec4(0.9137254901960784,0.9647058823529412,0.6705882352941176,1);float a0=smoothstep(e0,e1,x_40);float a1=smoothstep(e1,e2,x_40);float a2=smoothstep(e2,e3,x_40);float a3=smoothstep(e3,e4,x_40);float a4=smoothstep(e4,e5,x_40);float a5=smoothstep(e5,e6,x_40);float a6=smoothstep(e6,e7,x_40);float a7=smoothstep(e7,e8,x_40);return max(mix(v0,v1,a0)*step(e0,x_40)*step(x_40,e1),max(mix(v1,v2,a1)*step(e1,x_40)*step(x_40,e2),max(mix(v2,v3,a2)*step(e2,x_40)*step(x_40,e3),max(mix(v3,v4,a3)*step(e3,x_40)*step(x_40,e4),max(mix(v4,v5,a4)*step(e4,x_40)*step(x_40,e5),max(mix(v5,v6,a5)*step(e5,x_40)*step(x_40,e6),max(mix(v6,v7,a6)*step(e6,x_40)*step(x_40,e7),mix(v7,v8,a7)*step(e7,x_40)*step(x_40,e8))))))));}vec4 velocity_blue_297387650(float x_2){const float e0=0.0;const vec4 v0=vec4(0.06666666666666667,0.12549019607843137,0.25098039215686274,1);const float e1=0.13;const vec4 v1=vec4(0.13725490196078433,0.20392156862745098,0.4549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.11372549019607843,0.3176470588235294,0.611764705882353,1);const float e3=0.38;const vec4 v3=vec4(0.12156862745098039,0.44313725490196076,0.6352941176470588,1);const float e4=0.5;const vec4 v4=vec4(0.19607843137254902,0.5647058823529412,0.6627450980392157,1);const float e5=0.63;const vec4 v5=vec4(0.3411764705882353,0.6784313725490196,0.6901960784313725,1);const float e6=0.75;const vec4 v6=vec4(0.5843137254901961,0.7686274509803922,0.7411764705882353,1);const float e7=0.88;const vec4 v7=vec4(0.796078431372549,0.8666666666666667,0.8274509803921568,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.984313725490196,0.9019607843137255,1);float a0=smoothstep(e0,e1,x_2);float a1=smoothstep(e1,e2,x_2);float a2=smoothstep(e2,e3,x_2);float a3=smoothstep(e3,e4,x_2);float a4=smoothstep(e4,e5,x_2);float a5=smoothstep(e5,e6,x_2);float a6=smoothstep(e6,e7,x_2);float a7=smoothstep(e7,e8,x_2);return max(mix(v0,v1,a0)*step(e0,x_2)*step(x_2,e1),max(mix(v1,v2,a1)*step(e1,x_2)*step(x_2,e2),max(mix(v2,v3,a2)*step(e2,x_2)*step(x_2,e3),max(mix(v3,v4,a3)*step(e3,x_2)*step(x_2,e4),max(mix(v4,v5,a4)*step(e4,x_2)*step(x_2,e5),max(mix(v5,v6,a5)*step(e5,x_2)*step(x_2,e6),max(mix(v6,v7,a6)*step(e6,x_2)*step(x_2,e7),mix(v7,v8,a7)*step(e7,x_2)*step(x_2,e8))))))));}vec4 velocity_green_2558432129(float x_27){const float e0=0.0;const vec4 v0=vec4(0.09019607843137255,0.13725490196078433,0.07450980392156863,1);const float e1=0.13;const vec4 v1=vec4(0.09411764705882353,0.25098039215686274,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.043137254901960784,0.37254901960784315,0.17647058823529413,1);const float e3=0.38;const vec4 v3=vec4(0.15294117647058825,0.4823529411764706,0.13725490196078433,1);const float e4=0.5;const vec4 v4=vec4(0.37254901960784315,0.5725490196078431,0.047058823529411764,1);const float e5=0.63;const vec4 v5=vec4(0.596078431372549,0.6470588235294118,0.07058823529411765,1);const float e6=0.75;const vec4 v6=vec4(0.788235294117647,0.7294117647058823,0.27058823529411763,1);const float e7=0.88;const vec4 v7=vec4(0.9137254901960784,0.8470588235294118,0.5372549019607843,1);const float e8=1.0;const vec4 v8=vec4(1,0.9921568627450981,0.803921568627451,1);float a0=smoothstep(e0,e1,x_27);float a1=smoothstep(e1,e2,x_27);float a2=smoothstep(e2,e3,x_27);float a3=smoothstep(e3,e4,x_27);float a4=smoothstep(e4,e5,x_27);float a5=smoothstep(e5,e6,x_27);float a6=smoothstep(e6,e7,x_27);float a7=smoothstep(e7,e8,x_27);return max(mix(v0,v1,a0)*step(e0,x_27)*step(x_27,e1),max(mix(v1,v2,a1)*step(e1,x_27)*step(x_27,e2),max(mix(v2,v3,a2)*step(e2,x_27)*step(x_27,e3),max(mix(v3,v4,a3)*step(e3,x_27)*step(x_27,e4),max(mix(v4,v5,a4)*step(e4,x_27)*step(x_27,e5),max(mix(v5,v6,a5)*step(e5,x_27)*step(x_27,e6),max(mix(v6,v7,a6)*step(e6,x_27)*step(x_27,e7),mix(v7,v8,a7)*step(e7,x_27)*step(x_27,e8))))))));}vec4 cubehelix(float x_37){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.07;const vec4 v1=vec4(0.08627450980392157,0.0196078431372549,0.23137254901960785,1);const float e2=0.13;const vec4 v2=vec4(0.23529411764705882,0.01568627450980392,0.4117647058823529,1);const float e3=0.2;const vec4 v3=vec4(0.42745098039215684,0.00392156862745098,0.5294117647058824,1);const float e4=0.27;const vec4 v4=vec4(0.6313725490196078,0,0.5764705882352941,1);const float e5=0.33;const vec4 v5=vec4(0.8235294117647058,0.00784313725490196,0.5568627450980392,1);const float e6=0.4;const vec4 v6=vec4(0.984313725490196,0.043137254901960784,0.4823529411764706,1);const float e7=0.47;const vec4 v7=vec4(1,0.11372549019607843,0.3803921568627451,1);const float e8=0.53;const vec4 v8=vec4(1,0.21176470588235294,0.27058823529411763,1);const float e9=0.6;const vec4 v9=vec4(1,0.3333333333333333,0.1803921568627451,1);const float e10=0.67;const vec4 v10=vec4(1,0.47058823529411764,0.13333333333333333,1);const float e11=0.73;const vec4 v11=vec4(1,0.615686274509804,0.1450980392156863,1);const float e12=0.8;const vec4 v12=vec4(0.9450980392156862,0.7490196078431373,0.2235294117647059,1);const float e13=0.87;const vec4 v13=vec4(0.8784313725490196,0.8627450980392157,0.36470588235294116,1);const float e14=0.93;const vec4 v14=vec4(0.8549019607843137,0.9450980392156862,0.5568627450980392,1);const float e15=1.0;const vec4 v15=vec4(0.8901960784313725,0.9921568627450981,0.7764705882352941,1);float a0=smoothstep(e0,e1,x_37);float a1=smoothstep(e1,e2,x_37);float a2=smoothstep(e2,e3,x_37);float a3=smoothstep(e3,e4,x_37);float a4=smoothstep(e4,e5,x_37);float a5=smoothstep(e5,e6,x_37);float a6=smoothstep(e6,e7,x_37);float a7=smoothstep(e7,e8,x_37);float a8=smoothstep(e8,e9,x_37);float a9=smoothstep(e9,e10,x_37);float a10=smoothstep(e10,e11,x_37);float a11=smoothstep(e11,e12,x_37);float a12=smoothstep(e12,e13,x_37);float a13=smoothstep(e13,e14,x_37);float a14=smoothstep(e14,e15,x_37);return max(mix(v0,v1,a0)*step(e0,x_37)*step(x_37,e1),max(mix(v1,v2,a1)*step(e1,x_37)*step(x_37,e2),max(mix(v2,v3,a2)*step(e2,x_37)*step(x_37,e3),max(mix(v3,v4,a3)*step(e3,x_37)*step(x_37,e4),max(mix(v4,v5,a4)*step(e4,x_37)*step(x_37,e5),max(mix(v5,v6,a5)*step(e5,x_37)*step(x_37,e6),max(mix(v6,v7,a6)*step(e6,x_37)*step(x_37,e7),max(mix(v7,v8,a7)*step(e7,x_37)*step(x_37,e8),max(mix(v8,v9,a8)*step(e8,x_37)*step(x_37,e9),max(mix(v9,v10,a9)*step(e9,x_37)*step(x_37,e10),max(mix(v10,v11,a10)*step(e10,x_37)*step(x_37,e11),max(mix(v11,v12,a11)*step(e11,x_37)*step(x_37,e12),max(mix(v12,v13,a12)*step(e12,x_37)*step(x_37,e13),max(mix(v13,v14,a13)*step(e13,x_37)*step(x_37,e14),mix(v14,v15,a14)*step(e14,x_37)*step(x_37,e15)))))))))))))));}vec4 apply_transparent_color_452471729(vec3 color,vec3 transparentColor,bool useTransparentColor,float opacity){return vec4(color,(color==transparentColor&&useTransparentColor)? 0. : opacity);}vec4 colormap(float intensity,float opacity){return vec4(COLORMAP_FUNCTION(min(1.,intensity)).xyz,opacity);}";// eslint-disable-line
var additiveColormap={name:'additive-colormap',fs:fs$2};var defaultProps$6={colormap:{type:'string',value:'viridis',compare:true}};function removeExtraColormapFunctionsFromShader(colormap){// Always include viridis so shaders compile,
// but otherwise we discard all other colormaps via a regex.
// With all the colormaps, the shaders were too large
// and crashed our computers when we loaded volumes too large.
var discardColormaps=COLORMAPS.filter(function(i){return i!==(colormap||'viridis');}).map(function(i){return i.replace(/-/g,'_');});var discardRegex=new RegExp("vec4 (".concat(discardColormaps.join('(_([0-9]*))?|'),")\\(float x_[0-9]+\\){([^}]+)}"),'g');var channelsModules=_objectSpread(_objectSpread({},additiveColormap),{},{fs:additiveColormap.fs.replace(discardRegex,''),defines:{COLORMAP_FUNCTION:colormap||defaultProps$6.colormap.value}});return channelsModules;}/**
 * This deck.gl extension allows for an additive colormap like viridis or jet to be used for pseudo-coloring channels in 3D.
 * @typedef LayerProps
 * @type {object}
 * @property {string=} colormap String indicating a colormap (default: 'viridis').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
 * */var BaseExtension=/*#__PURE__*/function(_LayerExtension5){(0,_inherits2["default"])(BaseExtension,_LayerExtension5);var _super12=_createSuper(BaseExtension);function BaseExtension(){(0,_classCallCheck2["default"])(this,BaseExtension);return _super12.apply(this,arguments);}(0,_createClass2["default"])(BaseExtension,[{key:"getShaders",value:function getShaders(){var _this$props10;return _objectSpread(_objectSpread({},(0,_get2["default"])((0,_getPrototypeOf2["default"])(BaseExtension.prototype),"getShaders",this).call(this)),{},{modules:[removeExtraColormapFunctionsFromShader((this===null||this===void 0?void 0:(_this$props10=this.props)===null||_this$props10===void 0?void 0:_this$props10.colormap)||defaultProps$6.colormap.value)]});}},{key:"updateState",value:function updateState(_ref7){var props=_ref7.props,oldProps=_ref7.oldProps,changeFlags=_ref7.changeFlags,rest=(0,_objectWithoutProperties2["default"])(_ref7,_excluded3);(0,_get2["default"])((0,_getPrototypeOf2["default"])(BaseExtension.prototype),"updateState",this).call(this,_objectSpread({props:props,oldProps:oldProps,changeFlags:changeFlags},rest));if(props.colormap!==oldProps.colormap){var gl=this.context.gl;if(this.state.model){this.state.model["delete"]();this.setState({model:this._getModel(gl)});}}}}]);return BaseExtension;}(_core.LayerExtension);BaseExtension.extensionName='BaseExtension';BaseExtension.defaultProps=defaultProps$6;var RENDERING_MODES_COLORMAP=(_RENDERING_MODES_COLO={},(0,_defineProperty2["default"])(_RENDERING_MODES_COLO,RENDERING_MODES.MAX_INTENSITY_PROJECTION,{_BEFORE_RENDER:"      float maxVals[6] = float[6](-1.0, -1.0, -1.0, -1.0, -1.0, -1.0);\n    ",_RENDER:"    \n      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);\n\n      for(int i = 0; i < 6; i++) {\n        if(intensityArray[i] > maxVals[i]) {\n          maxVals[i] = intensityArray[i];\n        }\n      }\n    ",_AFTER_RENDER:"      float total = 0.0;\n      for(int i = 0; i < 6; i++) {\n        total += maxVals[i];\n      }\n      // Do not go past 1 in opacity/colormap value.\n      total = min(total, 1.0);\n      color = colormap(total, total);\n    "}),(0,_defineProperty2["default"])(_RENDERING_MODES_COLO,RENDERING_MODES.MIN_INTENSITY_PROJECTION,{_BEFORE_RENDER:"      float minVals[6] = float[6](1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0.);\n    ",_RENDER:"    \n      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);\n\n      for(int i = 0; i < 6; i++) {\n        if(intensityArray[i] < minVals[i]) {\n          minVals[i] = intensityArray[i];\n        }\n      }\n    ",_AFTER_RENDER:"      float total = 0.0;\n      for(int i = 0; i < 6; i++) {\n        total += minVals[i];\n      }\n      // Do not go past 1 in opacity/colormap value.\n      total = min(total, 1.0);\n      color = colormap(total, total);\n    "}),(0,_defineProperty2["default"])(_RENDERING_MODES_COLO,RENDERING_MODES.ADDITIVE,{_BEFORE_RENDER:"",_RENDER:"    float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);\n\t\tfloat total = 0.0;\n\n\t\tfor(int i = 0; i < 6; i++) {\n\t\t\ttotal += intensityArray[i];\n\t\t}\n\t\t// Do not go past 1 in opacity/colormap value.\n\t\ttotal = min(total, 1.0);\n\n\t\tvec4 val_color = colormap(total, total);\n\n\t\t// Opacity correction\n\t\tval_color.a = 1.0 - pow(1.0 - val_color.a, 1.0);\n\t\tcolor.rgb += (1.0 - color.a) * val_color.a * val_color.rgb;\n\t\tcolor.a += (1.0 - color.a) * val_color.a;\n\t\tif (color.a >= 0.95) {\n\t\t\tbreak;\n\t\t}\n    p += ray_dir * dt;\n    ",_AFTER_RENDER:""}),_RENDERING_MODES_COLO);/**
 * This deck.gl extension allows for an additive colormap like viridis or jet to be used for pseudo-coloring channels with Additive Blending in 3D.
 * */var AdditiveBlendExtension=/*#__PURE__*/function(_BaseExtension){(0,_inherits2["default"])(AdditiveBlendExtension,_BaseExtension);var _super13=_createSuper(AdditiveBlendExtension);function AdditiveBlendExtension(args){var _this6;(0,_classCallCheck2["default"])(this,AdditiveBlendExtension);_this6=_super13.call(this,args);_this6.opts.rendering=RENDERING_MODES_COLORMAP[RENDERING_MODES.ADDITIVE];return _this6;}return(0,_createClass2["default"])(AdditiveBlendExtension);}(BaseExtension);AdditiveBlendExtension.extensionName='AdditiveBlendExtension';/**
 * This deck.gl extension allows for an additive colormap like viridis or jet to be used for pseudo-coloring channels with Maximum Intensity Projection in 3D.
 * */var MaximumIntensityProjectionExtension=/*#__PURE__*/function(_BaseExtension2){(0,_inherits2["default"])(MaximumIntensityProjectionExtension,_BaseExtension2);var _super14=_createSuper(MaximumIntensityProjectionExtension);function MaximumIntensityProjectionExtension(args){var _this7;(0,_classCallCheck2["default"])(this,MaximumIntensityProjectionExtension);_this7=_super14.call(this,args);_this7.opts.rendering=RENDERING_MODES_COLORMAP[RENDERING_MODES.MAX_INTENSITY_PROJECTION];return _this7;}return(0,_createClass2["default"])(MaximumIntensityProjectionExtension);}(BaseExtension);MaximumIntensityProjectionExtension.extensionName='MaximumIntensityProjectionExtension';/**
 * This deck.gl extension allows for an additive colormap like viridis or jet to be used for pseudo-coloring channels with Minimum Intensity Projection in 3D.
 */var MinimumIntensityProjectionExtension=/*#__PURE__*/function(_BaseExtension3){(0,_inherits2["default"])(MinimumIntensityProjectionExtension,_BaseExtension3);var _super15=_createSuper(MinimumIntensityProjectionExtension);function MinimumIntensityProjectionExtension(args){var _this8;(0,_classCallCheck2["default"])(this,MinimumIntensityProjectionExtension);_this8=_super15.call(this,args);_this8.opts.rendering=RENDERING_MODES_COLORMAP[RENDERING_MODES.MIN_INTENSITY_PROJECTION];return _this8;}return(0,_createClass2["default"])(MinimumIntensityProjectionExtension);}(BaseExtension);MinimumIntensityProjectionExtension.extensionName='MinimumIntensityProjectionExtension';/**
 * This object contains the BaseExtension, which can be extended for other additive colormap-style (i.e viridis, jet etc.) rendering, as well
 * implementations of three ray casting algorithms as extensions.
 * @typedef Extension3D
 * @type {object}
 * @property {object} BaseExtension
 * @property {object} AdditiveBlendExtension
 * @property {object} MaximumIntensityProjectionExtension
 * @property {object} MinimumIntensityProjectionExtension
 */var AdditiveColormap3DExtensions={BaseExtension:BaseExtension,AdditiveBlendExtension:AdditiveBlendExtension,MaximumIntensityProjectionExtension:MaximumIntensityProjectionExtension,MinimumIntensityProjectionExtension:MinimumIntensityProjectionExtension};exports.AdditiveColormap3DExtensions=AdditiveColormap3DExtensions;var defaultProps$5={pickable:{type:'boolean',value:true,compare:true},coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,contrastLimits:{type:'array',value:[],compare:true},channelsVisible:{type:'array',value:[],compare:true},selections:{type:'array',value:[],compare:true},domain:{type:'array',value:[],compare:true},viewportId:{type:'string',value:'',compare:true},loader:{type:'object',value:{getRaster:function(){var _getRaster=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(){return _regenerator["default"].wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt("return",{data:[],height:0,width:0});case 1:case"end":return _context.stop();}}},_callee);}));function getRaster(){return _getRaster.apply(this,arguments);}return getRaster;}(),dtype:'Uint16'},compare:true},onClick:{type:'function',value:null,compare:true},onViewportLoad:{type:'function',value:null,compare:true},interpolation:{type:'number',value:_constants["default"].NEAREST,compare:true},extensions:{type:'array',value:[new ColorPaletteExtension()],compare:true}};/**
 * @typedef LayerProps
 * @type {Object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {Object} loader PixelSource. Represents an N-dimensional image.
 * @property {Array} selections Selection to be used for fetching data.
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {string=} viewportId Id for the current view.  This needs to match the viewState id in deck.gl and is necessary for the lens.
 * @property {function=} onHover Hook function from deck.gl to handle hover objects.
 * @property {function=} onClick Hook function from deck.gl to handle clicked-on objects.
 * @property {Object=} modelMatrix Math.gl Matrix4 object containing an affine transformation to be applied to the image.
 * @property {function=} onViewportLoad Function that gets called when the data in the viewport loads.
 * @property {String=} id Unique identifier for this layer.
 * @property {Array=} extensions [deck.gl extensions](https://deck.gl/docs/developer-guide/custom-layers/layer-extensions) to add to the layers.
 */ /**
 * @type {{ new <S extends string[]>(...props: import('../types').Viv<LayerProps, S>[]) }}
 * @ignore
 */var ImageLayer=/*#__PURE__*/function(_CompositeLayer2){(0,_inherits2["default"])(ImageLayer,_CompositeLayer2);var _super16=_createSuper(ImageLayer);function ImageLayer(){(0,_classCallCheck2["default"])(this,ImageLayer);return _super16.apply(this,arguments);}(0,_createClass2["default"])(ImageLayer,[{key:"finalizeState",value:function finalizeState(){this.state.abortController.abort();}},{key:"updateState",value:function updateState(_ref8){var _this9=this;var props=_ref8.props,oldProps=_ref8.oldProps;var loaderChanged=props.loader!==oldProps.loader;var selectionsChanged=props.selections!==oldProps.selections;if(loaderChanged||selectionsChanged){// Only fetch new data to render if loader has changed
var _this$props11=this.props,loader=_this$props11.loader,_this$props11$selecti=_this$props11.selections,selections=_this$props11$selecti===void 0?[]:_this$props11$selecti,onViewportLoad=_this$props11.onViewportLoad;var abortController=new AbortController();this.setState({abortController:abortController});var signal=abortController.signal;var getRaster=function getRaster(selection){return loader.getRaster({selection:selection,signal:signal});};var dataPromises=selections.map(getRaster);Promise.all(dataPromises).then(function(rasters){var raster={data:rasters.map(function(d){return d.data;}),width:rasters[0].width,height:rasters[0].height};if(isInterleaved(loader.shape)){// data is for BitmapLayer and needs to be of form { data: Uint8Array, width, height };
// eslint-disable-next-line prefer-destructuring
raster.data=raster.data[0];if(raster.data.length===raster.width*raster.height*3){// data is RGB (not RGBA) and need to update texture formats
raster.format=_constants["default"].RGB;raster.dataFormat=_constants["default"].RGB;}}if(onViewportLoad){onViewportLoad(raster);}_this9.setState(_objectSpread({},raster));})["catch"](function(e){if(e!==SIGNAL_ABORTED){throw e;// re-throws error if not our signal
}});}}// eslint-disable-next-line class-methods-use-this
},{key:"getPickingInfo",value:function getPickingInfo(_ref9){var info=_ref9.info,sourceLayer=_ref9.sourceLayer;// eslint-disable-next-line no-param-reassign
info.sourceLayer=sourceLayer;// eslint-disable-next-line no-param-reassign
info.tile=sourceLayer.props.tile;return info;}},{key:"renderLayers",value:function renderLayers(){var _this$props12=this.props,loader=_this$props12.loader,id=_this$props12.id;var dtype=loader.dtype;var _this$state5=this.state,width=_this$state5.width,height=_this$state5.height,data=_this$state5.data;if(!(width&&height))return null;var bounds=[0,height,width,0];if(isInterleaved(loader.shape)){var _loader$meta$photomet=loader.meta.photometricInterpretation,photometricInterpretation=_loader$meta$photomet===void 0?2:_loader$meta$photomet;return new BitmapLayer(this.props,{image:this.state,photometricInterpretation:photometricInterpretation,// Shared props with XRLayer:
bounds:bounds,id:"image-sub-layer-".concat(bounds,"-").concat(id),extensions:[]});}return new XRLayer(this.props,{channelData:{data:data,height:height,width:width},// Shared props with BitmapLayer:
bounds:bounds,id:"image-sub-layer-".concat(bounds,"-").concat(id),dtype:dtype});}}]);return ImageLayer;}(_core.CompositeLayer);exports.ImageLayer=ImageLayer;ImageLayer.layerName='ImageLayer';ImageLayer.defaultProps=defaultProps$5;var defaultProps$4={pickable:{type:'boolean',value:true,compare:true},onHover:{type:'function',value:null,compare:false},contrastLimits:{type:'array',value:[],compare:true},channelsVisible:{type:'array',value:[],compare:true},domain:{type:'array',value:[],compare:true},viewportId:{type:'string',value:'',compare:true},maxRequests:{type:'number',value:10,compare:true},onClick:{type:'function',value:null,compare:true},refinementStrategy:{type:'string',value:null,compare:true},excludeBackground:{type:'boolean',value:false,compare:true},extensions:{type:'array',value:[new ColorPaletteExtension()],compare:true}};/**
 * @typedef LayerProps
 * @type {object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {Array} loader Image pyramid. PixelSource[], where each PixelSource is decreasing in shape.
 * @property {Array} selections Selection to be used for fetching data.
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {string=} viewportId Id for the current view.  This needs to match the viewState id in deck.gl and is necessary for the lens.
 * @property {String=} id Unique identifier for this layer.
 * @property {function=} onTileError Custom override for handle tile fetching errors.
 * @property {function=} onHover Hook function from deck.gl to handle hover objects.
 * @property {number=} maxRequests Maximum parallel ongoing requests allowed before aborting.
 * @property {function=} onClick Hook function from deck.gl to handle clicked-on objects.
 * @property {Object=} modelMatrix Math.gl Matrix4 object containing an affine transformation to be applied to the image.
 * @property {string=} refinementStrategy 'best-available' | 'no-overlap' | 'never' will be passed to TileLayer. A default will be chosen based on opacity.
 * @property {boolean=} excludeBackground Whether to exclude the background image. The background image is also excluded for opacity!=1.
 * @property {Array=} extensions [deck.gl extensions](https://deck.gl/docs/developer-guide/custom-layers/layer-extensions) to add to the layers.
 */ /**
 * @type {{ new <S extends string[]>(...props: import('../../types').Viv<LayerProps, S>[]) }}
 * @ignore
 */var MultiscaleImageLayer=/*#__PURE__*/function(_CompositeLayer3){(0,_inherits2["default"])(MultiscaleImageLayer,_CompositeLayer3);var _super17=_createSuper(MultiscaleImageLayer);function MultiscaleImageLayer(){(0,_classCallCheck2["default"])(this,MultiscaleImageLayer);return _super17.apply(this,arguments);}(0,_createClass2["default"])(MultiscaleImageLayer,[{key:"renderLayers",value:function renderLayers(){var _this$props13=this.props,loader=_this$props13.loader,selections=_this$props13.selections,opacity=_this$props13.opacity,viewportId=_this$props13.viewportId,onTileError=_this$props13.onTileError,onHover=_this$props13.onHover,id=_this$props13.id,onClick=_this$props13.onClick,modelMatrix=_this$props13.modelMatrix,excludeBackground=_this$props13.excludeBackground,refinementStrategy=_this$props13.refinementStrategy;// Get properties from highest resolution
var _loader$=loader[0],tileSize=_loader$.tileSize,dtype=_loader$.dtype;// This is basically to invert:
// https://github.com/visgl/deck.gl/pull/4616/files#diff-4d6a2e500c0e79e12e562c4f1217dc80R128
// The z level can be wrong for showing the correct scales because of the calculation deck.gl does
// so we need to invert it for fetching tiles and minZoom/maxZoom.
var getTileData=/*#__PURE__*/function(){var _ref11=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee2(_ref10){var x,y,z,signal,resolution,getTile,tiles,tile;return _regenerator["default"].wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:x=_ref10.x,y=_ref10.y,z=_ref10.z,signal=_ref10.signal;if(!(!selections||selections.length===0)){_context2.next=3;break;}return _context2.abrupt("return",null);case 3:// I don't fully undertstand why this works, but I have a sense.
// It's basically to cancel out:
// https://github.com/visgl/deck.gl/pull/4616/files#diff-4d6a2e500c0e79e12e562c4f1217dc80R128,
// which felt odd to me to beign with.
// The image-tile example works without, this but I have a feeling there is something
// going on with our pyramids and/or rendering that is different.
resolution=Math.round(-z);getTile=function getTile(selection){var config={x:x,y:y,selection:selection,signal:signal};return loader[resolution].getTile(config);};_context2.prev=5;_context2.next=8;return Promise.all(selections.map(getTile));case 8:tiles=_context2.sent;tile={data:tiles.map(function(d){return d.data;}),width:tiles[0].width,height:tiles[0].height};if(!isInterleaved(loader[resolution].shape)){_context2.next=14;break;}// eslint-disable-next-line prefer-destructuring
tile.data=tile.data[0];if(tile.data.length===tile.width*tile.height*3){tile.format=_constants["default"].RGB;tile.dataFormat=_constants["default"].RGB;// is this not properly inferred?
}// can just return early, no need  to check for webgl2
return _context2.abrupt("return",tile);case 14:return _context2.abrupt("return",tile);case 17:_context2.prev=17;_context2.t0=_context2["catch"](5);if(!(_context2.t0===SIGNAL_ABORTED)){_context2.next=21;break;}return _context2.abrupt("return",null);case 21:throw _context2.t0;case 22:case"end":return _context2.stop();}}},_callee2,null,[[5,17]]);}));return function getTileData(_x){return _ref11.apply(this,arguments);};}();var _getImageSize2=getImageSize(loader[0]),height=_getImageSize2.height,width=_getImageSize2.width;var tiledLayer=new MultiscaleImageLayerBase(this.props,{id:"Tiled-Image-".concat(id),getTileData:getTileData,dtype:dtype,tileSize:tileSize,// If you scale a matrix up or down, that is like zooming in or out.  zoomOffset controls
// how the zoom level you fetch tiles at is offset, allowing us to fetch higher resolution tiles
// while at a lower "absolute" zoom level.  If you didn't use this prop, an image that is scaled
// up would always look "low resolution" no matter the level of the image pyramid you are looking at.
zoomOffset:Math.round(Math.log2(modelMatrix?modelMatrix.getScale()[0]:1)),extent:[0,0,width,height],// See the above note within for why the use of zoomOffset and the rounding necessary.
minZoom:Math.round(-(loader.length-1)),maxZoom:0,// We want a no-overlap caching strategy with an opacity < 1 to prevent
// multiple rendered sublayers (some of which have been cached) from overlapping
refinementStrategy:refinementStrategy||(opacity===1?'best-available':'no-overlap'),// TileLayer checks `changeFlags.updateTriggersChanged.getTileData` to see if tile cache
// needs to be re-created. We want to trigger this behavior if the loader changes.
// https://github.com/uber/deck.gl/blob/3f67ea6dfd09a4d74122f93903cb6b819dd88d52/modules/geo-layers/src/tile-layer/tile-layer.js#L50
updateTriggers:{getTileData:[loader,selections]},onTileError:onTileError||loader[0].onTileError});// This gives us a background image and also solves the current
// minZoom funny business.  We don't use it for the background if we have an opacity
// paramteter set to anything but 1, but we always use it for situations where
// we are zoomed out too far.
var lowestResolution=loader[loader.length-1];var implementsGetRaster=typeof lowestResolution.getRaster==='function';var layerModelMatrix=modelMatrix?modelMatrix.clone():new _math.Matrix4();var baseLayer=implementsGetRaster&&!excludeBackground&&new ImageLayer(this.props,{id:"Background-Image-".concat(id),loader:lowestResolution,modelMatrix:layerModelMatrix.scale(Math.pow(2,loader.length-1)),visible:!viewportId||this.context.viewport.id===viewportId,onHover:onHover,onClick:onClick,// Background image is nicest when LINEAR in my opinion.
interpolation:_constants["default"].LINEAR,onViewportLoad:null});var layers=[baseLayer,tiledLayer];return layers;}}]);return MultiscaleImageLayer;}(_core.CompositeLayer);exports.MultiscaleImageLayer=MultiscaleImageLayer;MultiscaleImageLayer.layerName='MultiscaleImageLayer';MultiscaleImageLayer.defaultProps=defaultProps$4;var defaultProps$3={pickable:{type:'boolean',value:true,compare:true},loader:{type:'object',value:{getRaster:function(){var _getRaster2=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee3(){return _regenerator["default"].wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt("return",{data:[],height:0,width:0});case 1:case"end":return _context3.stop();}}},_callee3);}));function getRaster(){return _getRaster2.apply(this,arguments);}return getRaster;}(),getRasterSize:function getRasterSize(){return{height:0,width:0};},dtype:'<u2'},compare:true},id:{type:'string',value:'',compare:true},boundingBox:{type:'array',value:[[0,0],[0,1],[1,1],[1,0]],compare:true},boundingBoxColor:{type:'array',value:[255,0,0],compare:true},boundingBoxOutlineWidth:{type:'number',value:1,compare:true},viewportOutlineColor:{type:'array',value:[255,190,0],compare:true},viewportOutlineWidth:{type:'number',value:2,compare:true},overviewScale:{type:'number',value:1,compare:true},zoom:{type:'number',value:1,compare:true}};/**
 * @typedef LayerProps
 * @type {Object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<Array.<number>>} colors List of [r, g, b] values for each channel.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {Array} loader PixelSource[]. Assumes multiscale if loader.length > 1.
 * @property {Array} selections Selection to be used for fetching data.
 * @property {number=} opacity Opacity of the layer.
 * @property {string=} colormap String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {Array.<number>=} boundingBoxColor [r, g, b] color of the bounding box (default: [255, 0, 0]).
 * @property {number=} boundingBoxOutlineWidth Width of the bounding box in px (default: 1).
 * @property {Array.<number>=} viewportOutlineColor [r, g, b] color of the outline (default: [255, 190, 0]).
 * @property {number=} viewportOutlineWidth Viewport outline width in px (default: 2).
 * @property {String=} id Unique identifier for this layer.
 */ /**
 * @type {{ new <S extends string[]>(...props: import('../types').Viv<LayerProps, S>[]) }}
 * @ignore
 */var OverviewLayer=/*#__PURE__*/function(_CompositeLayer4){(0,_inherits2["default"])(OverviewLayer,_CompositeLayer4);var _super18=_createSuper(OverviewLayer);function OverviewLayer(){(0,_classCallCheck2["default"])(this,OverviewLayer);return _super18.apply(this,arguments);}(0,_createClass2["default"])(OverviewLayer,[{key:"renderLayers",value:function renderLayers(){var _this$props14=this.props,loader=_this$props14.loader,id=_this$props14.id,zoom=_this$props14.zoom,boundingBox=_this$props14.boundingBox,boundingBoxColor=_this$props14.boundingBoxColor,boundingBoxOutlineWidth=_this$props14.boundingBoxOutlineWidth,viewportOutlineColor=_this$props14.viewportOutlineColor,viewportOutlineWidth=_this$props14.viewportOutlineWidth,overviewScale=_this$props14.overviewScale;var _getImageSize3=getImageSize(loader[0]),width=_getImageSize3.width,height=_getImageSize3.height;var z=loader.length-1;var lowestResolution=loader[z];var overview=new ImageLayer(this.props,{id:"viewport-".concat(id),modelMatrix:new _math.Matrix4().scale(Math.pow(2,z)*overviewScale),loader:lowestResolution});var boundingBoxOutline=new _layers.PolygonLayer({id:"bounding-box-overview-".concat(id),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[boundingBox],getPolygon:function getPolygon(f){return f;},filled:false,stroked:true,getLineColor:boundingBoxColor,getLineWidth:boundingBoxOutlineWidth*Math.pow(2,zoom)});var viewportOutline=new _layers.PolygonLayer({id:"viewport-outline-".concat(id),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[[[0,0],[width*overviewScale,0],[width*overviewScale,height*overviewScale],[0,height*overviewScale]]],getPolygon:function getPolygon(f){return f;},filled:false,stroked:true,getLineColor:viewportOutlineColor,getLineWidth:viewportOutlineWidth*Math.pow(2,zoom)});var layers=[overview,boundingBoxOutline,viewportOutline];return layers;}}]);return OverviewLayer;}(_core.CompositeLayer);exports.OverviewLayer=OverviewLayer;OverviewLayer.layerName='OverviewLayer';OverviewLayer.defaultProps=defaultProps$3;function getVivId(id){return"-#".concat(id,"#");}/**
 * Create a boudning box from a viewport based on passed-in viewState.
 * @param {viewState} Object The viewState for a certain viewport.
 * @returns {View} The DeckGL View for this viewport.
 */function makeBoundingBox(viewState){var viewport=new _core.OrthographicView().makeViewport({// From the current `detail` viewState, we need its projection matrix (actually the inverse).
viewState:viewState,height:viewState.height,width:viewState.width});// Use the inverse of the projection matrix to map screen to the view space.
return[viewport.unproject([0,0]),viewport.unproject([viewport.width,0]),viewport.unproject([viewport.width,viewport.height]),viewport.unproject([0,viewport.height])];}/**
 * Create an initial view state that centers the image in the viewport at the zoom level that fills the dimensions in `viewSize`.
 * @param {Object} loader (PixelSource[] | PixelSource)
 * @param {Object} viewSize { height, width } object giving dimensions of the viewport for deducing the right zoom level to center the image.
 * @param {Object=} zoomBackOff A positive number which controls how far zoomed out the view state is from filling the entire viewport (default is 0 so the image fully fills the view).
 * SideBySideViewer and PictureInPictureViewer use .5 when setting viewState automatically in their default behavior, so the viewport is slightly zoomed out from the image
 * filling the whole screen.  1 unit of zoomBackOff (so a passed-in value of 1) corresponds to a 2x zooming out.
 * @param {Boolean=} use3d Whether or not to return a view state that can be used with the 3d viewer
 * @param {Boolean=} modelMatrix If using a transformation matrix, passing it in here will allow this function to properly center the volume.
 * @returns {Object} A default initial view state that centers the image within the view: { target: [x, y, 0], zoom: -zoom }.
 */function getDefaultInitialViewState(loader,viewSize){var zoomBackOff=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var use3d=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var modelMatrix=arguments.length>4?arguments[4]:undefined;var source=Array.isArray(loader)?loader[0]:loader;var _getImageSize4=getImageSize(source),width=_getImageSize4.width,height=_getImageSize4.height;var depth=source.shape[source.labels.indexOf('z')];var zoom=Math.log2(Math.min(viewSize.width/width,viewSize.height/height))-zoomBackOff;var physicalSizeScalingMatrix=getPhysicalSizeScalingMatrix(source);var loaderInitialViewState={target:(modelMatrix||new _math.Matrix4()).transformPoint((use3d?physicalSizeScalingMatrix:new _math.Matrix4()).transformPoint([width/2,height/2,use3d?depth/2:0])),zoom:zoom};return loaderInitialViewState;}/**
 * Creates the layers for viewing an image in detail.
 * @param {String} id The identifier of the view.
 * @param {Object} props The layer properties.
 * @returns {Array} An array of layers.
 */function getImageLayer(id,props){var _loader$2,_loader$2$constructor;var loader=props.loader;// Grab name of PixelSource if a class instance (works for Tiff & Zarr).
var sourceName=(_loader$2=loader[0])===null||_loader$2===void 0?void 0:(_loader$2$constructor=_loader$2.constructor)===null||_loader$2$constructor===void 0?void 0:_loader$2$constructor.name;// Create at least one layer even without selections so that the tests pass.
var Layer=loader.length>1?MultiscaleImageLayer:ImageLayer;var layerLoader=loader.length>1?loader:loader[0];return new Layer(_objectSpread(_objectSpread({},props),{},{id:"".concat(sourceName).concat(getVivId(id)),viewportId:id,loader:layerLoader}));}function getPosition(boundingBox,position,length){var viewLength=boundingBox[2][0]-boundingBox[0][0];switch(position){case'bottom-right':{var yCoord=boundingBox[2][1]-(boundingBox[2][1]-boundingBox[0][1])*length;var xLeftCoord=boundingBox[2][0]-viewLength*length;return[yCoord,xLeftCoord];}case'top-right':{var _yCoord=(boundingBox[2][1]-boundingBox[0][1])*length;var _xLeftCoord=boundingBox[2][0]-viewLength*length;return[_yCoord,_xLeftCoord];}case'top-left':{var _yCoord2=(boundingBox[2][1]-boundingBox[0][1])*length;var _xLeftCoord2=viewLength*length;return[_yCoord2,_xLeftCoord2];}case'bottom-left':{var _yCoord3=boundingBox[2][1]-(boundingBox[2][1]-boundingBox[0][1])*length;var _xLeftCoord3=viewLength*length;return[_yCoord3,_xLeftCoord3];}default:{throw new Error("Position ".concat(position," not found"));}}}var defaultProps$2={pickable:{type:'boolean',value:true,compare:true},viewState:{type:'object',value:{zoom:0,target:[0,0,0]},compare:true},unit:{type:'string',value:'',compare:true},size:{type:'number',value:1,compare:true},position:{type:'string',value:'bottom-right',compare:true},length:{type:'number',value:0.085,compare:true}};/**
 * @typedef LayerProps
 * @type {Object}
 * @property {String} unit Physical unit size per pixel at full resolution.
 * @property {Number} size Physical size of a pixel.
 * @property {Object} viewState The current viewState for the desired view.  We cannot internally use this.context.viewport because it is one frame behind:
 * https://github.com/visgl/deck.gl/issues/4504
 * @property {Array=} boundingBox Boudning box of the view in which this should render.
 * @property {string=} id Id from the parent layer.
 * @property {number=} length Value from 0 to 1 representing the portion of the view to be used for the length part of the scale bar.
 */ /**
 * @type {{ new(...props: LayerProps[]) }}
 * @ignore
 */var ScaleBarLayer=/*#__PURE__*/function(_CompositeLayer5){(0,_inherits2["default"])(ScaleBarLayer,_CompositeLayer5);var _super19=_createSuper(ScaleBarLayer);function ScaleBarLayer(){(0,_classCallCheck2["default"])(this,ScaleBarLayer);return _super19.apply(this,arguments);}(0,_createClass2["default"])(ScaleBarLayer,[{key:"renderLayers",value:function renderLayers(){var _this$props15=this.props,id=_this$props15.id,unit=_this$props15.unit,size=_this$props15.size,position=_this$props15.position,viewState=_this$props15.viewState,length=_this$props15.length;var boundingBox=makeBoundingBox(viewState);var zoom=viewState.zoom;var viewLength=boundingBox[2][0]-boundingBox[0][0];var barLength=viewLength*0.05;// This is a good heuristic for stopping the bar tick marks from getting too small
// and/or the text squishing up into the bar.
var barHeight=Math.max(Math.pow(2,-zoom+1.5),(boundingBox[2][1]-boundingBox[0][1])*0.007);var numUnits=barLength*size;var _getPosition=getPosition(boundingBox,position,length),_getPosition2=(0,_slicedToArray2["default"])(_getPosition,2),yCoord=_getPosition2[0],xLeftCoord=_getPosition2[1];var lengthBar=new _layers.LineLayer({id:"scale-bar-length-".concat(id),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[[[xLeftCoord,yCoord],[xLeftCoord+barLength,yCoord]]],getSourcePosition:function getSourcePosition(d){return d[0];},getTargetPosition:function getTargetPosition(d){return d[1];},getWidth:2,getColor:[220,220,220]});var tickBoundsLeft=new _layers.LineLayer({id:"scale-bar-height-left-".concat(id),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[[[xLeftCoord,yCoord-barHeight],[xLeftCoord,yCoord+barHeight]]],getSourcePosition:function getSourcePosition(d){return d[0];},getTargetPosition:function getTargetPosition(d){return d[1];},getWidth:2,getColor:[220,220,220]});var tickBoundsRight=new _layers.LineLayer({id:"scale-bar-height-right-".concat(id),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[[[xLeftCoord+barLength,yCoord-barHeight],[xLeftCoord+barLength,yCoord+barHeight]]],getSourcePosition:function getSourcePosition(d){return d[0];},getTargetPosition:function getTargetPosition(d){return d[1];},getWidth:2,getColor:[220,220,220]});var textLayer=new _layers.TextLayer({id:"units-label-layer-".concat(id),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[{text:numUnits.toPrecision(5)+unit,position:[xLeftCoord+barLength*0.5,yCoord+barHeight*4]}],getColor:[220,220,220,255],getSize:12,fontFamily:DEFAULT_FONT_FAMILY,sizeUnits:'meters',sizeScale:Math.pow(2,-zoom),characterSet:[].concat((0,_toConsumableArray2["default"])(unit.split('')),(0,_toConsumableArray2["default"])(range(10).map(function(i){return String(i);})),['.','e','+'])});return[lengthBar,tickBoundsLeft,tickBoundsRight,textLayer];}}]);return ScaleBarLayer;}(_core.CompositeLayer);exports.ScaleBarLayer=ScaleBarLayer;ScaleBarLayer.layerName='ScaleBarLayer';ScaleBarLayer.defaultProps=defaultProps$2;var vs="#version 300 es\n#define GLSLIFY 1\n#define SHADER_NAME xr-layer-vertex-shader\nin vec3 positions;uniform vec3 eye_pos;uniform mat4 proj;uniform mat4 model;uniform mat4 view;uniform mat4 scale;uniform mat4 resolution;out vec3 vray_dir;flat out vec3 transformed_eye;void main(){gl_Position=proj*view*model*scale*resolution*vec4(positions,1.);/*This first diagram is a skewed volume(i.e a \"shear\" model matrix applied)top down with the eye marked as #,all in world space^___|__\\|\\\\|\\|____|||\n#\nThis next diagram shows the volume after the inverse model matrix has placed it back in model coordinates,but the eye still in world space.^___|___|||||||__|__||||\n#\nFinally,we apply the inverse model matrix transformation to the eye as well to bring it too into world space.Notice that the ray here matches the \"voxels\" through which the first ray also passes,as desired.^____/__|/||/||/____|///\n#\n*/transformed_eye=(inverse(resolution)*inverse(scale)*inverse(model)*(vec4(eye_pos,1.))).xyz;vray_dir=positions-transformed_eye;}";// eslint-disable-line
var fs$1="#version 300 es\nprecision highp int;precision highp float;precision highp SAMPLER_TYPE;\n#define GLSLIFY 1\nuniform highp SAMPLER_TYPE volume0;uniform highp SAMPLER_TYPE volume1;uniform highp SAMPLER_TYPE volume2;uniform highp SAMPLER_TYPE volume3;uniform highp SAMPLER_TYPE volume4;uniform highp SAMPLER_TYPE volume5;uniform vec3 scaledDimensions;uniform mat4 scale;uniform vec3 normals[NUM_PLANES];uniform float distances[NUM_PLANES];uniform vec3 colors[6];uniform vec2 xSlice;uniform vec2 ySlice;uniform vec2 zSlice;uniform vec2 contrastLimits[6];in vec3 vray_dir;flat in vec3 transformed_eye;out vec4 color;vec2 intersect_box(vec3 orig,vec3 dir){vec3 box_min=vec3(xSlice[0],ySlice[0],zSlice[0]);vec3 box_max=vec3(xSlice[1],ySlice[1],zSlice[1]);vec3 inv_dir=1./dir;vec3 tmin_tmp=(box_min-orig)*inv_dir;vec3 tmax_tmp=(box_max-orig)*inv_dir;vec3 tmin=min(tmin_tmp,tmax_tmp);vec3 tmax=max(tmin_tmp,tmax_tmp);float t0=max(tmin.x,max(tmin.y,tmin.z));float t1=min(tmax.x,min(tmax.y,tmax.z));vec2 val=vec2(t0,t1);return val;}float linear_to_srgb(float x){if(x<=0.0031308f){return 12.92f*x;}return 1.055f*pow(x,1.f/2.4f)-0.055f;}float wang_hash(int seed){seed=(seed ^ 61)^(seed>>16);seed*=9;seed=seed ^(seed>>4);seed*=0x27d4eb2d;seed=seed ^(seed>>15);return float(seed % 2147483647)/float(2147483647);}void main(void){vec3 ray_dir=normalize(vray_dir);vec2 t_hit=intersect_box(transformed_eye,ray_dir);if(t_hit.x>t_hit.y){discard;}t_hit.x=max(t_hit.x,0.);vec3 dt_vec=1./(scale*vec4(abs(ray_dir),1.)).xyz;float dt=1.*min(dt_vec.x,min(dt_vec.y,dt_vec.z));float offset=wang_hash(int(gl_FragCoord.x+640.*gl_FragCoord.y));vec3 p=transformed_eye+(t_hit.x+offset*dt)*ray_dir;_BEFORE_RENDERfor(float t=t_hit.x;t<t_hit.y;t+=dt){float canShow=1.;for(int i=0;i<NUM_PLANES;i+=1){canShow*=max(0.,sign(dot(normals[i],p)+distances[i]));}float canShowXCoordinate=max(p.x-0.,0.)*max(1.-p.x,0.);float canShowYCoordinate=max(p.y-0.,0.)*max(1.-p.y,0.);float canShowZCoordinate=max(p.z-0.,0.)*max(1.-p.z,0.);float canShowCoordinate=float(ceil(canShowXCoordinate*canShowYCoordinate*canShowZCoordinate));canShow=canShowCoordinate*canShow;float intensityValue0=float(texture(volume0,p).r);DECKGL_PROCESS_INTENSITY(intensityValue0,contrastLimits[0],0);intensityValue0=canShow*intensityValue0;float intensityValue1=float(texture(volume1,p).r);DECKGL_PROCESS_INTENSITY(intensityValue1,contrastLimits[1],1);intensityValue1=canShow*intensityValue1;float intensityValue2=float(texture(volume2,p).r);DECKGL_PROCESS_INTENSITY(intensityValue2,contrastLimits[2],2);intensityValue2=canShow*intensityValue2;float intensityValue3=float(texture(volume3,p).r);DECKGL_PROCESS_INTENSITY(intensityValue3,contrastLimits[3],3);intensityValue3=canShow*intensityValue3;float intensityValue4=float(texture(volume4,p).r);DECKGL_PROCESS_INTENSITY(intensityValue4,contrastLimits[4],4);intensityValue4=canShow*intensityValue4;float intensityValue5=float(texture(volume5,p).r);DECKGL_PROCESS_INTENSITY(intensityValue5,contrastLimits[5],5);intensityValue5=canShow*intensityValue5;_RENDERp+=ray_dir*dt;}_AFTER_RENDERcolor.r=linear_to_srgb(color.r);color.g=linear_to_srgb(color.g);color.b=linear_to_srgb(color.b);}";// eslint-disable-line
var fs="#define GLSLIFY 1\nfloat apply_contrast_limits(float intensity,vec2 contrastLimits){float contrastLimitsAppliedToIntensity=(intensity-contrastLimits[0])/max(0.0005,(contrastLimits[1]-contrastLimits[0]));return max(0.,contrastLimitsAppliedToIntensity);}";// eslint-disable-line
var channels={name:'channel-intensity-module',fs:fs};/* This is largely an adaptation of Will Usher's excellent blog post/code:
https://github.com/Twinklebear/webgl-volume-raycaster
Without his app, this would have been exponentially more difficult to do, so we thank him dearly.

The major changes are:

- Code has been adapted to the luma.gl/deck.gl framework instead of more-or-less pure WebGL.

- We use a coordinate system that will allow overlays/other figures on our vertex shader/javascript via the `uniform mat4 scale` that matches raw pixel size multiplied by
the ratio of physical sizes (if present) to the world space, just like our 2D layers.  Will implements everything in a unit cube (I think?) centered at the origin.

- We use an OrbitView which is a similar camera to what Will has, but stops gimbal lock from happening
by stopping full rotations whereas Will implements a camera that allows for full rotations without gimbal lock via quaternions.
We have an open issue for implementing this deck.gl: https://github.com/visgl/deck.gl/issues/5364

- We have a multi-channel use case and have a few tweaks in the fragment shader to handle that.

- We convert all of our data to Float32Array so we can use LINEAR sampling while also maintaing the dynamic range and integrity of the data.

- Will uses a colormap via a sampled texture, which is a very good idea, but not something we are geared up for in 2D, so not something we will do in 3D either: 
https://github.com/visgl/luma.gl/issues/1415

- We allow for multiple rendering settings (Max/Min Int. Proj., Additive, etc.)

- We allow for arbtirary affine transformations via deck.gl's modelMatrix prop and have updated the vertex shader accordingly.
More information about that is detailed in the comments there.
*/ // prettier-ignore
var CUBE_STRIP=[1,1,0,0,1,0,1,1,1,0,1,1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,0,0,0];var NUM_PLANES_DEFAULT=1;var defaultProps$1={pickable:false,coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,channelData:{type:'object',value:{},compare:true},contrastLimits:{type:'array',value:[],compare:true},dtype:{type:'string',value:'Uint8',compare:true},xSlice:{type:'array',value:null,compare:true},ySlice:{type:'array',value:null,compare:true},zSlice:{type:'array',value:null,compare:true},clippingPlanes:{type:'array',value:[],compare:true},resolutionMatrix:{type:'object',value:new _math.Matrix4(),compare:true},channelsVisible:{type:'array',value:[],compare:true},extensions:{type:'array',value:[new ColorPalette3DExtensions.AdditiveBlendExtension()],compare:true}};function getRenderingAttrs(){var values=getDtypeValues('Float32');return _objectSpread(_objectSpread({},values),{},{sampler:values.sampler.replace('2D','3D'),cast:function cast(data){return new Float32Array(data);}});}function getRenderingFromExtensions(extensions){var rendering={};extensions.forEach(function(extension){rendering=extension.opts.rendering;});if(!rendering._RENDER){throw new Error('XR3DLayer requires at least one extension to define opts.rendering as an object with _RENDER as a property at the minimum.');}return rendering;}/**
 * @typedef LayerProps
 * @type {Object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {string} dtype Dtype for the layer.
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {Object=} modelMatrix A column major affine transformation to be applied to the volume.
 * @property {Array.<number>=} xSlice 0-width (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} ySlice 0-height (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} zSlice 0-depth (physical coordinates) interval on which to slice the volume.
 * @property {Array.<Object>=} clippingPlanes List of math.gl [Plane](https://math.gl/modules/culling/docs/api-reference/plane) objects.
 * @property {Object=} resolutionMatrix Matrix for scaling the volume based on the (downsampled) resolution being displayed.
 * @property {Array=} extensions [deck.gl extensions](https://deck.gl/docs/developer-guide/custom-layers/layer-extensions) to add to the layers - default is AdditiveBlendExtension from ColorPalette3DExtensions.
 */ /**
 * @type {{ new <S extends string[]>(...props: import('../../../types').Viv<LayerProps>[]) }}
 * @ignore
 */var XR3DLayer=/*#__PURE__*/function(_Layer2){(0,_inherits2["default"])(XR3DLayer,_Layer2);var _super20=_createSuper(XR3DLayer);function XR3DLayer(){(0,_classCallCheck2["default"])(this,XR3DLayer);return _super20.apply(this,arguments);}(0,_createClass2["default"])(XR3DLayer,[{key:"initializeState",value:function initializeState(){var gl=this.context.gl;// This tells WebGL how to read row data from the texture.  For example, the default here is 4 (i.e for RGBA, one byte per channel) so
// each row of data is expected to be a multiple of 4.  This setting (i.e 1) allows us to have non-multiple-of-4 row sizes.  For example, for 2 byte (16 bit data),
// we could use 2 as the value and it would still work, but 1 also works fine (and is more flexible for 8 bit - 1 byte - textures as well).
// https://stackoverflow.com/questions/42789896/webgl-error-arraybuffer-not-big-enough-for-request-in-case-of-gl-luminance
gl.pixelStorei(_constants["default"].UNPACK_ALIGNMENT,1);gl.pixelStorei(_constants["default"].PACK_ALIGNMENT,1);var programManager=_engine.ProgramManager.getDefaultProgramManager(gl);var processStr="fs:DECKGL_PROCESS_INTENSITY(inout float intensity, vec2 contrastLimits, int channelIndex)";if(!programManager._hookFunctions.includes(processStr)){programManager.addShaderHook(processStr);}}},{key:"_isHookDefinedByExtensions",value:function _isHookDefinedByExtensions(hookName){var extensions=this.props.extensions;return extensions===null||extensions===void 0?void 0:extensions.some(function(e){var shaders=e.getShaders();if(shaders){var _shaders$inject2=shaders.inject,inject=_shaders$inject2===void 0?{}:_shaders$inject2,_shaders$modules2=shaders.modules,modules=_shaders$modules2===void 0?[]:_shaders$modules2;var definesInjection=inject[hookName];var moduleDefinesInjection=modules.some(function(m){return m.inject&&(m===null||m===void 0?void 0:m.inject[hookName]);});return definesInjection||moduleDefinesInjection;}return false;});}/**
   * This function compiles the shaders and the projection module.
   */},{key:"getShaders",value:function getShaders(){var _this$props16=this.props,clippingPlanes=_this$props16.clippingPlanes,extensions=_this$props16.extensions;var _getRenderingAttrs=getRenderingAttrs(),sampler=_getRenderingAttrs.sampler;var _getRenderingFromExte=getRenderingFromExtensions(extensions),_BEFORE_RENDER=_getRenderingFromExte._BEFORE_RENDER,_RENDER=_getRenderingFromExte._RENDER,_AFTER_RENDER=_getRenderingFromExte._AFTER_RENDER;var extensionDefinesDeckglProcessIntensity=this._isHookDefinedByExtensions('fs:DECKGL_PROCESS_INTENSITY');var newChannelsModule=_objectSpread({inject:{}},channels);if(!extensionDefinesDeckglProcessIntensity){newChannelsModule.inject['fs:DECKGL_PROCESS_INTENSITY']="\n        intensity = apply_contrast_limits(intensity, contrastLimits);\n      ";}return(0,_get2["default"])((0,_getPrototypeOf2["default"])(XR3DLayer.prototype),"getShaders",this).call(this,{vs:vs,fs:fs$1.replace('_BEFORE_RENDER',_BEFORE_RENDER).replace('_RENDER',_RENDER).replace('_AFTER_RENDER',_AFTER_RENDER),defines:{SAMPLER_TYPE:sampler,NUM_PLANES:String(clippingPlanes.length||NUM_PLANES_DEFAULT)},modules:[newChannelsModule]});}/**
   * This function finalizes state by clearing all textures from the WebGL context
   */},{key:"finalizeState",value:function finalizeState(){(0,_get2["default"])((0,_getPrototypeOf2["default"])(XR3DLayer.prototype),"finalizeState",this).call(this);if(this.state.textures){Object.values(this.state.textures).forEach(function(tex){return tex&&tex["delete"]();});}}/**
   * This function updates state by retriggering model creation (shader compilation and attribute binding)
   * and loading any textures that need be loading.
   */},{key:"updateState",value:function updateState(_ref12){var _props$channelData2,_oldProps$channelData2;var props=_ref12.props,oldProps=_ref12.oldProps,changeFlags=_ref12.changeFlags;// setup model first
if(changeFlags.extensionsChanged||props.colormap!==oldProps.colormap||props.renderingMode!==oldProps.renderingMode||props.clippingPlanes.length!==oldProps.clippingPlanes.length){var gl=this.context.gl;if(this.state.model){this.state.model["delete"]();}this.setState({model:this._getModel(gl)});}if(props.channelData&&(props===null||props===void 0?void 0:(_props$channelData2=props.channelData)===null||_props$channelData2===void 0?void 0:_props$channelData2.data)!==(oldProps===null||oldProps===void 0?void 0:(_oldProps$channelData2=oldProps.channelData)===null||_oldProps$channelData2===void 0?void 0:_oldProps$channelData2.data)){this.loadTexture(props.channelData);}}/**
   * This function creates the luma.gl model.
   */},{key:"_getModel",value:function _getModel(gl){if(!gl){return null;}return new _core2.Model(gl,_objectSpread(_objectSpread({},this.getShaders()),{},{geometry:new _core2.Geometry({drawMode:gl.TRIANGLE_STRIP,attributes:{positions:new Float32Array(CUBE_STRIP)}})}));}/**
   * This function runs the shaders and draws to the canvas
   */},{key:"draw",value:function draw(_ref13){var uniforms=_ref13.uniforms;var _this$state6=this.state,textures=_this$state6.textures,model=_this$state6.model,scaleMatrix=_this$state6.scaleMatrix;var _this$props17=this.props,contrastLimits=_this$props17.contrastLimits,xSlice=_this$props17.xSlice,ySlice=_this$props17.ySlice,zSlice=_this$props17.zSlice,modelMatrix=_this$props17.modelMatrix,channelsVisible=_this$props17.channelsVisible,domain=_this$props17.domain,dtype=_this$props17.dtype,clippingPlanes=_this$props17.clippingPlanes,resolutionMatrix=_this$props17.resolutionMatrix;var _this$context$viewpor=this.context.viewport,viewMatrix=_this$context$viewpor.viewMatrix,viewMatrixInverse=_this$context$viewpor.viewMatrixInverse,projectionMatrix=_this$context$viewpor.projectionMatrix;if(textures&&model&&scaleMatrix){var paddedContrastLimits=padContrastLimits({contrastLimits:contrastLimits,channelsVisible:channelsVisible,domain:domain,dtype:dtype});var invertedScaleMatrix=scaleMatrix.clone().invert();var invertedResolutionMatrix=resolutionMatrix.clone().invert();var paddedClippingPlanes=padWithDefault(clippingPlanes.map(function(p){return p.clone().transform(invertedScaleMatrix).transform(invertedResolutionMatrix);}),new _culling.Plane([1,0,0]),clippingPlanes.length||NUM_PLANES_DEFAULT);// Need to flatten for shaders.
var normals=paddedClippingPlanes.map(function(plane){return plane.normal;}).flat();var distances=paddedClippingPlanes.map(function(plane){return plane.distance;});model.setUniforms(_objectSpread(_objectSpread(_objectSpread({},uniforms),textures),{},{contrastLimits:paddedContrastLimits,xSlice:new Float32Array(xSlice?xSlice.map(function(i){return i/scaleMatrix[0]/resolutionMatrix[0];}):[0,1]),ySlice:new Float32Array(ySlice?ySlice.map(function(i){return i/scaleMatrix[5]/resolutionMatrix[5];}):[0,1]),zSlice:new Float32Array(zSlice?zSlice.map(function(i){return i/scaleMatrix[10]/resolutionMatrix[10];}):[0,1]),eye_pos:new Float32Array([viewMatrixInverse[12],viewMatrixInverse[13],viewMatrixInverse[14]]),view:viewMatrix,proj:projectionMatrix,scale:scaleMatrix,resolution:resolutionMatrix,model:modelMatrix||new _math.Matrix4(),normals:normals,distances:distances})).draw();}}/**
   * This function loads all textures from incoming resolved promises/data from the loaders by calling `dataToTexture`
   */},{key:"loadTexture",value:function loadTexture(channelData){var _this10=this;var textures={volume0:null,volume1:null,volume2:null,volume3:null,volume4:null,volume5:null};if(this.state.textures){Object.values(this.state.textures).forEach(function(tex){return tex&&tex["delete"]();});}if(channelData&&Object.keys(channelData).length>0&&channelData.data){var height=channelData.height,width=channelData.width,depth=channelData.depth;channelData.data.forEach(function(d,i){textures["volume".concat(i)]=_this10.dataToTexture(d,width,height,depth);},this);this.setState({textures:textures,scaleMatrix:new _math.Matrix4().scale(this.props.physicalSizeScalingMatrix.transformPoint([width,height,depth]))});}}/**
   * This function creates textures from the data
   */},{key:"dataToTexture",value:function dataToTexture(data,width,height,depth){var _attrs$cast3,_attrs$cast4,_parameters2;var attrs=getRenderingAttrs();var texture=new _core2.Texture3D(this.context.gl,{width:width,height:height,depth:depth,data:(_attrs$cast3=(_attrs$cast4=attrs.cast)===null||_attrs$cast4===void 0?void 0:_attrs$cast4.call(attrs,data))!==null&&_attrs$cast3!==void 0?_attrs$cast3:data,// ? Seems to be a luma.gl bug.  Looks like Texture2D is wrong or this is but these are flipped somewhere.
format:attrs.dataFormat,dataFormat:attrs.format,type:attrs.type,mipmaps:false,parameters:(_parameters2={},(0,_defineProperty2["default"])(_parameters2,_constants["default"].TEXTURE_MIN_FILTER,_constants["default"].LINEAR),(0,_defineProperty2["default"])(_parameters2,_constants["default"].TEXTURE_MAG_FILTER,_constants["default"].LINEAR),(0,_defineProperty2["default"])(_parameters2,_constants["default"].TEXTURE_WRAP_S,_constants["default"].CLAMP_TO_EDGE),(0,_defineProperty2["default"])(_parameters2,_constants["default"].TEXTURE_WRAP_T,_constants["default"].CLAMP_TO_EDGE),(0,_defineProperty2["default"])(_parameters2,_constants["default"].TEXTURE_WRAP_R,_constants["default"].CLAMP_TO_EDGE),_parameters2)});return texture;}}]);return XR3DLayer;}(_core.Layer);exports.XR3DLayer=XR3DLayer;XR3DLayer.layerName='XR3DLayer';XR3DLayer.defaultProps=defaultProps$1;/* global globalThis */ /**
 * Creates a single continguous TypedArray that can visualized as a volume in 3D space where the y-axis going up is positive,
 * the x-axis going right is positive, and the z-axis coming out of the screen is positive.
 * To do this, and keep the orientation, we must anti-diagonally transpose each slice of raster data so that the (0, 0) data point is transformed
 * to the top right.  If you start the camera looking at the 0th slice (or rotate from looking at the final slice) in 3D, this becomes more apparent.
 * Of note here is that in 2D rendering, the y-axis is positive in the downward direction.
 *
 * @param {object} props
 * @param {object} props.source PixelSource
 * @param {object} props.selection A single selection for the PixelSource
 * @param {object} props.onUpdate A callback for progress that is called twice during the loading of each plane, once when the promsie resolves and once when it is loaded into the final contiguous buffer.
 * @param {object} props.downsampleDepth This is the number by which to downsample on the z direction, usually `2 ** resolution` where `resolution` is that of the `PixelSource` in the image pyramid.
 * The idea here is to get every `downsampleDepth` raster slice so that proper scaling is maintained (just liek a 2D image pyramid).
 * @return {TypedArray}
 * @ignore
 */function getVolume(_x2){return _getVolume.apply(this,arguments);}function _getVolume(){_getVolume=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee18(_ref14){var source,selection,_ref14$onUpdate,onUpdate,_ref14$downsampleDept,downsampleDepth,signal,shape,labels,dtype,_getImageSize8,height,width,depth,depthDownsampled,rasterSize,name,TypedArray,volumeData;return _regenerator["default"].wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:source=_ref14.source,selection=_ref14.selection,_ref14$onUpdate=_ref14.onUpdate,onUpdate=_ref14$onUpdate===void 0?function(){}:_ref14$onUpdate,_ref14$downsampleDept=_ref14.downsampleDepth,downsampleDepth=_ref14$downsampleDept===void 0?1:_ref14$downsampleDept,signal=_ref14.signal;shape=source.shape,labels=source.labels,dtype=source.dtype;_getImageSize8=getImageSize(source),height=_getImageSize8.height,width=_getImageSize8.width;depth=shape[labels.indexOf('z')];depthDownsampled=Math.max(1,Math.floor(depth/downsampleDepth));rasterSize=height*width;name="".concat(dtype,"Array");TypedArray=globalThis[name];volumeData=new TypedArray(rasterSize*depthDownsampled);_context18.next=11;return Promise.all(new Array(depthDownsampled).fill(0).map(/*#__PURE__*/function(){var _ref49=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee17(_,z){var depthSelection,_yield$source$getRast,rasterData,r,volIndex,rasterIndex;return _regenerator["default"].wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:depthSelection=_objectSpread(_objectSpread({},selection),{},{z:z*downsampleDepth});_context17.next=3;return source.getRaster({selection:depthSelection,signal:signal});case 3:_yield$source$getRast=_context17.sent;rasterData=_yield$source$getRast.data;r=0;onUpdate();// For now this process fills in each raster plane anti-diagonally transposed.
// This is to ensure that the image looks right in three dimensional space.
while(r<rasterSize){volIndex=z*rasterSize+(rasterSize-r-1);rasterIndex=(width-r-1)%width+width*Math.floor(r/width);volumeData[volIndex]=rasterData[rasterIndex];r+=1;}onUpdate();case 9:case"end":return _context17.stop();}}},_callee17);}));return function(_x23,_x24){return _ref49.apply(this,arguments);};}()));case 11:return _context18.abrupt("return",{data:volumeData,height:height,width:width,depth:depthDownsampled});case 12:case"end":return _context18.stop();}}},_callee18);}));return _getVolume.apply(this,arguments);}var getTextLayer=function getTextLayer(text,viewport,id){return new _layers.TextLayer({id:"text-".concat(id),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[{text:text,position:viewport.position}],getColor:[220,220,220,255],getSize:25,sizeUnits:'meters',sizeScale:Math.pow(2,-viewport.zoom),fontFamily:'Helvetica'});};var defaultProps={pickable:false,coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,contrastLimits:{type:'array',value:[],compare:true},channelsVisible:{type:'array',value:[],compare:true},selections:{type:'array',value:[],compare:true},resolution:{type:'number',value:0,compare:true},domain:{type:'array',value:[],compare:true},loader:{type:'object',value:[{getRaster:function(){var _getRaster3=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee4(){return _regenerator["default"].wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt("return",{data:[],height:0,width:0});case 1:case"end":return _context4.stop();}}},_callee4);}));function getRaster(){return _getRaster3.apply(this,arguments);}return getRaster;}(),dtype:'Uint16',shape:[1],labels:['z']}],compare:true},xSlice:{type:'array',value:null,compare:true},ySlice:{type:'array',value:null,compare:true},zSlice:{type:'array',value:null,compare:true},clippingPlanes:{type:'array',value:[],compare:true},onUpdate:{type:'function',value:function value(){},compare:true},useProgressIndicator:{type:'boolean',value:true,compare:true},useWebGL1Warning:{type:'boolean',value:true,compare:true},extensions:{type:'array',value:[new ColorPalette3DExtensions.AdditiveBlendExtension()],compare:true}};/**
 * @typedef LayerProps
 * @type {Object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {Array} loader PixelSource[]. Represents an N-dimensional image.
 * @property {Array} selections Selection to be used for fetching data.
 * @property {Array.<Array.<number>>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {number=} resolution Resolution at which you would like to see the volume and load it into memory (0 highest, loader.length -1 the lowest default 0)
 * @property {Object=} modelMatrix A column major affine transformation to be applied to the volume.
 * @property {Array.<number>=} xSlice 0-width (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} ySlice 0-height (physical coordinates) interval on which to slice the volume.
 * @property {Array.<number>=} zSlice 0-depth (physical coordinates) interval on which to slice the volume.
 * @property {function=} onViewportLoad Function that gets called when the data in the viewport loads.
 * @property {Array.<Object>=} clippingPlanes List of math.gl [Plane](https://math.gl/modules/culling/docs/api-reference/plane) objects.
 * @property {boolean=} useProgressIndicator Whether or not to use the default progress text + indicator (default is true)
 * @property {boolean=} useWebGL1Warning Whether or not to use the default WebGL1 warning (default is true)
 * @property {function=} onUpdate A callback to be used for getting updates of the progress, ({ progress }) => {}
 * @property {Array=} extensions [deck.gl extensions](https://deck.gl/docs/developer-guide/custom-layers/layer-extensions) to add to the layers - default is AdditiveBlendExtension from ColorPalette3DExtensions.
 */ /**
 * @type {{ new <S extends string[]>(...props: import('../../types').Viv<LayerProps, S>[]) }}
 * @ignore
 */var VolumeLayer=/*#__PURE__*/function(_CompositeLayer6){(0,_inherits2["default"])(VolumeLayer,_CompositeLayer6);var _super21=_createSuper(VolumeLayer);function VolumeLayer(){(0,_classCallCheck2["default"])(this,VolumeLayer);return _super21.apply(this,arguments);}(0,_createClass2["default"])(VolumeLayer,[{key:"clearState",value:function clearState(){this.setState({height:null,width:null,depth:null,data:null,physicalSizeScalingMatrix:null,resolutionMatrix:null,progress:0,abortController:null});}},{key:"finalizeState",value:function finalizeState(){this.state.abortController.abort();}},{key:"updateState",value:function updateState(_ref15){var _this11=this;var oldProps=_ref15.oldProps,props=_ref15.props;var loaderChanged=props.loader!==oldProps.loader;var resolutionChanged=props.resolution!==oldProps.resolution;var selectionsChanged=props.selections!==oldProps.selections;// Only fetch new data to render if loader has changed
if(resolutionChanged){// Clear last volume.
this.clearState();}if(loaderChanged||selectionsChanged||resolutionChanged){var _this$props18=this.props,loader=_this$props18.loader,_this$props18$selecti=_this$props18.selections,selections=_this$props18$selecti===void 0?[]:_this$props18$selecti,_resolution=_this$props18.resolution,onViewportLoad=_this$props18.onViewportLoad;var source=loader[_resolution];var progress=0;var totalRequests=// eslint-disable-next-line no-bitwise
(source.shape[source.labels.indexOf('z')]>>_resolution)*selections.length;var onUpdate=function onUpdate(){progress+=0.5/totalRequests;if(_this11.props.onUpdate){_this11.props.onUpdate({progress:progress});}_this11.setState({progress:progress});};var abortController=new AbortController();this.setState({abortController:abortController});var _signal=abortController.signal;var volumePromises=selections.map(function(selection){return getVolume({selection:selection,source:source,onUpdate:onUpdate,downsampleDepth:Math.pow(2,_resolution),signal:_signal});});var physicalSizeScalingMatrix=getPhysicalSizeScalingMatrix(loader[_resolution]);Promise.all(volumePromises).then(function(volumes){if(onViewportLoad){onViewportLoad(volumes);}var volume={data:volumes.map(function(d){return d.data;}),width:volumes[0].width,height:volumes[0].height,depth:volumes[0].depth};_this11.setState(_objectSpread(_objectSpread({},volume),{},{physicalSizeScalingMatrix:physicalSizeScalingMatrix,resolutionMatrix:new _math.Matrix4().scale(Math.pow(2,_resolution))}));});}}},{key:"renderLayers",value:function renderLayers(){var _parameters3;var _this$props19=this.props,loader=_this$props19.loader,id=_this$props19.id,resolution=_this$props19.resolution,useProgressIndicator=_this$props19.useProgressIndicator,useWebGL1Warning=_this$props19.useWebGL1Warning;var dtype=loader[resolution].dtype;var _this$state7=this.state,data=_this$state7.data,width=_this$state7.width,height=_this$state7.height,depth=_this$state7.depth,progress=_this$state7.progress,physicalSizeScalingMatrix=_this$state7.physicalSizeScalingMatrix,resolutionMatrix=_this$state7.resolutionMatrix;var gl=this.context.gl;if(!(0,_core2.isWebGL2)(gl)&&useWebGL1Warning){var viewport=this.context.viewport;return getTextLayer(['Volume rendering is only available on browsers that support WebGL2. If you','are using Safari, you can turn on WebGL2 by navigating in the top menubar','to check Develop > Experimental Features > WebGL 2.0 and then refreshing','the page.'].join('\n'),viewport,id);}if(!(width&&height)&&useProgressIndicator){var _viewport=this.context.viewport;return getTextLayer("Loading Volume ".concat(String((progress||0)*100).slice(0,5),"%..."),_viewport,id);}return new XR3DLayer(this.props,{channelData:{data:data,width:width,height:height,depth:depth},id:"XR3DLayer-".concat(0,"-",height,"-").concat(width,"-",0,"-").concat(resolution,"-").concat(id),physicalSizeScalingMatrix:physicalSizeScalingMatrix,parameters:(_parameters3={},(0,_defineProperty2["default"])(_parameters3,_constants["default"].CULL_FACE,true),(0,_defineProperty2["default"])(_parameters3,_constants["default"].CULL_FACE_MODE,_constants["default"].FRONT),(0,_defineProperty2["default"])(_parameters3,_constants["default"].DEPTH_TEST,false),(0,_defineProperty2["default"])(_parameters3,"blendFunc",[_constants["default"].SRC_ALPHA,_constants["default"].ONE]),(0,_defineProperty2["default"])(_parameters3,"blend",true),_parameters3),resolutionMatrix:resolutionMatrix,dtype:dtype});}}]);return VolumeLayer;}(_core.CompositeLayer);exports.VolumeLayer=VolumeLayer;VolumeLayer.layerName='VolumeLayer';VolumeLayer.defaultProps=defaultProps;var areViewStatesEqual=function areViewStatesEqual(viewState,otherViewState){return otherViewState===viewState||(viewState===null||viewState===void 0?void 0:viewState.zoom)===(otherViewState===null||otherViewState===void 0?void 0:otherViewState.zoom)&&(viewState===null||viewState===void 0?void 0:viewState.rotationX)===(otherViewState===null||otherViewState===void 0?void 0:otherViewState.rotationX)&&(viewState===null||viewState===void 0?void 0:viewState.rotationOrbit)===(otherViewState===null||otherViewState===void 0?void 0:otherViewState.rotationOrbit)&&(0,_fastDeepEqual["default"])(viewState===null||viewState===void 0?void 0:viewState.target,otherViewState===null||otherViewState===void 0?void 0:otherViewState.target);};var VivViewerWrapper=/*#__PURE__*/function(_PureComponent){(0,_inherits2["default"])(VivViewerWrapper,_PureComponent);var _super22=_createSuper(VivViewerWrapper);function VivViewerWrapper(props){var _this12;(0,_classCallCheck2["default"])(this,VivViewerWrapper);_this12=_super22.call(this,props);_this12.state={viewStates:{}};var viewStates=_this12.state.viewStates;var _this12$props=_this12.props,views=_this12$props.views,initialViewStates=_this12$props.viewStates;views.forEach(function(view){viewStates[view.id]=view.filterViewState({viewState:initialViewStates.find(function(v){return v.id===view.id;})});});_this12._onViewStateChange=_this12._onViewStateChange.bind((0,_assertThisInitialized2["default"])(_this12));_this12.layerFilter=_this12.layerFilter.bind((0,_assertThisInitialized2["default"])(_this12));_this12.onHover=_this12.onHover.bind((0,_assertThisInitialized2["default"])(_this12));return _this12;}(0,_createClass2["default"])(VivViewerWrapper,[{key:"layerFilter",value:function layerFilter(_ref16){var layer=_ref16.layer,viewport=_ref16.viewport;return layer.id.includes(getVivId(viewport.id));}},{key:"_onViewStateChange",value:function _onViewStateChange(_ref17){var viewId=_ref17.viewId,viewState=_ref17.viewState,interactionState=_ref17.interactionState,oldViewState=_ref17.oldViewState;var _this$props20=this.props,views=_this$props20.views,onViewStateChange=_this$props20.onViewStateChange;viewState=onViewStateChange&&onViewStateChange({viewId:viewId,viewState:viewState,interactionState:interactionState,oldViewState:oldViewState})||viewState;this.setState(function(prevState){var viewStates={};views.forEach(function(view){var currentViewState=prevState.viewStates[view.id];viewStates[view.id]=view.filterViewState({viewState:_objectSpread(_objectSpread({},viewState),{},{id:viewId}),oldViewState:oldViewState,currentViewState:currentViewState});});return{viewStates:viewStates};});return viewState;}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){var props=this.props;var views=props.views;var viewStates=_objectSpread({},this.state.viewStates);var anyChanged=false;views.forEach(function(view){var _props$viewStates,_prevProps$viewStates;var currViewState=(_props$viewStates=props.viewStates)===null||_props$viewStates===void 0?void 0:_props$viewStates.find(function(viewState){return viewState.id===view.id;});if(!currViewState){return;}var prevViewState=(_prevProps$viewStates=prevProps.viewStates)===null||_prevProps$viewStates===void 0?void 0:_prevProps$viewStates.find(function(viewState){return viewState.id===view.id;});if(areViewStatesEqual(currViewState,prevViewState)){return;}anyChanged=true;var height=view.height,width=view.width;viewStates[view.id]=view.filterViewState({viewState:_objectSpread(_objectSpread({},currViewState),{},{height:height,width:width,id:view.id})});});if(anyChanged){this.setState({viewStates:viewStates});}}},{key:"onHover",value:function onHover(info,event){var tile=info.tile,coordinate=info.coordinate,layer=info.sourceLayer;var _this$props21=this.props,onHover=_this$props21.onHover,hoverHooks=_this$props21.hoverHooks;if(onHover){onHover(info,event);}if(!hoverHooks||!coordinate||!layer){return null;}var _hoverHooks$handleVal=hoverHooks.handleValue,handleValue=_hoverHooks$handleVal===void 0?function(){}:_hoverHooks$handleVal,_hoverHooks$handleCoo=hoverHooks.handleCoordnate,handleCoordnate=_hoverHooks$handleCoo===void 0?function(){}:_hoverHooks$handleCoo;var hoverData;if(layer.id.includes("Tiled")){if(!(tile!==null&&tile!==void 0&&tile.content)){return null;}var content=tile.content,bbox=tile.bbox,z=tile.z;if(!content.data||!bbox){return null;}var data=content.data,width=content.width,height=content.height;var left=bbox.left,right=bbox.right,top=bbox.top,bottom=bbox.bottom;var bounds=[left,data.height<layer.tileSize?height:bottom,data.width<layer.tileSize?width:right,top];if(!data){return null;}var layerZoomScale=Math.max(1,Math.pow(2,Math.round(-z)));var dataCoords=[Math.floor((coordinate[0]-bounds[0])/layerZoomScale),Math.floor((coordinate[1]-bounds[3])/layerZoomScale)];var coords=dataCoords[1]*width+dataCoords[0];hoverData=data.map(function(d){return d[coords];});}else{var channelData=layer.props.channelData;if(!channelData){return null;}var _data=channelData.data,_width=channelData.width,_height=channelData.height;if(!_data||!_width||!_height){return null;}var _bounds2=[0,_height,_width,0];var zoom=layer.context.viewport.zoom;var _layerZoomScale=Math.max(1,Math.pow(2,Math.floor(-zoom)));var _dataCoords=[Math.floor((coordinate[0]-_bounds2[0])/_layerZoomScale),Math.floor((coordinate[1]-_bounds2[3])/_layerZoomScale)];var _coords=_dataCoords[1]*_width+_dataCoords[0];hoverData=_data.map(function(d){return d[_coords];});}handleValue(hoverData);handleCoordnate(coordinate);}},{key:"_renderLayers",value:function _renderLayers(){var onHover=this.onHover;var viewStates=this.state.viewStates;var _this$props22=this.props,views=_this$props22.views,layerProps=_this$props22.layerProps;return views.map(function(view,i){return view.getLayers({viewStates:viewStates,props:_objectSpread(_objectSpread({},layerProps[i]),{},{onHover:onHover})});});}},{key:"render",value:function render(){var _this$props23=this.props,views=_this$props23.views,randomize=_this$props23.randomize,_this$props23$useDevi=_this$props23.useDevicePixels,useDevicePixels=_this$props23$useDevi===void 0?true:_this$props23$useDevi,deckProps=_this$props23.deckProps;var viewStates=this.state.viewStates;var deckGLViews=views.map(function(view){return view.getDeckGlView();});if(randomize){var random=Math.random();var holdFirstElement=deckGLViews[0];var randomWieghted=random*1.49;var randomizedIndex=Math.round(randomWieghted*(views.length-1));deckGLViews[0]=deckGLViews[randomizedIndex];deckGLViews[randomizedIndex]=holdFirstElement;}return/* @__PURE__ */_react["default"].createElement(_react2["default"],_objectSpread(_objectSpread({},deckProps!==null&&deckProps!==void 0?deckProps:{}),{},{layerFilter:this.layerFilter,layers:(deckProps===null||deckProps===void 0?void 0:deckProps.layers)===void 0?(0,_toConsumableArray2["default"])(this._renderLayers()):[].concat((0,_toConsumableArray2["default"])(this._renderLayers()),(0,_toConsumableArray2["default"])(deckProps.layers)),onViewStateChange:this._onViewStateChange,views:deckGLViews,viewState:viewStates,useDevicePixels:useDevicePixels,getCursor:function getCursor(_ref18){var isDragging=_ref18.isDragging;return isDragging?"grabbing":"crosshair";}}));}}],[{key:"getDerivedStateFromProps",value:function getDerivedStateFromProps(props,prevState){var views=props.views,viewStatesProps=props.viewStates;if(views.some(function(view){return!prevState.viewStates[view.id]||view.height!==prevState.viewStates[view.id].height||view.width!==prevState.viewStates[view.id].width;})){var viewStates={};views.forEach(function(view){var height=view.height,width=view.width;var currentViewState=prevState.viewStates[view.id];viewStates[view.id]=view.filterViewState({viewState:_objectSpread(_objectSpread({},currentViewState||viewStatesProps.find(function(v){return v.id===view.id;})),{},{height:height,width:width,id:view.id})});});return{viewStates:viewStates};}return prevState;}}]);return VivViewerWrapper;}(_react.PureComponent);var VivViewer=function VivViewer(props){return/* @__PURE__ */_react["default"].createElement(VivViewerWrapper,_objectSpread({},props));};/**
 * This class generates a layer and a view for use in the VivViewer
 * @param {Object} args
 * @param {string} args.id id for this VivView.
 * @param {Object} args.height Width of the view.
 * @param {Object} args.width Height of the view.
 * @param {string} args.id Id for the current view
 * @param {number=} args.x X (top-left) location on the screen for the current view
 * @param {number=} args.y Y (top-left) location on the screen for the current view
 */exports.VivViewer=VivViewer;var VivView=/*#__PURE__*/function(){function VivView(_ref19){var id=_ref19.id,_ref19$x=_ref19.x,x=_ref19$x===void 0?0:_ref19$x,_ref19$y=_ref19.y,y=_ref19$y===void 0?0:_ref19$y,height=_ref19.height,width=_ref19.width;(0,_classCallCheck2["default"])(this,VivView);this.width=width;this.height=height;this.id=id;this.x=x;this.y=y;}/**
   * Create a DeckGL view based on this class.
   * @returns {View} The DeckGL View for this class.
   */(0,_createClass2["default"])(VivView,[{key:"getDeckGlView",value:function getDeckGlView(){return new _core.OrthographicView({controller:true,id:this.id,height:this.height,width:this.width,x:this.x,y:this.y});}/**
   * Create a viewState for this class, checking the id to make sure this class and veiwState match.
   * @param {Object} args
   * @param {object} [args.viewState] incoming ViewState object from deck.gl update.
   * @param {object} [args.oldViewState] old ViewState object from deck.gl.
   * @param {object} [args.currentViewState] current ViewState object in react state.
   * @returns {?object} ViewState for this class (or null by default if the ids do not match).
   */},{key:"filterViewState",value:function filterViewState(_ref20){var viewState=_ref20.viewState;var id=this.id,height=this.height,width=this.width;return viewState.id===id?_objectSpread({height:height,width:width},viewState):null;}/**
   * Create a layer for this instance.
   * @param {Object} args
   * @param {Object<string,Object>} args.viewStates ViewStates for all current views.
   * @param {Object} args.props Props for this instance.
   * @returns {Layer} Instance of a layer.
   */ // eslint-disable-next-line class-methods-use-this,no-unused-vars
},{key:"getLayers",value:function getLayers(_ref21){var viewStates=_ref21.viewStates,props=_ref21.props;}}]);return VivView;}();/* eslint-disable max-classes-per-file */exports.VivView=VivView;var OVERVIEW_VIEW_ID='overview';exports.OVERVIEW_VIEW_ID=OVERVIEW_VIEW_ID;var OverviewState=/*#__PURE__*/(0,_createClass2["default"])(function OverviewState(){(0,_classCallCheck2["default"])(this,OverviewState);});var OverviewController=/*#__PURE__*/function(_Controller){(0,_inherits2["default"])(OverviewController,_Controller);var _super23=_createSuper(OverviewController);function OverviewController(props){var _this13;(0,_classCallCheck2["default"])(this,OverviewController);_this13=_super23.call(this,OverviewState,props);_this13.events=['click'];return _this13;}(0,_createClass2["default"])(OverviewController,[{key:"handleEvent",value:function handleEvent(event){if(event.type!=='click'){return;}var _this$getCenter=this.getCenter(event),_this$getCenter2=(0,_slicedToArray2["default"])(_this$getCenter,2),x=_this$getCenter2[0],y=_this$getCenter2[1];var _this$controllerState=this.controllerStateProps,width=_this$controllerState.width,height=_this$controllerState.height,zoom=_this$controllerState.zoom,scale=_this$controllerState.scale;if(x<0||y<0||x>width||y>height){return;}var scaleFactor=1/(Math.pow(2,zoom)*scale);x*=scaleFactor;y*=scaleFactor;if(this.onViewStateChange){this.onViewStateChange({viewState:{target:[x,y,0]}});}}}]);return OverviewController;}(_core.Controller);/**
 * This class generates a OverviewLayer and a view for use in the VivViewer as an overview to a Detailview (they must be used in conjection).
 * From the base class VivView, only the initialViewState argument is used.  This class uses private methods to position its x and y from the
 * additional arguments:
 * @param {Object} args
 * @param {Object} args.id for thie VivView
 * @param {Object} args.loader PixelSource[], where each PixelSource is decreasing in shape. If length == 1, not multiscale.
 * @param {number} args.detailHeight Height of the detail view.
 * @param {number} args.detailWidth Width of the detail view.
 * @param {number} [args.scale] Scale of this viewport relative to the detail. Default is .2.
 * @param {number} [args.margin] Margin to be offset from the the corner of the other viewport. Default is 25.
 * @param {string} [args.position] Location of the viewport - one of "bottom-right", "top-right", "top-left", "bottom-left."  Default is 'bottom-right'.
 * @param {number} [args.minimumWidth] Absolute lower bound for how small the viewport should scale. Default is 150.
 * @param {number} [args.maximumWidth] Absolute upper bound for how large the viewport should scale. Default is 350.
 * @param {number} [args.minimumHeight] Absolute lower bound for how small the viewport should scale. Default is 150.
 * @param {number} [args.maximumHeight] Absolute upper bound for how large the viewport should scale. Default is 350.
 * @param {Boolean} [args.clickCenter] Click to center the default view. Default is true.
 * */var OverviewView=/*#__PURE__*/function(_VivView){(0,_inherits2["default"])(OverviewView,_VivView);var _super24=_createSuper(OverviewView);function OverviewView(_ref22){var _this14;var id=_ref22.id,loader=_ref22.loader,detailHeight=_ref22.detailHeight,detailWidth=_ref22.detailWidth,_ref22$scale=_ref22.scale,scale=_ref22$scale===void 0?0.2:_ref22$scale,_ref22$margin=_ref22.margin,margin=_ref22$margin===void 0?25:_ref22$margin,_ref22$position=_ref22.position,position=_ref22$position===void 0?'bottom-right':_ref22$position,_ref22$minimumWidth=_ref22.minimumWidth,minimumWidth=_ref22$minimumWidth===void 0?150:_ref22$minimumWidth,_ref22$maximumWidth=_ref22.maximumWidth,maximumWidth=_ref22$maximumWidth===void 0?350:_ref22$maximumWidth,_ref22$minimumHeight=_ref22.minimumHeight,minimumHeight=_ref22$minimumHeight===void 0?150:_ref22$minimumHeight,_ref22$maximumHeight=_ref22.maximumHeight,maximumHeight=_ref22$maximumHeight===void 0?350:_ref22$maximumHeight,_ref22$clickCenter=_ref22.clickCenter,clickCenter=_ref22$clickCenter===void 0?true:_ref22$clickCenter;(0,_classCallCheck2["default"])(this,OverviewView);_this14=_super24.call(this,{id:id});_this14.margin=margin;_this14.loader=loader;_this14.position=position;_this14.detailHeight=detailHeight;_this14.detailWidth=detailWidth;_this14._setHeightWidthScale({detailWidth:detailWidth,detailHeight:detailHeight,scale:scale,minimumWidth:minimumWidth,maximumWidth:maximumWidth,minimumHeight:minimumHeight,maximumHeight:maximumHeight});_this14._setXY();_this14.clickCenter=clickCenter;return _this14;}/**
   * Set the image-pixel scale and height and width based on detail view.
   */(0,_createClass2["default"])(OverviewView,[{key:"_setHeightWidthScale",value:function _setHeightWidthScale(_ref23){var detailWidth=_ref23.detailWidth,detailHeight=_ref23.detailHeight,scale=_ref23.scale,minimumWidth=_ref23.minimumWidth,maximumWidth=_ref23.maximumWidth,minimumHeight=_ref23.minimumHeight,maximumHeight=_ref23.maximumHeight;var numLevels=this.loader.length;var _getImageSize5=getImageSize(this.loader[0]),rasterWidth=_getImageSize5.width,rasterHeight=_getImageSize5.height;this._imageWidth=rasterWidth;this._imageHeight=rasterHeight;if(rasterWidth>rasterHeight){var heightWidthRatio=rasterHeight/rasterWidth;this.width=Math.min(maximumWidth,Math.max(detailWidth*scale,minimumWidth));this.height=this.width*heightWidthRatio;this.scale=Math.pow(2,numLevels-1)/rasterWidth*this.width;}else{var widthHeightRatio=rasterWidth/rasterHeight;this.height=Math.min(maximumHeight,Math.max(detailHeight*scale,minimumHeight));this.width=this.height*widthHeightRatio;this.scale=Math.pow(2,numLevels-1)/rasterHeight*this.height;}}/**
   * Set the x and y (top left corner) of this overview relative to the detail.
   */},{key:"_setXY",value:function _setXY(){var height=this.height,width=this.width,margin=this.margin,position=this.position,detailWidth=this.detailWidth,detailHeight=this.detailHeight;switch(position){case'bottom-right':{this.x=detailWidth-width-margin;this.y=detailHeight-height-margin;break;}case'top-right':{this.x=detailWidth-width-margin;this.y=margin;break;}case'top-left':{this.x=margin;this.y=margin;break;}case'bottom-left':{this.x=margin;this.y=detailHeight-height-margin;break;}default:{throw new Error("overviewLocation prop needs to be one of ['bottom-right', 'top-right', 'top-left', 'bottom-left']");}}}},{key:"getDeckGlView",value:function getDeckGlView(){var scale=this.scale,clickCenter=this.clickCenter;var controller=clickCenter&&{type:OverviewController,scale:scale};return new _core.OrthographicView({controller:controller,id:this.id,height:this.height,width:this.width,x:this.x,y:this.y,clear:true});}},{key:"filterViewState",value:function filterViewState(_ref24){var viewState=_ref24.viewState;// Scale the view as the overviewScale changes with screen resizing - basically, do not react to any view state changes.
var _imageWidth=this._imageWidth,_imageHeight=this._imageHeight,scale=this.scale;return _objectSpread(_objectSpread({},viewState),{},{height:this.height,width:this.width,id:this.id,target:[_imageWidth*scale/2,_imageHeight*scale/2,0],zoom:-(this.loader.length-1)});}},{key:"getLayers",value:function getLayers(_ref25){var _this15=this;var viewStates=_ref25.viewStates,props=_ref25.props;var detail=viewStates.detail,overview=viewStates.overview;if(!detail){throw new Error('Overview requires a viewState with id detail');}// Scale the bounding box.
var boundingBox=makeBoundingBox(detail).map(function(coords){return coords.map(function(e){return e*_this15.scale;});});var overviewLayer=new OverviewLayer(props,{id:getVivId(this.id),boundingBox:boundingBox,overviewScale:this.scale,zoom:-overview.zoom});return[overviewLayer];}}]);return OverviewView;}(VivView);exports.OverviewView=OverviewView;var DETAIL_VIEW_ID='detail';/**
 * This class generates a MultiscaleImageLayer and a view for use in the VivViewer as a detailed view.
 * It takes the same arguments for its constructor as its base class VivView.
 * */exports.DETAIL_VIEW_ID=DETAIL_VIEW_ID;var DetailView=/*#__PURE__*/function(_VivView2){(0,_inherits2["default"])(DetailView,_VivView2);var _super25=_createSuper(DetailView);function DetailView(){(0,_classCallCheck2["default"])(this,DetailView);return _super25.apply(this,arguments);}(0,_createClass2["default"])(DetailView,[{key:"getLayers",value:function getLayers(_ref26){var _loader$3,_loader$3$meta,_loader$3$meta$physic;var props=_ref26.props,viewStates=_ref26.viewStates;var loader=props.loader;var id=this.id,height=this.height,width=this.width;var layerViewState=viewStates[id];var layers=[getImageLayer(id,props)];// Inspect the first pixel source for physical sizes
if((_loader$3=loader[0])!==null&&_loader$3!==void 0&&(_loader$3$meta=_loader$3.meta)!==null&&_loader$3$meta!==void 0&&(_loader$3$meta$physic=_loader$3$meta.physicalSizes)!==null&&_loader$3$meta$physic!==void 0&&_loader$3$meta$physic.x){var _loader$0$meta$physic=loader[0].meta.physicalSizes.x,size=_loader$0$meta$physic.size,unit=_loader$0$meta$physic.unit;layers.push(new ScaleBarLayer({id:getVivId(id),loader:loader,unit:unit,size:size,viewState:_objectSpread(_objectSpread({},layerViewState),{},{height:height,width:width})}));}return layers;}},{key:"filterViewState",value:function filterViewState(_ref27){var viewState=_ref27.viewState,currentViewState=_ref27.currentViewState;if(viewState.id===OVERVIEW_VIEW_ID){var target=viewState.target;if(target){return _objectSpread(_objectSpread({},currentViewState),{},{target:target});}}return(0,_get2["default"])((0,_getPrototypeOf2["default"])(DetailView.prototype),"filterViewState",this).call(this,{viewState:viewState});}}]);return DetailView;}(VivView);/**
 * This class generates a MultiscaleImageLayer and a view for use in the SideBySideViewer.
 * It is linked with its other views as controlled by `linkedIds`, `zoomLock`, and `panLock` parameters.
 * It takes the same arguments for its constructor as its base class VivView plus the following:
 * @param {Object} args
 * @param {Array<String>} args.linkedIds Ids of the other views to which this could be locked via zoom/pan.
 * @param {Boolean} args.panLock Whether or not we lock pan.
 * @param {Boolean} args.zoomLock Whether or not we lock zoom.
 * @param {Array=} args.viewportOutlineColor Outline color of the border (default [255, 255, 255])
 * @param {number=} args.viewportOutlineWidth Default outline width (default 10)
 * @param {number=} args.x X (top-left) location on the screen for the current view
 * @param {number=} args.y Y (top-left) location on the screen for the current view
 * @param {number} args.height Width of the view.
 * @param {number} args.width Height of the view.
 * @param {string} args.id id of the View
 * */exports.DetailView=DetailView;var SideBySideView=/*#__PURE__*/function(_VivView3){(0,_inherits2["default"])(SideBySideView,_VivView3);var _super26=_createSuper(SideBySideView);function SideBySideView(_ref28){var _this16;var id=_ref28.id,_ref28$x=_ref28.x,x=_ref28$x===void 0?0:_ref28$x,_ref28$y=_ref28.y,y=_ref28$y===void 0?0:_ref28$y,height=_ref28.height,width=_ref28.width,_ref28$linkedIds=_ref28.linkedIds,linkedIds=_ref28$linkedIds===void 0?[]:_ref28$linkedIds,_ref28$panLock=_ref28.panLock,panLock=_ref28$panLock===void 0?true:_ref28$panLock,_ref28$zoomLock=_ref28.zoomLock,zoomLock=_ref28$zoomLock===void 0?true:_ref28$zoomLock,_ref28$viewportOutlin=_ref28.viewportOutlineColor,viewportOutlineColor=_ref28$viewportOutlin===void 0?[255,255,255]:_ref28$viewportOutlin,_ref28$viewportOutlin2=_ref28.viewportOutlineWidth,viewportOutlineWidth=_ref28$viewportOutlin2===void 0?10:_ref28$viewportOutlin2;(0,_classCallCheck2["default"])(this,SideBySideView);_this16=_super26.call(this,{id:id,x:x,y:y,height:height,width:width});_this16.linkedIds=linkedIds;_this16.panLock=panLock;_this16.zoomLock=zoomLock;_this16.viewportOutlineColor=viewportOutlineColor;_this16.viewportOutlineWidth=viewportOutlineWidth;return _this16;}(0,_createClass2["default"])(SideBySideView,[{key:"filterViewState",value:function filterViewState(_ref29){var viewState=_ref29.viewState,oldViewState=_ref29.oldViewState,currentViewState=_ref29.currentViewState;var viewStateId=viewState.id;var id=this.id,linkedIds=this.linkedIds,panLock=this.panLock,zoomLock=this.zoomLock;if(oldViewState&&linkedIds.indexOf(viewStateId)!==-1&&(zoomLock||panLock)){var thisViewState={height:currentViewState.height,width:currentViewState.width,target:[],zoom:null};var _currentViewState$tar=(0,_slicedToArray2["default"])(currentViewState.target,2),currentX=_currentViewState$tar[0],currentY=_currentViewState$tar[1];if(zoomLock){var dZoom=viewState.zoom-oldViewState.zoom;thisViewState.zoom=currentViewState.zoom+dZoom;}else{thisViewState.zoom=currentViewState.zoom;}if(panLock){var _oldViewState$target=(0,_slicedToArray2["default"])(oldViewState.target,2),oldX=_oldViewState$target[0],oldY=_oldViewState$target[1];var _viewState$target=(0,_slicedToArray2["default"])(viewState.target,2),newX=_viewState$target[0],newY=_viewState$target[1];var dx=newX-oldX;var dy=newY-oldY;thisViewState.target.push(currentX+dx);thisViewState.target.push(currentY+dy);}else{thisViewState.target.push(currentX);thisViewState.target.push(currentY);}return{id:id,target:thisViewState.target,zoom:thisViewState.zoom,height:thisViewState.height,width:thisViewState.width};}return viewState.id===id?{id:id,target:viewState.target,zoom:viewState.zoom,height:viewState.height,width:viewState.width}:{id:id,target:currentViewState.target,zoom:currentViewState.zoom,height:currentViewState.height,width:currentViewState.width};}},{key:"getLayers",value:function getLayers(_ref30){var _loader$4,_loader$4$meta,_loader$4$meta$physic;var props=_ref30.props,viewStates=_ref30.viewStates;var loader=props.loader;var id=this.id,viewportOutlineColor=this.viewportOutlineColor,viewportOutlineWidth=this.viewportOutlineWidth,height=this.height,width=this.width;var layerViewState=viewStates[id];var boundingBox=makeBoundingBox(_objectSpread(_objectSpread({},layerViewState),{},{height:height,width:width}));var layers=[getImageLayer(id,props)];var border=new _layers.PolygonLayer({id:"viewport-outline-".concat(getVivId(id)),coordinateSystem:_core.COORDINATE_SYSTEM.CARTESIAN,data:[boundingBox],getPolygon:function getPolygon(f){return f;},filled:false,stroked:true,getLineColor:viewportOutlineColor,getLineWidth:viewportOutlineWidth*Math.pow(2,-layerViewState.zoom)});layers.push(border);if((_loader$4=loader[0])!==null&&_loader$4!==void 0&&(_loader$4$meta=_loader$4.meta)!==null&&_loader$4$meta!==void 0&&(_loader$4$meta$physic=_loader$4$meta.physicalSizes)!==null&&_loader$4$meta$physic!==void 0&&_loader$4$meta$physic.x){var _loader$0$meta$physic2=loader[0].meta.physicalSizes.x,size=_loader$0$meta$physic2.size,unit=_loader$0$meta$physic2.unit;layers.push(new ScaleBarLayer({id:getVivId(id),loader:loader,unit:unit,size:size,viewState:_objectSpread(_objectSpread({},layerViewState),{},{height:height,width:width})}));}return layers;}}]);return SideBySideView;}(VivView);/**
 * This class generates a VolumeLayer and a view for use in the VivViewer as volumetric rendering.
 * @param {Object} args
 * @param {Array<number>} args.target Centered target for the camera (used if useFixedAxis is true)
 * @param {Boolean} args.useFixedAxis Whether or not to fix the axis of the camera.
 * */exports.SideBySideView=SideBySideView;var VolumeView=/*#__PURE__*/function(_VivView4){(0,_inherits2["default"])(VolumeView,_VivView4);var _super27=_createSuper(VolumeView);function VolumeView(_ref31){var _this17;var target=_ref31.target,useFixedAxis=_ref31.useFixedAxis,args=(0,_objectWithoutProperties2["default"])(_ref31,_excluded4);(0,_classCallCheck2["default"])(this,VolumeView);_this17=_super27.call(this,args);_this17.target=target;_this17.useFixedAxis=useFixedAxis;return _this17;}(0,_createClass2["default"])(VolumeView,[{key:"getDeckGlView",value:function getDeckGlView(){var height=this.height,width=this.width,id=this.id,x=this.x,y=this.y;return new _core.OrbitView({id:id,controller:true,height:height,width:width,x:x,y:y,orbitAxis:'Y'});}},{key:"filterViewState",value:function filterViewState(_ref32){var viewState=_ref32.viewState;var id=this.id,target=this.target,useFixedAxis=this.useFixedAxis;return viewState.id===id?_objectSpread(_objectSpread({},viewState),{},{// fix the center of the camera if desired
target:useFixedAxis?target:viewState.target}):null;}},{key:"getLayers",value:function getLayers(_ref33){var props=_ref33.props;var loader=props.loader;var id=this.id;var layers=[new VolumeLayer(props,{id:"".concat(loader.type).concat(getVivId(id))})];return layers;}}]);return VolumeView;}(VivView);exports.VolumeView=VolumeView;var PictureInPictureViewer=function PictureInPictureViewer(props){var loader=props.loader,contrastLimits=props.contrastLimits,colors=props.colors,channelsVisible=props.channelsVisible,viewStatesProp=props.viewStates,colormap=props.colormap,overview=props.overview,overviewOn=props.overviewOn,selections=props.selections,_props$hoverHooks=props.hoverHooks,hoverHooks=_props$hoverHooks===void 0?{handleValue:function handleValue(){},handleCoordinate:function handleCoordinate(){}}:_props$hoverHooks,height=props.height,width=props.width,_props$lensEnabled=props.lensEnabled,lensEnabled=_props$lensEnabled===void 0?false:_props$lensEnabled,_props$lensSelection=props.lensSelection,lensSelection=_props$lensSelection===void 0?0:_props$lensSelection,_props$lensRadius=props.lensRadius,lensRadius=_props$lensRadius===void 0?100:_props$lensRadius,_props$lensBorderColo=props.lensBorderColor,lensBorderColor=_props$lensBorderColo===void 0?[255,255,255]:_props$lensBorderColo,_props$lensBorderRadi=props.lensBorderRadius,lensBorderRadius=_props$lensBorderRadi===void 0?0.02:_props$lensBorderRadi,_props$clickCenter=props.clickCenter,clickCenter=_props$clickCenter===void 0?true:_props$clickCenter,transparentColor=props.transparentColor,onViewStateChange=props.onViewStateChange,onHover=props.onHover,onViewportLoad=props.onViewportLoad,_props$extensions=props.extensions,extensions=_props$extensions===void 0?[new ColorPaletteExtension()]:_props$extensions,deckProps=props.deckProps;var detailViewState=viewStatesProp===null||viewStatesProp===void 0?void 0:viewStatesProp.find(function(v){return v.id===DETAIL_VIEW_ID;});var baseViewState=(0,_react.useMemo)(function(){return detailViewState||getDefaultInitialViewState(loader,{height:height,width:width},0.5);},[loader,detailViewState]);var detailView=new DetailView({id:DETAIL_VIEW_ID,height:height,width:width});var layerConfig={loader:loader,contrastLimits:contrastLimits,colors:colors,channelsVisible:channelsVisible,selections:selections,onViewportLoad:onViewportLoad,colormap:colormap,lensEnabled:lensEnabled,lensSelection:lensSelection,lensRadius:lensRadius,lensBorderColor:lensBorderColor,lensBorderRadius:lensBorderRadius,extensions:extensions,transparentColor:transparentColor};var views=[detailView];var layerProps=[layerConfig];var viewStates=[_objectSpread(_objectSpread({},baseViewState),{},{id:DETAIL_VIEW_ID})];if(overviewOn&&loader){var overviewViewState=(viewStatesProp===null||viewStatesProp===void 0?void 0:viewStatesProp.find(function(v){return v.id===OVERVIEW_VIEW_ID;}))||_objectSpread(_objectSpread({},baseViewState),{},{id:OVERVIEW_VIEW_ID});var overviewView=new OverviewView(_objectSpread({id:OVERVIEW_VIEW_ID,loader:loader,detailHeight:height,detailWidth:width,clickCenter:clickCenter},overview));views.push(overviewView);layerProps.push(_objectSpread(_objectSpread({},layerConfig),{},{lensEnabled:false}));viewStates.push(overviewViewState);}if(!loader)return null;return/* @__PURE__ */_react["default"].createElement(VivViewer,{layerProps:layerProps,views:views,viewStates:viewStates,hoverHooks:hoverHooks,onViewStateChange:onViewStateChange,onHover:onHover,deckProps:deckProps});};exports.PictureInPictureViewer=PictureInPictureViewer;var SideBySideViewer=function SideBySideViewer(props){var loader=props.loader,contrastLimits=props.contrastLimits,colors=props.colors,channelsVisible=props.channelsVisible,viewStatesProp=props.viewStates,colormap=props.colormap,panLock=props.panLock,selections=props.selections,zoomLock=props.zoomLock,height=props.height,width=props.width,_props$lensEnabled2=props.lensEnabled,lensEnabled=_props$lensEnabled2===void 0?false:_props$lensEnabled2,_props$lensSelection2=props.lensSelection,lensSelection=_props$lensSelection2===void 0?0:_props$lensSelection2,_props$lensRadius2=props.lensRadius,lensRadius=_props$lensRadius2===void 0?100:_props$lensRadius2,_props$lensBorderColo2=props.lensBorderColor,lensBorderColor=_props$lensBorderColo2===void 0?[255,255,255]:_props$lensBorderColo2,_props$lensBorderRadi2=props.lensBorderRadius,lensBorderRadius=_props$lensBorderRadi2===void 0?0.02:_props$lensBorderRadi2,transparentColor=props.transparentColor,onViewStateChange=props.onViewStateChange,onHover=props.onHover,onViewportLoad=props.onViewportLoad,_props$extensions2=props.extensions,extensions=_props$extensions2===void 0?[new ColorPaletteExtension()]:_props$extensions2,deckProps=props.deckProps;var leftViewState=viewStatesProp===null||viewStatesProp===void 0?void 0:viewStatesProp.find(function(v){return v.id==="left";});var rightViewState=viewStatesProp===null||viewStatesProp===void 0?void 0:viewStatesProp.find(function(v){return v.id==="right";});var viewStates=(0,_react.useMemo)(function(){if(leftViewState&&rightViewState){return viewStatesProp;}var defaultViewState=getDefaultInitialViewState(loader,{height:height,width:width/2},0.5);return[leftViewState||_objectSpread(_objectSpread({},defaultViewState),{},{id:"left"}),rightViewState||_objectSpread(_objectSpread({},defaultViewState),{},{id:"right"})];},[loader,leftViewState,rightViewState]);var detailViewLeft=new SideBySideView({id:"left",linkedIds:["right"],panLock:panLock,zoomLock:zoomLock,height:height,width:width/2});var detailViewRight=new SideBySideView({id:"right",x:width/2,linkedIds:["left"],panLock:panLock,zoomLock:zoomLock,height:height,width:width/2});var layerConfig={loader:loader,contrastLimits:contrastLimits,colors:colors,channelsVisible:channelsVisible,selections:selections,onViewportLoad:onViewportLoad,colormap:colormap,lensEnabled:lensEnabled,lensSelection:lensSelection,lensRadius:lensRadius,lensBorderColor:lensBorderColor,lensBorderRadius:lensBorderRadius,extensions:extensions,transparentColor:transparentColor};var views=[detailViewRight,detailViewLeft];var layerProps=[layerConfig,layerConfig];return loader?/* @__PURE__ */_react["default"].createElement(VivViewer,{layerProps:layerProps,views:views,randomize:true,onViewStateChange:onViewStateChange,onHover:onHover,viewStates:viewStates,deckProps:deckProps}):null;};exports.SideBySideViewer=SideBySideViewer;var VolumeViewer=function VolumeViewer(props){var loader=props.loader,contrastLimits=props.contrastLimits,colors=props.colors,channelsVisible=props.channelsVisible,selections=props.selections,colormap=props.colormap,_props$resolution=props.resolution,resolution=_props$resolution===void 0?Math.max(0,loader.length-1):_props$resolution,modelMatrix=props.modelMatrix,onViewStateChange=props.onViewStateChange,_props$xSlice=props.xSlice,xSlice=_props$xSlice===void 0?null:_props$xSlice,_props$ySlice=props.ySlice,ySlice=_props$ySlice===void 0?null:_props$ySlice,_props$zSlice=props.zSlice,zSlice=_props$zSlice===void 0?null:_props$zSlice,_onViewportLoad=props.onViewportLoad,screenHeight=props.height,screenWidth=props.width,viewStatesProp=props.viewStates,_props$clippingPlanes=props.clippingPlanes,clippingPlanes=_props$clippingPlanes===void 0?[]:_props$clippingPlanes,_props$useFixedAxis=props.useFixedAxis,useFixedAxis=_props$useFixedAxis===void 0?true:_props$useFixedAxis,_props$extensions3=props.extensions,extensions=_props$extensions3===void 0?[new ColorPalette3DExtensions.AdditiveBlendExtension()]:_props$extensions3;var volumeViewState=viewStatesProp===null||viewStatesProp===void 0?void 0:viewStatesProp.find(function(state){return(state===null||state===void 0?void 0:state.id)==="3d";});var initialViewState=(0,_react.useMemo)(function(){if(volumeViewState){return volumeViewState;}var viewState=getDefaultInitialViewState(loader,{height:screenHeight,width:screenWidth},1,true,modelMatrix);return _objectSpread(_objectSpread({},viewState),{},{rotationX:0,rotationOrbit:0});},[loader,resolution,modelMatrix]);var viewStates=[volumeViewState||_objectSpread(_objectSpread({},initialViewState),{},{id:"3d"})];var volumeView=new VolumeView({id:"3d",target:viewStates[0].target,useFixedAxis:useFixedAxis});var layerConfig={loader:loader,contrastLimits:contrastLimits,colors:colors,channelsVisible:channelsVisible,selections:selections,colormap:colormap,xSlice:xSlice,ySlice:ySlice,zSlice:zSlice,resolution:resolution,extensions:extensions,modelMatrix:modelMatrix,onViewportLoad:function onViewportLoad(){return setTimeout(_onViewportLoad,0);},clippingPlanes:clippingPlanes};var views=[volumeView];var layerProps=[layerConfig];return loader?/* @__PURE__ */_react["default"].createElement(VivViewer,{layerProps:layerProps,views:views,viewStates:viewStates,onViewStateChange:onViewStateChange,useDevicePixels:false}):null;};exports.VolumeViewer=VolumeViewer;var VIV_PROXY_KEY="__viv";var OFFSETS_PROXY_KEY="".concat(VIV_PROXY_KEY,"-offsets");function checkProxies(tiff){if(!isProxy(tiff,OFFSETS_PROXY_KEY)){console.warn("GeoTIFF source is missing offsets proxy.");}}function isProxy(tiff,proxyFlag){return tiff[proxyFlag];}function createOffsetsProxy(tiff,offsets){var get=function get(target,key){if(key==="getImage"){return function(index){if(!(index in target.ifdRequests)&&index in offsets){var offset=offsets[index];target.ifdRequests[index]=target.parseFileDirectoryAt(offset);}return target.getImage(index);};}if(key===OFFSETS_PROXY_KEY){return true;}return Reflect.get(target,key);};return new Proxy(tiff,{get:get});}var LZWDecoder=/*#__PURE__*/function(_BaseDecoder){(0,_inherits2["default"])(LZWDecoder,_BaseDecoder);var _super28=_createSuper(LZWDecoder);function LZWDecoder(fileDirectory){var _this18;(0,_classCallCheck2["default"])(this,LZWDecoder);_this18=_super28.call(this);var width=fileDirectory.TileWidth||fileDirectory.ImageWidth;var height=fileDirectory.TileLength||fileDirectory.ImageLength;var nbytes=fileDirectory.BitsPerSample[0]/8;_this18.maxUncompressedSize=width*height*nbytes;return _this18;}(0,_createClass2["default"])(LZWDecoder,[{key:"decodeBlock",value:function(){var _decodeBlock=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee5(buffer){var bytes,decoded;return _regenerator["default"].wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:bytes=new Uint8Array(buffer);_context5.next=3;return(0,_lzwTiffDecoder.decompress)(bytes,this.maxUncompressedSize);case 3:decoded=_context5.sent;return _context5.abrupt("return",decoded.buffer);case 5:case"end":return _context5.stop();}}},_callee5,this);}));function decodeBlock(_x3){return _decodeBlock.apply(this,arguments);}return decodeBlock;}()}]);return LZWDecoder;}(_geotiff.BaseDecoder);var encodedJs="";var blob=typeof window!=="undefined"&&window.Blob&&new Blob([atob(encodedJs)],{type:"text/javascript;charset=utf-8"});function WorkerWrapper(){var objURL=blob&&(window.URL||window.webkitURL).createObjectURL(blob);try{return objURL?new Worker(objURL,{type:"module"}):new Worker("data:application/javascript;base64,"+encodedJs,{type:"module"});}finally{objURL&&(window.URL||window.webkitURL).revokeObjectURL(objURL);}}var defaultPoolSize=(_globalThis$navigator=globalThis===null||globalThis===void 0?void 0:(_globalThis$navigator2=globalThis.navigator)===null||_globalThis$navigator2===void 0?void 0:_globalThis$navigator2.hardwareConcurrency)!==null&&_globalThis$navigator!==void 0?_globalThis$navigator:4;function createWorker(){return new WorkerWrapper();}var Pool=/*#__PURE__*/function(_Pool$){(0,_inherits2["default"])(Pool,_Pool$);var _super29=_createSuper(Pool);function Pool(){(0,_classCallCheck2["default"])(this,Pool);return _super29.call(this,defaultPoolSize,createWorker);}return(0,_createClass2["default"])(Pool);}(_geotiff.Pool);var PARSER_OPTIONS={attributeNamePrefix:"",attrNodeName:"attr",parseNodeValue:true,parseAttributeValue:true,ignoreAttributes:false};var parse=function parse(str){return _fastXmlParser["default"].parse(str,PARSER_OPTIONS);};function fromString(str){var res=parse(str);if(!res.OME){throw Error("Failed to parse OME-XML metadata.");}return ensureArray(res.OME.Image).map(function(img){var Channels=ensureArray(img.Pixels.Channel).map(function(c){if("Color"in c.attr){return _objectSpread(_objectSpread({},c.attr),{},{Color:intToRgba(c.attr.Color)});}return _objectSpread({},c.attr);});var _img$AquisitionDate=img.AquisitionDate,AquisitionDate=_img$AquisitionDate===void 0?"":_img$AquisitionDate,_img$Description=img.Description,Description=_img$Description===void 0?"":_img$Description;var image=_objectSpread(_objectSpread({},img.attr),{},{AquisitionDate:AquisitionDate,Description:Description,Pixels:_objectSpread(_objectSpread({},img.Pixels.attr),{},{Channels:Channels})});return _objectSpread(_objectSpread({},image),{},{format:function format(){var Pixels=image.Pixels;var sizes=["X","Y","Z"].map(function(name){var size=Pixels["PhysicalSize".concat(name)];var unit=Pixels["PhysicalSize".concat(name,"Unit")];return size&&unit?"".concat(size," ").concat(unit):"-";}).join(" x ");return{"Acquisition Date":image.AquisitionDate,"Dimensions (XY)":"".concat(Pixels.SizeX," x ").concat(Pixels.SizeY),"Pixels Type":Pixels.Type,"Pixels Size (XYZ)":sizes,"Z-sections/Timepoints":"".concat(Pixels.SizeZ," x ").concat(Pixels.SizeT),Channels:Pixels.SizeC};}});});}var TiffPixelSource=/*#__PURE__*/function(){function TiffPixelSource(indexer,dtype,tileSize,shape,labels,meta,pool){(0,_classCallCheck2["default"])(this,TiffPixelSource);(0,_defineProperty2["default"])(this,"_indexer",void 0);this.dtype=dtype;this.tileSize=tileSize;this.shape=shape;this.labels=labels;this.meta=meta;this.pool=pool;this._indexer=indexer;}(0,_createClass2["default"])(TiffPixelSource,[{key:"getRaster",value:function(){var _getRaster4=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee6(_ref34){var selection,signal,image;return _regenerator["default"].wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:selection=_ref34.selection,signal=_ref34.signal;_context6.next=3;return this._indexer(selection);case 3:image=_context6.sent;return _context6.abrupt("return",this._readRasters(image,{signal:signal}));case 5:case"end":return _context6.stop();}}},_callee6,this);}));function getRaster(_x4){return _getRaster4.apply(this,arguments);}return getRaster;}()},{key:"getTile",value:function(){var _getTile=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee7(_ref35){var x,y,selection,signal,_this$_getTileExtent,height,width,x0,y0,window,image;return _regenerator["default"].wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:x=_ref35.x,y=_ref35.y,selection=_ref35.selection,signal=_ref35.signal;_this$_getTileExtent=this._getTileExtent(x,y),height=_this$_getTileExtent.height,width=_this$_getTileExtent.width;x0=x*this.tileSize;y0=y*this.tileSize;window=[x0,y0,x0+width,y0+height];_context7.next=7;return this._indexer(selection);case 7:image=_context7.sent;return _context7.abrupt("return",this._readRasters(image,{window:window,width:width,height:height,signal:signal}));case 9:case"end":return _context7.stop();}}},_callee7,this);}));function getTile(_x5){return _getTile.apply(this,arguments);}return getTile;}()},{key:"_readRasters",value:function(){var _readRasters2=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee8(image,props){var _props$signal;var interleave,raster,data;return _regenerator["default"].wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:interleave=isInterleaved(this.shape);_context8.next=3;return image.readRasters(_objectSpread(_objectSpread({interleave:interleave},props),{},{pool:this.pool}));case 3:raster=_context8.sent;if(!(props!==null&&props!==void 0&&(_props$signal=props.signal)!==null&&_props$signal!==void 0&&_props$signal.aborted)){_context8.next=6;break;}throw SIGNAL_ABORTED;case 6:data=interleave?raster:raster[0];return _context8.abrupt("return",{data:data,width:raster.width,height:raster.height});case 8:case"end":return _context8.stop();}}},_callee8,this);}));function _readRasters(_x6,_x7){return _readRasters2.apply(this,arguments);}return _readRasters;}()},{key:"_getTileExtent",value:function _getTileExtent(x,y){var _getImageSize6=getImageSize(this),zoomLevelHeight=_getImageSize6.height,zoomLevelWidth=_getImageSize6.width;var height=this.tileSize;var width=this.tileSize;var maxXTileCoord=Math.floor(zoomLevelWidth/this.tileSize);var maxYTileCoord=Math.floor(zoomLevelHeight/this.tileSize);if(x===maxXTileCoord){width=zoomLevelWidth%this.tileSize;}if(y===maxYTileCoord){height=zoomLevelHeight%this.tileSize;}return{height:height,width:width};}},{key:"onTileError",value:function onTileError(err){console.error(err);}}]);return TiffPixelSource;}();exports.TiffPixelSource=TiffPixelSource;function getOmeLegacyIndexer(tiff,rootMeta){var _rootMeta$0$Pixels=rootMeta[0].Pixels,SizeT=_rootMeta$0$Pixels.SizeT,SizeC=_rootMeta$0$Pixels.SizeC,SizeZ=_rootMeta$0$Pixels.SizeZ;var ifdIndexer=getOmeIFDIndexer(rootMeta,0);return function(sel,pyramidLevel){var index=ifdIndexer(sel);var pyramidIndex=pyramidLevel*SizeZ*SizeT*SizeC;return tiff.getImage(index+pyramidIndex);};}function getOmeSubIFDIndexer(tiff,rootMeta){var image=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var ifdIndexer=getOmeIFDIndexer(rootMeta,image);var ifdCache=/* @__PURE__ */new Map();return/*#__PURE__*/function(){var _ref36=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee9(sel,pyramidLevel){var index,baseImage,SubIFDs,key,subIfdOffset,ifd;return _regenerator["default"].wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:index=ifdIndexer(sel);_context9.next=3;return tiff.getImage(index);case 3:baseImage=_context9.sent;if(!(pyramidLevel===0)){_context9.next=6;break;}return _context9.abrupt("return",baseImage);case 6:SubIFDs=baseImage.fileDirectory.SubIFDs;if(SubIFDs){_context9.next=9;break;}throw Error("Indexing Error: OME-TIFF is missing SubIFDs.");case 9:key="".concat(sel.t,"-").concat(sel.c,"-").concat(sel.z,"-").concat(pyramidLevel);if(!ifdCache.has(key)){subIfdOffset=SubIFDs[pyramidLevel-1];ifdCache.set(key,tiff.parseFileDirectoryAt(subIfdOffset));}_context9.next=13;return ifdCache.get(key);case 13:ifd=_context9.sent;return _context9.abrupt("return",new _geotiff.GeoTIFFImage(ifd.fileDirectory,ifd.geoKeyDirectory,baseImage.dataView,tiff.littleEndian,tiff.cache,tiff.source));case 15:case"end":return _context9.stop();}}},_callee9);}));return function(_x8,_x9){return _ref36.apply(this,arguments);};}();}function getOmeIFDIndexer(rootMeta){var image=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var _rootMeta$image$Pixel=rootMeta[image].Pixels,SizeC=_rootMeta$image$Pixel.SizeC,SizeZ=_rootMeta$image$Pixel.SizeZ,SizeT=_rootMeta$image$Pixel.SizeT,DimensionOrder=_rootMeta$image$Pixel.DimensionOrder;var imageOffset=0;if(image>0){for(var i=0;i<image;i+=1){var _rootMeta$i$Pixels=rootMeta[i].Pixels,prevSizeC=_rootMeta$i$Pixels.SizeC,prevSizeZ=_rootMeta$i$Pixels.SizeZ,prevSizeT=_rootMeta$i$Pixels.SizeT;imageOffset+=prevSizeC*prevSizeZ*prevSizeT;}}switch(DimensionOrder){case"XYZCT":{return function(_ref37){var t=_ref37.t,c=_ref37.c,z=_ref37.z;return imageOffset+t*SizeZ*SizeC+c*SizeZ+z;};}case"XYZTC":{return function(_ref38){var t=_ref38.t,c=_ref38.c,z=_ref38.z;return imageOffset+c*SizeZ*SizeT+t*SizeZ+z;};}case"XYCTZ":{return function(_ref39){var t=_ref39.t,c=_ref39.c,z=_ref39.z;return imageOffset+z*SizeC*SizeT+t*SizeC+c;};}case"XYCZT":{return function(_ref40){var t=_ref40.t,c=_ref40.c,z=_ref40.z;return imageOffset+t*SizeC*SizeZ+z*SizeC+c;};}case"XYTCZ":{return function(_ref41){var t=_ref41.t,c=_ref41.c,z=_ref41.z;return imageOffset+z*SizeT*SizeC+c*SizeT+t;};}case"XYTZC":{return function(_ref42){var t=_ref42.t,c=_ref42.c,z=_ref42.z;return imageOffset+c*SizeT*SizeZ+z*SizeT+t;};}default:{throw new Error("Invalid OME-XML DimensionOrder, got ".concat(DimensionOrder,"."));}}}var DTYPE_LOOKUP$1={uint8:"Uint8",uint16:"Uint16",uint32:"Uint32","float":"Float32","double":"Float64",int8:"Int8",int16:"Int16",int32:"Int32"};function getOmePixelSourceMeta(_ref43){var Pixels=_ref43.Pixels;var labels=getLabels(Pixels.DimensionOrder);var dims=getDims(labels);var shape=Array(labels.length).fill(0);shape[dims("t")]=Pixels.SizeT;shape[dims("c")]=Pixels.SizeC;shape[dims("z")]=Pixels.SizeZ;if(Pixels.Interleaved){labels.push("_c");shape.push(3);}var getShape=function getShape(level){var s=(0,_toConsumableArray2["default"])(shape);s[dims("x")]=Pixels.SizeX>>level;s[dims("y")]=Pixels.SizeY>>level;return s;};if(!(Pixels.Type in DTYPE_LOOKUP$1)){throw Error("Pixel type ".concat(Pixels.Type," not supported."));}var dtype=DTYPE_LOOKUP$1[Pixels.Type];if(Pixels.PhysicalSizeX&&Pixels.PhysicalSizeY){var physicalSizes={x:{size:Pixels.PhysicalSizeX,unit:Pixels.PhysicalSizeXUnit},y:{size:Pixels.PhysicalSizeY,unit:Pixels.PhysicalSizeYUnit}};if(Pixels.PhysicalSizeZ){physicalSizes.z={size:Pixels.PhysicalSizeZ,unit:Pixels.PhysicalSizeZUnit};}return{labels:labels,getShape:getShape,physicalSizes:physicalSizes,dtype:dtype};}return{labels:labels,getShape:getShape,dtype:dtype};}function guessTileSize$1(image){var tileWidth=image.getTileWidth();var tileHeight=image.getTileHeight();var size=Math.min(tileWidth,tileHeight);return prevPowerOf2(size);}function getIndexer$1(tiff,omexml,SubIFDs,image){if(SubIFDs){return getOmeSubIFDIndexer(tiff,omexml,image);}return getOmeLegacyIndexer(tiff,omexml);}function load$2(_x10,_x11){return _load$.apply(this,arguments);}function _load$(){_load$=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee19(tiff,pool){var firstImage,_firstImage$fileDirec,ImageDescription,SubIFDs,photometricInterpretation,omexml,rootMeta,levels,getSource;return _regenerator["default"].wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:_context19.next=2;return tiff.getImage(0);case 2:firstImage=_context19.sent;_firstImage$fileDirec=firstImage.fileDirectory,ImageDescription=_firstImage$fileDirec.ImageDescription,SubIFDs=_firstImage$fileDirec.SubIFDs,photometricInterpretation=_firstImage$fileDirec.PhotometricInterpretation;omexml=fromString(ImageDescription);rootMeta=omexml;if(SubIFDs){levels=SubIFDs.length+1;}else{levels=omexml.length;rootMeta=[omexml[0]];}getSource=function getSource(resolution,pyramidIndexer,imgMeta){var _getOmePixelSourceMet=getOmePixelSourceMeta(imgMeta),labels=_getOmePixelSourceMet.labels,getShape=_getOmePixelSourceMet.getShape,physicalSizes=_getOmePixelSourceMet.physicalSizes,dtype=_getOmePixelSourceMet.dtype;var tileSize=guessTileSize$1(firstImage);var meta={photometricInterpretation:photometricInterpretation,physicalSizes:physicalSizes};var shape=getShape(resolution);var indexer=function indexer(sel){return pyramidIndexer(sel,resolution);};var source=new TiffPixelSource(indexer,dtype,tileSize,shape,labels,meta,pool);return source;};return _context19.abrupt("return",rootMeta.map(function(imgMeta,image){var pyramidIndexer=getIndexer$1(tiff,omexml,SubIFDs,image);var data=Array.from({length:levels}).map(function(_,resolution){return getSource(resolution,pyramidIndexer,imgMeta);});return{data:data,metadata:imgMeta};}));case 9:case"end":return _context19.stop();}}},_callee19);}));return _load$.apply(this,arguments);}(0,_geotiff.addDecoder)(5,function(){return LZWDecoder;});function loadOmeTiff(_x12){return _loadOmeTiff.apply(this,arguments);}function _loadOmeTiff(){_loadOmeTiff=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee20(source){var opts,headers,offsets,_opts$pool,pool,_opts$images,images,tiff,loaders,_args20=arguments;return _regenerator["default"].wrap(function _callee20$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:opts=_args20.length>1&&_args20[1]!==undefined?_args20[1]:{};headers=opts.headers,offsets=opts.offsets,_opts$pool=opts.pool,pool=_opts$pool===void 0?true:_opts$pool,_opts$images=opts.images,images=_opts$images===void 0?"first":_opts$images;if(!(typeof source==="string")){_context20.next=8;break;}_context20.next=5;return(0,_geotiff.fromUrl)(source,_objectSpread(_objectSpread({},headers),{},{cacheSize:Infinity}));case 5:tiff=_context20.sent;_context20.next=11;break;case 8:_context20.next=10;return(0,_geotiff.fromBlob)(source);case 10:tiff=_context20.sent;case 11:if(offsets){tiff=createOffsetsProxy(tiff,offsets);}checkProxies(tiff);if(!pool){_context20.next=19;break;}_context20.next=16;return load$2(tiff,new Pool());case 16:_context20.t0=_context20.sent;_context20.next=22;break;case 19:_context20.next=21;return load$2(tiff);case 21:_context20.t0=_context20.sent;case 22:loaders=_context20.t0;return _context20.abrupt("return",images==="all"?loaders:loaders[0]);case 24:case"end":return _context20.stop();}}},_callee20);}));return _loadOmeTiff.apply(this,arguments);}function joinUrlParts(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return args.map(function(part,i){if(i===0)return part.trim().replace(/[/]*$/g,"");return part.trim().replace(/(^[/]*|[/]*$)/g,"");}).filter(function(x){return x.length;}).join("/");}var ReadOnlyStore=/*#__PURE__*/function(){function ReadOnlyStore(){(0,_classCallCheck2["default"])(this,ReadOnlyStore);}(0,_createClass2["default"])(ReadOnlyStore,[{key:"keys",value:function(){var _keys=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee10(){return _regenerator["default"].wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:return _context10.abrupt("return",[]);case 1:case"end":return _context10.stop();}}},_callee10);}));function keys(){return _keys.apply(this,arguments);}return keys;}()},{key:"deleteItem",value:function(){var _deleteItem=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee11(){return _regenerator["default"].wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:return _context11.abrupt("return",false);case 1:case"end":return _context11.stop();}}},_callee11);}));function deleteItem(){return _deleteItem.apply(this,arguments);}return deleteItem;}()},{key:"setItem",value:function(){var _setItem=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee12(){return _regenerator["default"].wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:console.warn("Cannot write to read-only store.");return _context12.abrupt("return",false);case 2:case"end":return _context12.stop();}}},_callee12);}));function setItem(){return _setItem.apply(this,arguments);}return setItem;}()}]);return ReadOnlyStore;}();var FileStore=/*#__PURE__*/function(_ReadOnlyStore){(0,_inherits2["default"])(FileStore,_ReadOnlyStore);var _super30=_createSuper(FileStore);function FileStore(fileMap){var _this19;var rootPrefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";(0,_classCallCheck2["default"])(this,FileStore);_this19=_super30.call(this);(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this19),"_map",void 0);(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this19),"_rootPrefix",void 0);_this19._map=fileMap;_this19._rootPrefix=rootPrefix;return _this19;}(0,_createClass2["default"])(FileStore,[{key:"_key",value:function _key(key){return joinUrlParts(this._rootPrefix,key);}},{key:"getItem",value:function(){var _getItem=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee13(key){var file,buffer;return _regenerator["default"].wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:file=this._map.get(this._key(key));if(file){_context13.next=3;break;}throw new _zarr.KeyError(key);case 3:_context13.next=5;return file.arrayBuffer();case 5:buffer=_context13.sent;return _context13.abrupt("return",buffer);case 7:case"end":return _context13.stop();}}},_callee13,this);}));function getItem(_x13){return _getItem.apply(this,arguments);}return getItem;}()},{key:"containsItem",value:function(){var _containsItem=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee14(key){var path;return _regenerator["default"].wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:path=this._key(key);return _context14.abrupt("return",this._map.has(path));case 2:case"end":return _context14.stop();}}},_callee14,this);}));function containsItem(_x14){return _containsItem.apply(this,arguments);}return containsItem;}()}]);return FileStore;}(ReadOnlyStore);function isOmeZarr(dataShape,Pixels){var SizeT=Pixels.SizeT,SizeC=Pixels.SizeC,SizeZ=Pixels.SizeZ,SizeY=Pixels.SizeY,SizeX=Pixels.SizeX;var omeZarrShape=[SizeT,SizeC,SizeZ,SizeY,SizeX];return dataShape.every(function(size,i){return omeZarrShape[i]===size;});}function guessBioformatsLabels(_ref44,_ref45){var shape=_ref44.shape;var Pixels=_ref45.Pixels;if(isOmeZarr(shape,Pixels)){return getLabels("XYZCT");}var labels=getLabels(Pixels.DimensionOrder);labels.forEach(function(lower,i){var label=lower.toUpperCase();var xmlSize=Pixels["Size".concat(label)];if(!xmlSize){throw Error("Dimension ".concat(label," is invalid for OME-XML."));}if(shape[i]!==xmlSize){throw Error("Dimension mismatch between zarr source and OME-XML.");}});return labels;}function getRootPrefix(files,rootName){var first=files.find(function(f){return f.path.indexOf(rootName)>0;});if(!first){throw Error("Could not find root in store.");}var prefixLength=first.path.indexOf(rootName)+rootName.length;return first.path.slice(0,prefixLength);}function loadMultiscales(_x15){return _loadMultiscales.apply(this,arguments);}function _loadMultiscales(){_loadMultiscales=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee21(store){var path,grp,rootAttrs,paths,labels,_rootAttrs$multiscale,datasets,axes,data,_args21=arguments;return _regenerator["default"].wrap(function _callee21$(_context21){while(1){switch(_context21.prev=_context21.next){case 0:path=_args21.length>1&&_args21[1]!==undefined?_args21[1]:"";_context21.next=3;return(0,_zarr.openGroup)(store,path);case 3:grp=_context21.sent;_context21.next=6;return grp.attrs.asObject();case 6:rootAttrs=_context21.sent;paths=["0"];labels=["t","c","z","y","x"];if("multiscales"in rootAttrs){_rootAttrs$multiscale=rootAttrs.multiscales[0],datasets=_rootAttrs$multiscale.datasets,axes=_rootAttrs$multiscale.axes;paths=datasets.map(function(d){return d.path;});if(axes){labels=axes;}}data=paths.map(function(path2){return grp.getItem(path2);});_context21.next=13;return Promise.all(data);case 13:_context21.t0=_context21.sent;_context21.t1=rootAttrs;_context21.t2=labels;return _context21.abrupt("return",{data:_context21.t0,rootAttrs:_context21.t1,labels:_context21.t2});case 17:case"end":return _context21.stop();}}},_callee21);}));return _loadMultiscales.apply(this,arguments);}function guessTileSize(arr){var interleaved=isInterleaved(arr.shape);var _arr$chunks$slice=arr.chunks.slice(interleaved?-3:-2),_arr$chunks$slice2=(0,_slicedToArray2["default"])(_arr$chunks$slice,2),yChunk=_arr$chunks$slice2[0],xChunk=_arr$chunks$slice2[1];var size=Math.min(yChunk,xChunk);return prevPowerOf2(size);}function getIndexer(labels){var size=labels.length;var dims=getDims(labels.map(function(label,i){return(0,_typeof2["default"])(label)==="object"?label.name:label;}).map(function(name,i){return name;}));return function(sel){if(Array.isArray(sel)){return(0,_toConsumableArray2["default"])(sel);}var selection=Array(size).fill(0);for(var _i=0,_Object$entries=Object.entries(sel);_i<_Object$entries.length;_i++){var _Object$entries$_i=(0,_slicedToArray2["default"])(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];selection[dims(key)]=value;}return selection;};}var DTYPE_LOOKUP={u1:"Uint8",u2:"Uint16",u4:"Uint32",f4:"Float32",f8:"Float64",i1:"Int8",i2:"Int16",i4:"Int32"};var ZarrPixelSource=/*#__PURE__*/function(){function ZarrPixelSource(data,labels,tileSize){(0,_classCallCheck2["default"])(this,ZarrPixelSource);(0,_defineProperty2["default"])(this,"_data",void 0);(0,_defineProperty2["default"])(this,"_indexer",void 0);(0,_defineProperty2["default"])(this,"_readChunks",void 0);this.labels=labels;this.tileSize=tileSize;this._indexer=getIndexer(labels);this._data=data;var xChunkSize=data.chunks[this._xIndex];var yChunkSize=data.chunks[this._xIndex-1];this._readChunks=tileSize===xChunkSize&&tileSize===yChunkSize;}(0,_createClass2["default"])(ZarrPixelSource,[{key:"shape",get:function get(){return this._data.shape;}},{key:"dtype",get:function get(){var suffix=this._data.dtype.slice(1);if(!(suffix in DTYPE_LOOKUP)){throw Error("Zarr dtype not supported, got ".concat(suffix,"."));}return DTYPE_LOOKUP[suffix];}},{key:"_xIndex",get:function get(){var interleave=isInterleaved(this._data.shape);return this._data.shape.length-(interleave?2:1);}},{key:"_chunkIndex",value:function _chunkIndex(selection,x,y){var sel=this._indexer(selection);sel[this._xIndex]=x;sel[this._xIndex-1]=y;return sel;}},{key:"_getSlices",value:function _getSlices(x,y){var _getImageSize7=getImageSize(this),height=_getImageSize7.height,width=_getImageSize7.width;var _ref46=[x*this.tileSize,Math.min((x+1)*this.tileSize,width)],xStart=_ref46[0],xStop=_ref46[1];var _ref47=[y*this.tileSize,Math.min((y+1)*this.tileSize,height)],yStart=_ref47[0],yStop=_ref47[1];if(xStart===xStop||yStart===yStop){throw new _zarr.BoundsCheckError("Tile slice is zero-sized.");}return[(0,_zarr.slice)(xStart,xStop),(0,_zarr.slice)(yStart,yStop)];}},{key:"getRaster",value:function(){var _getRaster5=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee15(_ref48){var selection,sel,_yield$this$_data$get,data,shape,_shape,height,width;return _regenerator["default"].wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:selection=_ref48.selection;sel=this._chunkIndex(selection,null,null);_context15.next=4;return this._data.getRaw(sel);case 4:_yield$this$_data$get=_context15.sent;data=_yield$this$_data$get.data;shape=_yield$this$_data$get.shape;_shape=(0,_slicedToArray2["default"])(shape,2),height=_shape[0],width=_shape[1];return _context15.abrupt("return",{data:data,width:width,height:height});case 9:case"end":return _context15.stop();}}},_callee15,this);}));function getRaster(_x16){return _getRaster5.apply(this,arguments);}return getRaster;}()},{key:"getTile",value:function(){var _getTile2=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee16(props){var x,y,selection,signal,res,sel,_this$_getSlices,_this$_getSlices2,xSlice,ySlice,_sel,_res,data,_res$shape,height,width;return _regenerator["default"].wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:x=props.x,y=props.y,selection=props.selection,signal=props.signal;if(!this._readChunks){_context16.next=8;break;}sel=this._chunkIndex(selection,x,y);_context16.next=5;return this._data.getRawChunk(sel,{storeOptions:{signal:signal}});case 5:res=_context16.sent;_context16.next=13;break;case 8:_this$_getSlices=this._getSlices(x,y),_this$_getSlices2=(0,_slicedToArray2["default"])(_this$_getSlices,2),xSlice=_this$_getSlices2[0],ySlice=_this$_getSlices2[1];_sel=this._chunkIndex(selection,xSlice,ySlice);_context16.next=12;return this._data.getRaw(_sel);case 12:res=_context16.sent;case 13:_res=res,data=_res.data,_res$shape=(0,_slicedToArray2["default"])(_res.shape,2),height=_res$shape[0],width=_res$shape[1];return _context16.abrupt("return",{data:data,width:width,height:height});case 15:case"end":return _context16.stop();}}},_callee16,this);}));function getTile(_x17){return _getTile2.apply(this,arguments);}return getTile;}()},{key:"onTileError",value:function onTileError(err){if(!(err instanceof _zarr.BoundsCheckError)){throw err;}}}]);return ZarrPixelSource;}();exports.ZarrPixelSource=ZarrPixelSource;function load$1(_x18,_x19){return _load$2.apply(this,arguments);}function _load$2(){_load$2=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee22(root,xmlSource){var imgMeta,_yield$loadMultiscale,data,labels,tileSize,pyramid;return _regenerator["default"].wrap(function _callee22$(_context22){while(1){switch(_context22.prev=_context22.next){case 0:if(!(typeof xmlSource!=="string")){_context22.next=4;break;}_context22.next=3;return xmlSource.text();case 3:xmlSource=_context22.sent;case 4:imgMeta=fromString(xmlSource)[0];_context22.next=7;return loadMultiscales(root,"0");case 7:_yield$loadMultiscale=_context22.sent;data=_yield$loadMultiscale.data;labels=guessBioformatsLabels(data[0],imgMeta);tileSize=guessTileSize(data[0]);pyramid=data.map(function(arr){return new ZarrPixelSource(arr,labels,tileSize);});return _context22.abrupt("return",{data:pyramid,metadata:imgMeta});case 13:case"end":return _context22.stop();}}},_callee22);}));return _load$2.apply(this,arguments);}function load(_x20){return _load.apply(this,arguments);}function _load(){_load=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee23(store){var _yield$loadMultiscale2,data,rootAttrs,labels,tileSize,pyramid;return _regenerator["default"].wrap(function _callee23$(_context23){while(1){switch(_context23.prev=_context23.next){case 0:_context23.next=2;return loadMultiscales(store);case 2:_yield$loadMultiscale2=_context23.sent;data=_yield$loadMultiscale2.data;rootAttrs=_yield$loadMultiscale2.rootAttrs;labels=_yield$loadMultiscale2.labels;tileSize=guessTileSize(data[0]);pyramid=data.map(function(arr){return new ZarrPixelSource(arr,labels,tileSize);});return _context23.abrupt("return",{data:pyramid,metadata:rootAttrs});case 9:case"end":return _context23.stop();}}},_callee23);}));return _load.apply(this,arguments);}function loadBioformatsZarr(_x21){return _loadBioformatsZarr.apply(this,arguments);}function _loadBioformatsZarr(){_loadBioformatsZarr=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee24(source){var options,METADATA,ZARR_DIR,url,store2,xmlSource,fMap,xmlFile,_iterator,_step,file,store,_args24=arguments;return _regenerator["default"].wrap(function _callee24$(_context24){while(1){switch(_context24.prev=_context24.next){case 0:options=_args24.length>1&&_args24[1]!==undefined?_args24[1]:{};METADATA="METADATA.ome.xml";ZARR_DIR="data.zarr";if(!(typeof source==="string")){_context24.next=10;break;}url=source.endsWith("/")?source.slice(0,-1):source;store2=new _zarr.HTTPStore(url+"/"+ZARR_DIR,options);_context24.next=8;return fetch(url+"/"+METADATA,options.fetchOptions);case 8:xmlSource=_context24.sent;return _context24.abrupt("return",load$1(store2,xmlSource));case 10:fMap=/* @__PURE__ */new Map();_iterator=_createForOfIteratorHelper(source);try{for(_iterator.s();!(_step=_iterator.n()).done;){file=_step.value;if(file.name===METADATA){xmlFile=file;}else{fMap.set(file.path,file);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(xmlFile){_context24.next=15;break;}throw Error("No OME-XML metadata found for store.");case 15:store=new FileStore(fMap,getRootPrefix(source,ZARR_DIR));return _context24.abrupt("return",load$1(store,xmlFile));case 17:case"end":return _context24.stop();}}},_callee24);}));return _loadBioformatsZarr.apply(this,arguments);}function loadOmeZarr(_x22){return _loadOmeZarr.apply(this,arguments);}function _loadOmeZarr(){_loadOmeZarr=(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee25(source){var options,store,_args25=arguments;return _regenerator["default"].wrap(function _callee25$(_context25){while(1){switch(_context25.prev=_context25.next){case 0:options=_args25.length>1&&_args25[1]!==undefined?_args25[1]:{};store=new _zarr.HTTPStore(source,options);if(!((options===null||options===void 0?void 0:options.type)!=="multiscales")){_context25.next=4;break;}throw Error("Only multiscale OME-Zarr is supported.");case 4:return _context25.abrupt("return",load(store));case 5:case"end":return _context25.stop();}}},_callee25);}));return _loadOmeZarr.apply(this,arguments);}